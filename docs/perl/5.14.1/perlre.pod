
=encoding euc-jp

=head1 NAME
X<regular expression> X<regex> X<regexp>

=begin original

perlre - Perl regular expressions

=end original

perlre - Perl の正規表現

=head1 DESCRIPTION

=begin original

This page describes the syntax of regular expressions in Perl.

=end original

このページでは Perl での正規表現の構文について説明します。

=begin original

If you haven't used regular expressions before, a quick-start
introduction is available in L<perlrequick>, and a longer tutorial
introduction is available in L<perlretut>.

=end original

もしこれまでに正規表現を使ったことがないのであれば、
L<perlrequick> にクイックスタートが、L<perlretut> に
長めのチュートリアルがあります。

=begin original

For reference on how regular expressions are used in matching
operations, plus various examples of the same, see discussions of
C<m//>, C<s///>, C<qr//> and C<??> in L<perlop/"Regexp Quote-Like
Operators">.

=end original

正規表現をマッチング操作でどのように使うかやそれに関する様々な例に
関しては、L<perlop/"Regexp Quote-Like Operators"> にある
C<m//>, C<s///>, C<qr//>, C<??> の説明を参照して下さい。

=head2 Modifiers

(修飾子)

=begin original

Matching operations can have various modifiers.  Modifiers
that relate to the interpretation of the regular expression inside
are listed below.  Modifiers that alter the way a regular expression
is used by Perl are detailed in L<perlop/"Regexp Quote-Like Operators"> and
L<perlop/"Gory details of parsing quoted constructs">.

=end original

マッチング操作には様々な修飾子(modifier)があります。
修飾子は正規表現内の解釈に関連する物で、次に一覧にしています。
Perl が正規表現を使う方法を変更する
修飾子は L<perlop/"Regexp Quote-Like Operators">
及び L<perlop/"Gory details of parsing quoted constructs"> に
説明されています。

=over 4

=item m
X</m> X<regex, multiline> X<regexp, multiline> X<regular expression, multiline>

=begin original

Treat string as multiple lines.  That is, change "^" and "$" from matching
the start or end of the string to matching the start or end of any
line anywhere within the string.

=end original

文字列を複数行として扱います。
つまり、"^" 及び "$" は文字列の最初と最後に対するマッチングから、
文字列中の各行の先頭と末尾に対するマッチングへと変更されます。

=item s
X</s> X<regex, single-line> X<regexp, single-line>
X<regular expression, single-line>

=begin original

Treat string as single line.  That is, change "." to match any character
whatsoever, even a newline, which normally it would not match.

=end original

文字列を 1 行として扱います。
つまり、"." は任意の 1 文字、通常はマッチングしない改行でさえも
マッチングするように変更されます。

=begin original

Used together, as C</ms>, they let the "." match any character whatsoever,
while still allowing "^" and "$" to match, respectively, just after
and just before newlines within the string.

=end original

C</ms> として共に使うと、"^" 及び "$" はそれぞれ
文字列中の改行の直前及び直後のマッチングでありつつ、"." は任意の文字に
マッチングするようになります。

=item i
X</i> X<regex, case-insensitive> X<regexp, case-insensitive>
X<regular expression, case-insensitive>

=begin original

Do case-insensitive pattern matching.

=end original

大文字小文字を区別しないパターンマッチングを行います。

=begin original

If locale matching rules are in effect, the case map is taken from the
current
locale for code points less than 255, and from Unicode rules for larger
code points.  However, matches that would cross the Unicode
rules/non-Unicode rules boundary (ords 255/256) will not succeed.  See
L<perllocale>.

=end original

ロケールマッチングルールが有効になっている場合、符号位置 255 以下の場合は
現在のロケールから取られ、より大きい符号位置では Unicode ルールから
取られます。
しかし、Unicode ルールと非 Unicode ルールの境界(番号255/256) を
またぐマッチングは成功しません。
L<perllocale> を参照してください。

=begin original

There are a number of Unicode characters that match multiple characters
under C</i>.  For example, C<LATIN SMALL LIGATURE FI>
should match the sequence C<fi>.  Perl is not
currently able to do this when the multiple characters are in the pattern and
are split between groupings, or when one or more are quantified.  Thus

=end original

C</i> の基で複数の文字にマッチングする Unicode 文字はたくさんあります。
例えば、C<LATIN SMALL LIGATURE FI> は並び C<fi> にマッチングするべきです。
複数の文字がパターン中にあってグループ化で分割されている場合、または
どれかの文字に量指定子が付いている場合、Perl は今のところこれを行えません。
従って

=begin original

 "\N{LATIN SMALL LIGATURE FI}" =~ /fi/i;          # Matches
 "\N{LATIN SMALL LIGATURE FI}" =~ /[fi][fi]/i;    # Doesn't match!
 "\N{LATIN SMALL LIGATURE FI}" =~ /fi*/i;         # Doesn't match!

=end original

 "\N{LATIN SMALL LIGATURE FI}" =~ /fi/i;          # マッチング
 "\N{LATIN SMALL LIGATURE FI}" =~ /[fi][fi]/i;    # マッチングしない!
 "\N{LATIN SMALL LIGATURE FI}" =~ /fi*/i;         # マッチングしない!

=begin original

 # The below doesn't match, and it isn't clear what $1 and $2 would
 # be even if it did!!
 "\N{LATIN SMALL LIGATURE FI}" =~ /(f)(i)/i;      # Doesn't match!

=end original

 # 次のものはマッチングしないし、もししたとしても $1 と $2 が何になるか
 # はっきりしない!!
 "\N{LATIN SMALL LIGATURE FI}" =~ /(f)(i)/i;      # マッチングしない!

=begin original

Perl doesn't match multiple characters in an inverted bracketed
character class, which otherwise could be highly confusing.  See
L<perlrecharclass/Negation>.

=end original

Perl は、否定大かっこ文字クラスの複数の文字にはマッチングしません;
さもなければとても混乱することがあるからです。
L<perlrecharclass/Negation> を参照して下さい。

=begin original

Also, Perl matching doesn't fully conform to the current Unicode C</i>
recommendations, which ask that the matching be made upon the NFD
(Normalization Form Decomposed) of the text.  However, Unicode is
in the process of reconsidering and revising their recommendations.

=end original

また、Perl のマッチングは現在の Unicode の C</i> 勧告に完全には
準拠していません; テキストの NFD (Normalization Form Decomposed) に対しての
マッチングに関する部分です。
しかし、Unicode は勧告の再検討と改訂の作業中です。

=item x
X</x>

=begin original

Extend your pattern's legibility by permitting whitespace and comments.
Details in L</"/x">

=end original

空白やコメントを許可してパターンを読みやすくするように拡張します。
詳細は L</"/x"> にあります。

=item p
X</p> X<regex, preserve> X<regexp, preserve>

=begin original

Preserve the string matched such that ${^PREMATCH}, ${^MATCH}, and
${^POSTMATCH} are available for use after matching.

=end original

${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} といったマッチングされた文字列を
マッチングの後も使えるように維持します。

=item g and c
X</g> X</c>

(g と c)

=begin original

Global matching, and keep the Current position after failed matching.
Unlike i, m, s and x, these two flags affect the way the regex is used
rather than the regex itself. See
L<perlretut/"Using regular expressions in Perl"> for further explanation
of the g and c modifiers.

=end original

グローバル(Global)なマッチング、及びマッチング失敗後の現在位置の保持。
i, m, s, x とは違い、この二つのフラグは
正規表現そのものではなく正規表現の使われ方に作用します。
g 及び c 修飾子の詳細な説明は
L<perlretut/"Using regular expressions in Perl"> を参照してください。

=item a, d, l and u
X</a> X</d> X</l> X</u>

(a, d, l, u)

=begin original

These modifiers, new in 5.14, affect which character-set semantics
(Unicode, ASCII, etc.) are used, as described below in
L</Character set modifiers>.

=end original

5.14 から導入されたこれらの新しい修飾子は、どの文字集合意味論 (Unicode,
ASCII など) が使われるかに影響を与えます; L</Character set modifiers> で
後述します。

=back

=begin original

These are usually written as "the C</x> modifier", even though the delimiter
in question might not really be a slash.  The modifiers C</imsxadlup>
may also be embedded within the regular expression itself using
the C<(?...)> construct, see L</Extended Patterns> below.

=end original

これらは通常「C</x> 修飾子」のように記述され、これは区切りが実際には
スラッシュでなくてもそう記述されます。
また、C</imsxadlup> 修飾子は C<(?...)> 構築子を使って正規表現内に
埋め込まれることもあります; 後述する L</Extended Patterns> を
参照してください。

=begin original

The C</x>, C</l>, C</u>, C</a> and C</d> modifiers need a little more
explanation.

=end original

C</x>, C</l>, C</u>, C</a>, C</d> 修飾子はもう少し説明が必要です。

=head3 /x

=begin original

C</x> tells
the regular expression parser to ignore most whitespace that is neither
backslashed nor within a character class.  You can use this to break up
your regular expression into (slightly) more readable parts.  The C<#>
character is also treated as a metacharacter introducing a comment,
just as in ordinary Perl code.  This also means that if you want real
whitespace or C<#> characters in the pattern (outside a character
class, where they are unaffected by C</x>), then you'll either have to
escape them (using backslashes or C<\Q...\E>) or encode them using octal,
hex, or C<\N{}> escapes.  Taken together, these features go a long way towards
making Perl's regular expressions more readable.  Note that you have to
be careful not to include the pattern delimiter in the comment--perl has
no way of knowing you did not intend to close the pattern early.  See
the C-comment deletion code in L<perlop>.  Also note that anything inside
a C<\Q...\E> stays unaffected by C</x>.  And note that C</x> doesn't affect
space interpretation within a single multi-character construct.  For
example in C<\x{...}>, regardless of the C</x> modifier, there can be no
spaces.  Same for a L<quantifier|/Quantifiers> such as C<{3}> or
C<{5,}>.  Similarly, C<(?:...)> can't have a space between the C<?> and C<:>,
but can between the C<(> and C<?>.  Within any delimiters for such a
construct, allowed spaces are not affected by C</x>, and depend on the
construct.  For example, C<\x{...}> can't have spaces because hexadecimal
numbers don't have spaces in them.  But, Unicode properties can have spaces, so
in C<\p{...}> there can be spaces that follow the Unicode rules, for which see
L<perluniprops/Properties accessible through \p{} and \P{}>.
X</x>

=end original

C</x> は、バックスラッシュでエスケープされたり文字クラスの中だったりしない
ほとんどの空白を無視するように正規表現パーサに伝えます。
これは正規表現を(少し)読みやすく部分に分割するために使えます。
また、C<#> は通常の Perl コードと同様コメントを開始するメタ文字として
扱われます。
これはまた、(C</x> の影響を受けない文字クラス内以外で)パターン中に本当の空白や
C<#> 文字を使いたい場合は、(逆スラッシュや C<\Q...\E> を使って)
エスケープするか、8 進数、16 進数、C<\N{}> エスケープのいずれかで
エンコードする必要があると言うことです。
まとめると、これらの機能は Perl の正規表現をより読みやすくするために
大きく役立ちます。
コメントにパターン区切りを含まないように注意する必要があります--perl は
早くパターンを終了したいわけではないと言うことを知る手段がありません。
L<perlop> の C 型式のコメントを削除するコードを参照してください。
また、C<\Q...\E> の内側のものは C</x> の影響を受けないことにも
注意してください。
例えば、C<\x{...}> の内部では、C</x> 修飾子に関わらず、スペースを
含むことはできません。
C<{3}> や C<{5,}> のような L<量指定子|/Quantifiers> も同様です。
また、C<(?:...)> も C<?> と C<:> の間にスペースを含むことはできませんが、
C<(> と C<?> の間には含むことができます。
このような構文の区切り文字の中では、スペースが許されるかどうかは
C</x> に影響されず、構文自身に影響されます。
例えば、16 進数はスペースを含むことができないので C<\x{...}> はスペースを
含むことができません。
しかし、Unicode 特性はスペースを含むことができるので、
C<\p{...}> は Unicode の規則に従ってスペースを含むことができます;
L<perluniprops/Properties accessible through \p{} and \P{}> を
参照してください。
X</x>

=head3 Character set modifiers

(文字集合修飾子)

=begin original

C</d>, C</u>, C</a>, and C</l>, available starting in 5.14, are called
the character set modifiers; they affect the character set semantics
used for the regular expression.

=end original

5.14 から利用可能な C</d>, C</u>, C</a>, C</l> は文字集合修飾子と呼ばれます;
これらは正規表現で使われる文字集合の意味論に影響を与えます。

=begin original

At any given time, exactly one of these modifiers is in effect.  Once
compiled, the behavior doesn't change regardless of what rules are in
effect when the regular expression is executed.  And if a regular
expression is interpolated into a larger one, the original's rules
continue to apply to it, and only it.

=end original

任意のある瞬間において、これらの修飾子の内正確に一つだけが有効になります。
一旦コンパイルされると、正規表現が実行されるときにどの規則が有効化に関わらず、
振る舞いは変更されません。
そして正規表現がより大きな正規表現に展開された場合、元の規則だけが
適用され続けます。

=begin original

Note that the modifiers affect only pattern matching, and do not extend
to any replacement done.  For example,

=end original

修飾子はパターンマッチングに対してのみ影響を与え、置換には拡張されないことに
注意してください。
例えば:

 s/foo/\Ubar/l

=begin original

will uppercase "bar", but the C</l> does not affect how the C<\U>
operates.  If C<use locale> is in effect, the C<\U> will use locale
rules; if C<use feature 'unicode_strings'> is in effect, it will
use Unicode rules, etc.

=end original

これは大文字の "bar" にしますが、C</l> は C<\U> がどう処理を行うかに
影響を与えません。
C<use locale> が有効の場合は C<\U> はロケールの規則を使い、
C<use feature 'unicode_strings'> が有効の場合は Unicode の規則を使い、
以下同様です。

=head4 /l

=begin original

means to use the current locale's rules (see L<perllocale>) when pattern
matching.  For example, C<\w> will match the "word" characters of that
locale, and C<"/i"> case-insensitive matching will match according to
the locale's case folding rules.  The locale used will be the one in
effect at the time of execution of the pattern match.  This may not be
the same as the compilation-time locale, and can differ from one match
to another if there is an intervening call of the
L<setlocale() function|perllocale/The setlocale function>.

=end original

これはパターンマッチングのときに現在のロケールの規則 (L<perllocale> 参照) を
使うことを意味します。
例えば、C<\w> はこのロケールの「単語」文字にマッチングし、
C<"/i"> の大文字小文字マッチングは、現在のロケールの大文字小文字畳み込み規則に
従ってマッチングします。
使われるロケールはパターンマッチングが実行される時点で有効なものです。
これはコンパイル時のロケールと同じではないかもしれませんし、
L<setlocale() 関数|perllocale/The setlocale function>
の呼び出しが間に入ると、呼び出し毎に異なることもあります。

=begin original

Perl only supports single-byte locales.  This means that code points
above 255 are treated as Unicode no matter what locale is in effect.
Under Unicode rules, there are a few case-insensitive matches that cross
the 255/256 boundary.  These are disallowed under C</l>.  For example,
0xFF does not caselessly match the character at 0x178, C<LATIN CAPITAL
LETTER Y WITH DIAERESIS>, because 0xFF may not be C<LATIN SMALL LETTER Y
WITH DIAERESIS> in the current locale, and Perl has no way of knowing if
that character even exists in the locale, much less what code point it
is.

=end original

Perl は単一バイトロケールのみに対応します。
つまり、255 を越える符号位置は、どのロケールが有効であるかに関わらず
Unicode として扱われるということです。
Unicode の規則の基では、255/256 の境界をまたぐ大文字小文字を無視した
マッチングがいくつかあります。
これらは C</l> の基では認められません。
例えば、0xFF は 0x178,
C<LATIN CAPITAL LETTER Y WITH DIAERESIS> と大文字小文字を無視した
マッチングをしません; なぜなら 0xFF は現在のロケールでは
C<LATIN SMALL LETTER Y WITH DIAERESIS> ではないかもしれず、Perl は
このロケールでこの文字があるかどうかすら知る方法がなく、ましてや
これがどの符号位置かを知る方法もないからです。

=begin original

This modifier may be specified to be the default by C<use locale>, but
see L</Which character set modifier is in effect?>.
X</l>

=end original

この修飾子は C<use locale> によってデフォルトで設定されますが、
L</Which character set modifier is in effect?> を参照してください。
X</l>

=head4 /u

=begin original

means to use Unicode rules when pattern matching.  On ASCII platforms,
this means that the code points between 128 and 255 take on their
Latin-1 (ISO-8859-1) meanings (which are the same as Unicode's), whereas
in strict ASCII their meanings are undefined.  Thus the platform
effectively becomes a Unicode platform, hence, for example, C<\w> will
match any of the more than 100_000 word characters in Unicode.

=end original

これはパターンマッチングのときに Unicode の規則を使うことを意味します。
ASCII プラットフォームでは、これは符号位置 128 から 255 は
Latin-1 (ISO-8859-1) という意味になり (これは Unicode と同じです)、
一方厳密な ASCII ではこれらの意味は未定義です。
従って、事実上 Unicode プラットフォームになるプラットフォームでは、
例えば、C<\w> は Unicode の 100,000 以上の単語文字のどれにも
マッチングします。

=begin original

Unlike most locales, which are specific to a language and country pair,
Unicode classifies all the characters that are letters I<somewhere> as
C<\w>.  For example, your locale might not think that C<LATIN SMALL
LETTER ETH> is a letter (unless you happen to speak Icelandic), but
Unicode does.  Similarly, all the characters that are decimal digits
somewhere in the world will match C<\d>; this is hundreds, not 10,
possible matches.  And some of those digits look like some of the 10
ASCII digits, but mean a different number, so a human could easily think
a number is a different quantity than it really is.  For example,
C<BENGALI DIGIT FOUR> (U+09EA) looks very much like an
C<ASCII DIGIT EIGHT> (U+0038).  And, C<\d+>, may match strings of digits
that are a mixture from different writing systems, creating a security
issue.  L<Unicode::UCD/num()> can be used to sort this out.

=end original

特定の言語と国に固有であるほとんどのロケールと異なり、
Unicode は I<どこか> で字(letter)として扱われている全ての文字(character)を
C<\w> に分類します。
例えば、あなたのロケールは (あなたがたまたまアイスランド語を話さない限り)
C<LATIN SMALL LETTER ETH> を字として考えないかもしれません。
同様に、世界のどこかで数字である全ての文字は C<\d> にマッチングします;
これは 10 ではなく 100 のマッチングの可能性があります。
さらにこれらの数字の一部は 10 の ASCII 数字と似ていますが、
異なる数字を意味するため、人間はその数字が実際と異なる量であると
簡単に考えてしまいます。
例えば、 C<BENGALI DIGIT FOUR> (U+09EA) は C<ASCII DIGIT EIGHT> (U+0038) に
とてもよく似ています。
C<\d+> は、異なる記法から混ぜた数字の文字列にマッチングするので、
セキュリティ上の問題を作ります。
これを整理するために L<Unicode::UCD/num()> が使われます。

=begin original

Also, case-insensitive matching works on the full set of Unicode
characters.  The C<KELVIN SIGN>, for example matches the letters "k" and
"K"; and C<LATIN SMALL LIGATURE FF> matches the sequence "ff", which,
if you're not prepared, might make it look like a hexadecimal constant,
presenting another potential security issue.  See
L<http://unicode.org/reports/tr36> for a detailed discussion of Unicode
security issues.

=end original

また、大文字小文字を無視したマッチングは Unicode の完全な集合で動作します。
例えば C<KELVIN SIGN> は "k" と "K" にマッチングします;
C<LATIN SMALL LIGATURE FF> は、準備していなければ 16 進数定数のように
見えるかもしれない並び "ff" にマッチングし、もう一つの潜在的な
セキュリティ問題になります。
Unicode のセキュリティ問題に関する詳細な議論については
L<http://unicode.org/reports/tr36> を参照してください。

=begin original

On the EBCDIC platforms that Perl handles, the native character set is
equivalent to Latin-1.  Thus this modifier changes behavior only when
the C<"/i"> modifier is also specified, and it turns out it affects only
two characters, giving them full Unicode semantics: the C<MICRO SIGN>
will match the Greek capital and small letters C<MU>, otherwise not; and
the C<LATIN CAPITAL LETTER SHARP S> will match any of C<SS>, C<Ss>,
C<sS>, and C<ss>, otherwise not.

=end original

Perl が扱える EBCDIC プラットフォームでは、ネイティブな文字集合は
Latin-1 と等価です。
従ってこの修飾子は、C<"/i"> 修飾子も指定されたときにのみ
振る舞いを変え、結果として二つの文字にだけ影響を与え、
完全な Unicode の意味論を与えます:
C<MICRO SIGN> はギリシャ語の大文字と小文字の C<MU> にマッチングし、
それ以外はマッチングしません;
また C<LATIN CAPITAL LETTER SHARP S> は C<SS>, C<Ss>,
C<sS>, C<ss> のいずれかにはマッチングし、それ以外にはマッチングしません。

=begin original

This modifier may be specified to be the default by C<use feature
'unicode_strings>, but see
L</Which character set modifier is in effect?>.
X</u>

=end original

この修飾子は C<use feature 'unicode_strings> によってデフォルトに
設定されますが、L</Which character set modifier is in effect?> を
参照してください。
X</u>

=head4 /a

=begin original

is the same as C</u>, except that C<\d>, C<\s>, C<\w>, and the
Posix character classes are restricted to matching in the ASCII range
only.  That is, with this modifier, C<\d> always means precisely the
digits C<"0"> to C<"9">; C<\s> means the five characters C<[ \f\n\r\t]>;
C<\w> means the 63 characters C<[A-Za-z0-9_]>; and likewise, all the
Posix classes such as C<[[:print:]]> match only the appropriate
ASCII-range characters.

=end original

これは C</u> と同様ですが、C<\d>, C<\s>, C<\w>, Posix 文字クラスは
ASCII の範囲のみにマッチングするように制限されます。
つまり、この修飾子を使うと、C<\d> は常に正確に数字 C<"0"> から C<"9"> を
意味します;
C<\s> は C<[ \f\n\r\t]> の 5 文字を意味します;
C<\w> は C<[A-Za-z0-9_]> の 63 文字を意味します;
同様に、C<[[:print:]]> のような全ての Posix クラスは
適切な ASCII の範囲の文字にのみマッチングします。

=begin original

This modifier is useful for people who only incidentally use Unicode.
With it, one can write C<\d> with confidence that it will only match
ASCII characters, and should the need arise to match beyond ASCII, you
can use C<\p{Digit}>, or C<\p{Word}> for C<\w>.  There are similar
C<\p{...}> constructs that can match white space and Posix classes
beyond ASCII.  See L<perlrecharclass/POSIX Character Classes>.

=end original

この修飾子は、偶然 Unicode を使っている人々にとっては有用です。
これを使うと、ASCII 文字だけにマッチングすることに自信を持って
書くことができ、ASCII を超えてマッチングする必要が発生したときには、
C<\w> として C<\p{Digit}> や C<\p{Word}> が使えます。
ASCII を超えたスペースと Posix クラスにマッチングする
似たような C<\p{...}> 構文があります。
L<perlrecharclass/POSIX Character Classes> を参照してください。

=begin original

As you would expect, this modifier causes, for example, C<\D> to mean
the same thing as C<[^0-9]>; in fact, all non-ASCII characters match
C<\D>, C<\S>, and C<\W>.  C<\b> still means to match at the boundary
between C<\w> and C<\W>, using the C</a> definitions of them (similarly
for C<\B>).

=end original

予想できるとおり、 この修飾子は、例えば、C<\D> を C<[^0-9]> と
同じことにします;
実際、全ての非 ASCII 文字は C<\D>, C<\S>, C<\W> にマッチングします。
C<\b> はまだ C<\w> と C<\W> の境界にマッチングします;
これらのために (C<\B> と同様) C</a> の定義を使います。

=begin original

Otherwise, C</a> behaves like the C</u> modifier, in that
case-insensitive matching uses Unicode semantics; for example, "k" will
match the Unicode C<\N{KELVIN SIGN}> under C</i> matching, and code
points in the Latin1 range, above ASCII will have Unicode rules when it
comes to case-insensitive matching.

=end original

さもなければ、C</a> は C</u> 修飾子のように振る舞います;
大文字小文字を無視したマッチングには Unicode の意味論を使います;
例えば、"k" は C</i> の基では C<\N{KELVIN SIGN}> にマッチングし、
ASCII の範囲を超える Latin1 の範囲の符号位置は、大文字小文字を無視した
マッチングで使われる場合は Unicode の規則を使います。

=begin original

To forbid ASCII/non-ASCII matches (like "k" with C<\N{KELVIN SIGN}>),
specify the "a" twice, for example C</aai> or C</aia>

=end original

("k" と C<\N{KELVIN SIGN}> のような) ASCII/非-ASCII マッチングを禁止するには、
C</aai> や C</aia> のように "a" を 2 回指定します。

=begin original

To reiterate, this modifier provides protection for applications that
don't wish to be exposed to all of Unicode.  Specifying it twice
gives added protection.

=end original

繰り返すと、この修飾子は全ての Unicode に対して曝されることを望んでいない
アプリケーションに対する保護を提供します。
2 回指定することで追加の保護を提供します。

=begin original

This modifier may be specified to be the default by C<use re '/a'>
or C<use re '/aa'>, but see
L</Which character set modifier is in effect?>.
X</a>
X</aa>

=end original

この修飾子は C<use re '/a'> または C<use re '/aa'> でデフォルトに
設定されますが、L</Which character set modifier is in effect?> を
参照してください。
X</a>
X</aa>

=head4 /d

=begin original

This modifier means to use the "Default" native rules of the platform
except when there is cause to use Unicode rules instead, as follows:

=end original

この修飾子は、以下のように Unicode の規則が使われる場合を除いて、
プラットフォームの「デフォルトの」(Default) ネイティブな規則を使うことを
意味します:

=over 4

=item 1

=begin original

the target string is encoded in UTF-8; or

=end original

ターゲット文字列が UTF-8 でエンコードされている; または

=item 2

=begin original

the pattern is encoded in UTF-8; or

=end original

パターンが UTF-8 でエンコードされている; または

=item 3

=begin original

the pattern explicitly mentions a code point that is above 255 (say by
C<\x{100}>); or

=end original

パターンが、(C<\x{100}> のような形で)255 を超える符号位置に明示的に
言及している; または

=item 4

=begin original

the pattern uses a Unicode name (C<\N{...}>);  or

=end original

パターンが Unicode 名 (C<\N{...}>) を使っている; または

=item 5

=begin original

the pattern uses a Unicode property (C<\p{...}>)

=end original

パターンが Unicode 特性 (C<\p{...}>) を使っている

=back

=begin original

Another mnemonic for this modifier is "Depends", as the rules actually
used depend on various things, and as a result you can get unexpected
results.  See L<perlunicode/The "Unicode Bug">.

=end original

この修飾子のもう一つの記憶法は「依存」(Depends)です; 規則は実際には
様々なことに依存していること、また結果として予想外の
結果になるかもしれないからです。
L<perlunicode/The "Unicode Bug"> を参照してください。

=begin original

On ASCII platforms, the native rules are ASCII, and on EBCDIC platforms
(at least the ones that Perl handles), they are Latin-1.

=end original

ASCII プラットフォームでは、ネイティブな規則は ASCII で、(少なくとも
Perl が扱う) EBCDIC プラットフォームでは、これは Latin-1 です。

=begin original

Here are some examples of how that works on an ASCII platform:

=end original

以下は ASCII プラットフォームでどのように動作するかの例です:

 $str =  "\xDF";      # $str is not in UTF-8 format.
 $str =~ /^\w/;       # No match, as $str isn't in UTF-8 format.
 $str .= "\x{0e0b}";  # Now $str is in UTF-8 format.
 $str =~ /^\w/;       # Match! $str is now in UTF-8 format.
 chop $str;
 $str =~ /^\w/;       # Still a match! $str remains in UTF-8 format.

=head4 Which character set modifier is in effect?

(どの文字集合修飾子が有効?)

=begin original

Which of these modifiers is in effect at any given point in a regular
expression depends on a fairly complex set of interactions.  As
explained below in L</Extended Patterns> it is possible to explicitly
specify modifiers that apply only to portions of a regular expression.
The innermost always has priority over any outer ones, and one applying
to the whole expression has priority over any of the default settings that are
described in the remainder of this section.

=end original

ある正規表現のあるポイントでどの修飾子が有効かは、かなり複雑な相互作用に
依存します。
L</Extended Patterns> で後述するとおり、正規表現の一部にだけ
適用する修飾子を明示的に指定することが可能です。
一番内側のものは常により外側のものより優先され、式全体に適用されるものは
この節の残りで記述されるデフォルト設定より優先されます。

=begin original

The C<L<use re 'E<sol>foo'|re/'E<sol>flags' mode">> pragma can be used to set
default modifiers (including these) for regular expressions compiled
within its scope.  This pragma has precedence over the other pragmas
listed below that change the defaults.

=end original

C<L<use re 'E<sol>foo'|re/'E<sol>flags' mode">> プラグマは、
このスコープ内でコンパイルされる正規表現に対して(これらを含む)
デフォルトの修飾子を設定するのに使えます。
このプラグマは、デフォルトを変更する後述するその他のプラグマに優先します。

=begin original

Otherwise, C<L<use locale|perllocale>> sets the default modifier to C</l>;
and C<L<use feature 'unicode_strings|feature>> or
C<L<use 5.012|perlfunc/use VERSION>> (or higher) set the default to
C</u> when not in the same scope as either C<L<use locale|perllocale>>
or C<L<use bytes|bytes>>.  Unlike the mechanisms mentioned above, these
affect operations besides regular expressions pattern matching, and so
give more consistent results with other operators, including using
C<\U>, C<\l>, etc. in substitution replacements.

=end original

さもなければ、C<L<use locale|perllocale>> はデフォルト修飾子を C</l> に
設定します; そして、C<L<use feature 'unicode_strings|feature>> か
C<L<use 5.012|perlfunc/use VERSION>> (またはそれ以上) は、
同じスコープに C<L<use locale|perllocale>> や C<L<use bytes|bytes>> が
なければ、デフォルトを C</u> に設定します。
前述した機構と異なり、これらは正規表現パターンマッチング以外の操作に
影響するので、置換での C<\U>, C<\l> を使うことを含むその他の操作と
より一貫性のある結果になります。

=begin original

If none of the above apply, for backwards compatibility reasons, the
C</d> modifier is the one in effect by default.  As this can lead to
unexpected results, it is best to specify which other rule set should be
used.

=end original

前述のどれも適用されない場合、後方互換性のために、
C</d> 修飾子がデフォルトで有効になります。
これは想定外の結果になることがあるので、
その他の規則集合が使われるように指定するのが最良です。

=head4 Character set modifier behavior prior to Perl 5.14

(Perl 5.14 より前の文字集合修飾子の振る舞い)

=begin original

Prior to 5.14, there were no explicit modifiers, but C</l> was implied
for regexes compiled within the scope of C<use locale>, and C</d> was
implied otherwise.  However, interpolating a regex into a larger regex
would ignore the original compilation in favor of whatever was in effect
at the time of the second compilation.  There were a number of
inconsistencies (bugs) with the C</d> modifier, where Unicode rules
would be used when inappropriate, and vice versa.  C<\p{}> did not imply
Unicode rules, and neither did all occurrences of C<\N{}>, until 5.12.

=end original

5.14 より前では、明示的な修飾子はありませんが、
C<use locale> のスコープ内でコンパイルされた正規表現に関しては
C</l> が仮定され、さもなければ C</d> が仮定されます。
しかし、ある正規表現をより大きな正規表現に展開した場合、元のコンパイル時の
状況は、2 回目のコンパイル時点で有効なもので上書きされます。
C</d> 演算子には、不適切なときに Unicode 規則が使われる、あるいはその逆の
多くの非一貫性(バグ)があります。
C<\p{}> および C<\N{}> は 5.12 まで Unicode 規則を仮定していません。

=head2 Regular Expressions

(正規表現)

=head3 Metacharacters

(メタ文字)

=begin original

The patterns used in Perl pattern matching evolved from those supplied in
the Version 8 regex routines.  (The routines are derived
(distantly) from Henry Spencer's freely redistributable reimplementation
of the V8 routines.)  See L<Version 8 Regular Expressions> for
details.

=end original

Perl のパターンマッチングで使われるパターンは Version 8 正規表現ルーチンで
提供されているものからの派生です。
(このルーチンは Henry Spencer の自由に再配布可能な V8 ルーチンの再実装から
(遠く)派生しています)。
詳細は L<Version 8 Regular Expressions> を参照してください。

=begin original

In particular the following metacharacters have their standard I<egrep>-ish
meanings:
X<metacharacter>
X<\> X<^> X<.> X<$> X<|> X<(> X<()> X<[> X<[]>

=end original

特に以下のメタ文字は標準の I<egrep> 風の意味を持っています:
X<metacharacter>
X<\> X<^> X<.> X<$> X<|> X<(> X<()> X<[> X<[]>

=begin original

    \        Quote the next metacharacter
    ^        Match the beginning of the line
    .        Match any character (except newline)
    $        Match the end of the line (or before newline at the end)
    |        Alternation
    ()       Grouping
    []       Bracketed Character class

=end original

    \        次のメタ文字をエスケープ
    ^        行の先頭にマッチング
    .        任意の文字にマッチング(但し改行は除く)
    $        行の終端にマッチング(または終端の改行の前)
    |        代替
    ()       グループ化
    []       文字クラス

=begin original

By default, the "^" character is guaranteed to match only the
beginning of the string, the "$" character only the end (or before the
newline at the end), and Perl does certain optimizations with the
assumption that the string contains only one line.  Embedded newlines
will not be matched by "^" or "$".  You may, however, wish to treat a
string as a multi-line buffer, such that the "^" will match after any
newline within the string (except if the newline is the last character in
the string), and "$" will match before any newline.  At the
cost of a little more overhead, you can do this by using the /m modifier
on the pattern match operator.  (Older programs did this by setting C<$*>,
but this option was removed in perl 5.9.)
X<^> X<$> X</m>

=end original

デフォルトでは、文字 "^" は文字列の先頭にのみ、そして文字 "$" は
末尾(または末尾の改行の前)にのみマッチングすることを保証し、そして Perl は
文字列が 1 行のみを含んでいるという仮定でいくつかの最適化を行います。
埋め込まれている改行文字は "^" や "$" とはマッチングしません。
しかし文字列には複数行が格納されていて、"^" は任意の改行の後(但し
改行文字が文字列の最後の文字だった場合は除く)、そして "$" は任意の改行の前で
マッチングさせたいこともあるでしょう。
小さなオーバーヘッドはありますが、これはパターンマッチングで /m 修飾子を
使うことで行うことができます。
(古いプログラムでは C<$*> を設定することでこれを行っていましたが
これは perl 5.9 では削除されています。)
X<^> X<$> X</m>

=begin original

To simplify multi-line substitutions, the "." character never matches a
newline unless you use the C</s> modifier, which in effect tells Perl to pretend
the string is a single line--even if it isn't.
X<.> X</s>

=end original

複数行での利用を簡単にするために、文字 "." は C</s> 修飾子を
使って Perl に文字列を1行として処理すると伝えない限り
改行にはマッチングしません。
X<.> X</s>

=head3 Quantifiers

(量指定子)

=begin original

The following standard quantifiers are recognized:
X<metacharacter> X<quantifier> X<*> X<+> X<?> X<{n}> X<{n,}> X<{n,m}>

=end original

以下の標準的な量指定子を使えます:
X<metacharacter> X<quantifier> X<*> X<+> X<?> X<{n}> X<{n,}> X<{n,m}>

    *           Match 0 or more times
    +           Match 1 or more times
    ?           Match 1 or 0 times
    {n}         Match exactly n times
    {n,}        Match at least n times
    {n,m}       Match at least n but not more than m times

=begin original

(If a curly bracket occurs in any other context and does not form part of
a backslashed sequence like C<\x{...}>, it is treated
as a regular character.  In particular, the lower bound
is not optional.)  The "*" quantifier is equivalent to C<{0,}>, the "+"
quantifier to C<{1,}>, and the "?" quantifier to C<{0,1}>.  n and m are limited
to non-negative integral values less than a preset limit defined when perl is built.
This is usually 32766 on the most common platforms.  The actual limit can
be seen in the error message generated by code such as this:

=end original

(これ以外のコンテキストで波かっこが使われて、C<\x{...}> のような
バックスラッシュ付き並びの一部ではないときには普通の文字として
使われます。
また、下限は省略可能ではありません。)
"*" 量指定子は C<{0,}> と、"+" 量指定子は C<{1,}> と、
"?" 量指定子は C<{0,1}> と等価です。
n 及び m は perl をビルドしたときに定義した既定の制限より小さな非負整数回に
制限されます。
これは大抵のプラットフォームでは 32766 回になっています。
実際の制限は次のようなコードを実行すると生成されるエラーメッセージで
見ることができます:

    $_ **= $_ , / {$_} / for 2 .. 42;

=begin original

By default, a quantified subpattern is "greedy", that is, it will match as
many times as possible (given a particular starting location) while still
allowing the rest of the pattern to match.  If you want it to match the
minimum number of times possible, follow the quantifier with a "?".  Note
that the meanings don't change, just the "greediness":
X<metacharacter> X<greedy> X<greediness>
X<?> X<*?> X<+?> X<??> X<{n}?> X<{n,}?> X<{n,m}?>

=end original

デフォルトでは、パターンで行われる量指定は"貪欲"です;
つまりそれはパターンの残りの部分が可能な範囲で、
(始めた地点から)可能な限り多くを先にあるパターンでマッチングさせます。
もし最小回数でのマッチングを行いたいのであれば、量指定子の後ろに
"?" を続けます。
意味は変更されずに「貪欲さ」だけを変更できます:
X<metacharacter> X<greedy> X<greediness>
X<?> X<*?> X<+?> X<??> X<{n}?> X<{n,}?> X<{n,m}?>

=begin original

    *?        Match 0 or more times, not greedily
    +?        Match 1 or more times, not greedily
    ??        Match 0 or 1 time, not greedily
    {n}?      Match exactly n times, not greedily (redundant)
    {n,}?     Match at least n times, not greedily
    {n,m}?    Match at least n but not more than m times, not greedily

=end original

    *?        0 回以上の貪欲でないマッチング
    +?        1 回以上の貪欲でないマッチング
    ??        0 回または 1 回の貪欲でないマッチング
    {n}?      ちょうど n 回の貪欲でないマッチング (冗長)
    {n,}?     n 回以上の貪欲でないマッチング
    {n,m}?    n 回以上 m 回以下の貪欲でないマッチング

=begin original

By default, when a quantified subpattern does not allow the rest of the
overall pattern to match, Perl will backtrack. However, this behaviour is
sometimes undesirable. Thus Perl provides the "possessive" quantifier form
as well.

=end original

デフォルトでは、パターンのうちの量指定された一部によってパターン全体が
マッチングに失敗したとき、Perl はバックトラックを行います。
しかしこの振る舞いは望まれないこともあります。
そのため、Perl は「絶対最大量(possessive)」量指定形式も提供しています。

 *+     Match 0 or more times and give nothing back
 ++     Match 1 or more times and give nothing back
 ?+     Match 0 or 1 time and give nothing back
 {n}+   Match exactly n times and give nothing back (redundant)
 {n,}+  Match at least n times and give nothing back
 {n,m}+ Match at least n but not more than m times and give nothing back

=begin original

For instance,

=end original

例えば,

   'aaaa' =~ /a++a/

=begin original

will never match, as the C<a++> will gobble up all the C<a>'s in the
string and won't leave any for the remaining part of the pattern. This
feature can be extremely useful to give perl hints about where it
shouldn't backtrack. For instance, the typical "match a double-quoted
string" problem can be most efficiently performed when written as:

=end original

は、C<a++> が文字列中の全ての C<a> を飲み込んで
しまい後に何も残さないためマッチングしません。
この機能はバックトラックするべきでない場所のヒントを perl に
与えるのに非常に便利です。
例えば、典型的な「ダブルクォート文字列のマッチング」問題で次のように
書くととても効率的になります:

   /"(?:[^"\\]++|\\.)*+"/

=begin original

as we know that if the final quote does not match, backtracking will not
help. See the independent subexpression
L</C<< (?>pattern) >>> for more details;
possessive quantifiers are just syntactic sugar for that construct. For
instance the above example could also be written as follows:

=end original

見ての通り最後のクォートがマッチングしなかったとき、バックトラックは
役に立ちません。
詳細は独立したサブパターン L</C<< (?>pattern) >>> を参照してください; 
絶対最大量指定子はまさにその構文糖です。
例えばこの例は次のようにも書けます:

   /"(?>(?:(?>[^"\\]+)|\\.)*)"/

=head3 Escape sequences

(エスケープシーケンス)

=begin original

Because patterns are processed as double-quoted strings, the following
also work:

=end original

パターンはダブルクォート文字列として処理されるため、
以下のエスケープ文字も動作します:
X<\t> X<\n> X<\r> X<\f> X<\e> X<\a> X<\l> X<\u> X<\L> X<\U> X<\E> X<\Q>
X<\0> X<\c> X<\N{}> X<\x>

=begin original

 \t          tab                   (HT, TAB)
 \n          newline               (LF, NL)
 \r          return                (CR)
 \f          form feed             (FF)
 \a          alarm (bell)          (BEL)
 \e          escape (think troff)  (ESC)
 \cK         control char          (example: VT)
 \x{}, \x00  character whose ordinal is the given hexadecimal number
 \N{name}    named Unicode character or character sequence
 \N{U+263D}  Unicode character     (example: FIRST QUARTER MOON)
 \o{}, \000  character whose ordinal is the given octal number
 \l          lowercase next char (think vi)
 \u          uppercase next char (think vi)
 \L          lowercase till \E (think vi)
 \U          uppercase till \E (think vi)
 \Q          quote (disable) pattern metacharacters till \E
 \E          end either case modification or quoted section, think vi

=end original

 \t          タブ                  (水平タブ;HT、TAB)
 \n          改行                  (LF、NL)
 \r          復帰                  (CR)
 \f          フォームフィード      (FF)
 \a          アラーム (ベル)       (BEL)
 \e          エスケープ (troff 的) (ESC)
 \cK         制御文字              (例: VT)
 \x{}, \x00  16 進数で番号指定された文字
 \N{name}    名前付きユニコード文字または文字並び
 \N{U+263D}  Unicode 文字          (例: FIRST QUARTER MOON)
 \o{}, \000  8 進数で番号指定された文字
 \l          次の文字を小文字に (vi 的)
 \u          次の文字を大文字に (vi 的)
 \L          \E まで小文字に (vi 的)
 \U          \E まで大文字に (vi 的)
 \Q          \E までパターンメタ文字の無効化(Quote)
 \E          大文字小文字変更またはクォートの終端 (vi 的)

=begin original

Details are in L<perlop/Quote and Quote-like Operators>.

=end original

詳細は L<perlop/Quote and Quote-like Operators> にあります。

=head3 Character Classes and other Special Escapes

(文字クラス及び他の特殊なエスケープ)

=begin original

In addition, Perl defines the following:
X<\g> X<\k> X<\K> X<backreference>

=end original

さらに、Perl は以下のものを定義します:
X<\g> X<\k> X<\K> X<backreference>

=begin original

 Sequence   Note    Description
  [...]     [1]  Match a character according to the rules of the
                   bracketed character class defined by the "...".
                   Example: [a-z] matches "a" or "b" or "c" ... or "z"
  [[:...:]] [2]  Match a character according to the rules of the POSIX
                   character class "..." within the outer bracketed
                   character class.  Example: [[:upper:]] matches any
                   uppercase character.
  \w        [3]  Match a "word" character (alphanumeric plus "_", plus
                   other connector punctuation chars plus Unicode
                   marks)
  \W        [3]  Match a non-"word" character
  \s        [3]  Match a whitespace character
  \S        [3]  Match a non-whitespace character
  \d        [3]  Match a decimal digit character
  \D        [3]  Match a non-digit character
  \pP       [3]  Match P, named property.  Use \p{Prop} for longer names
  \PP       [3]  Match non-P
  \X        [4]  Match Unicode "eXtended grapheme cluster"
  \C             Match a single C-language char (octet) even if that is
                   part of a larger UTF-8 character.  Thus it breaks up
                   characters into their UTF-8 bytes, so you may end up
                   with malformed pieces of UTF-8.  Unsupported in
                   lookbehind.
  \1        [5]  Backreference to a specific capture group or buffer.
                   '1' may actually be any positive integer.
  \g1       [5]  Backreference to a specific or previous group,
  \g{-1}    [5]  The number may be negative indicating a relative
                   previous group and may optionally be wrapped in
                   curly brackets for safer parsing.
  \g{name}  [5]  Named backreference
  \k<name>  [5]  Named backreference
  \K        [6]  Keep the stuff left of the \K, don't include it in $&
  \N        [7]  Any character but \n (experimental).  Not affected by
                   /s modifier
  \v        [3]  Vertical whitespace
  \V        [3]  Not vertical whitespace
  \h        [3]  Horizontal whitespace
  \H        [3]  Not horizontal whitespace
  \R        [4]  Linebreak

=end original

 Sequence   Note    Description
  [...]     [1]  "..." で定義された大かっこ文字クラスのルールに従う文字に
                   マッチング。
                   例: [a-z] は "a", "b", "c", ... "z" にマッチング。
  [[:...:]] [2]  外側の大かっこ文字クラスの内側の POSIX 文字クラスに
                   従う文字にマッチング。
                   例: [[:upper:]] は任意の大文字にマッチング。
  \w        [3]  "単語" 文字にマッチング (英数字及び "_" に加えて、
                   その他の接続句読点文字と Unicode マークにマッチング)
  \W        [3]  非"単語"文字にマッチング
  \s        [3]  空白文字にマッチング
  \S        [3]  非空白文字にマッチング
  \d        [3]  10 進数字にマッチング
  \D        [3]  非数字にマッチング
  \pP       [3]  名前属性 P にマッチング. 長い名前であれば \p{Prop}
  \PP       [3]  P以外にマッチング
  \X        [4]  Unicode 拡張書記素クラスタ("eXtended grapheme cluster")にマッチング
  \C             より大きな UTF-8 文字の一部であっても、1つの C 言語の文字 (オクテット)にマッチング
                   従って文字をUTF-8バイト列へと変換するので、壊れた
                   UTF-8 片となるかもしれません; 後読みは対応していません
  \1        [5]  指定した捕捉グループやバッファへの後方参照。
                 '1' には正の整数を指定できます。
  \g1       [5]  指定したまたは前のグループへの後方参照
  \g{-1}    [5]  数値は相対的に前のグループを示す負の値にもできます、また
                 任意で安全にパースするために波かっこで括ることもできます
  \g{name}  [5]  名前指定の後方参照
  \k<name>  [5]  名前指定の後方参照
  \K        [6]  \K の左にある物を保持、$& に含めない
  \N        [7]  \n 以外の任意の文字 (実験的) /s 修飾子の影響は受けない
  \v        [3]  垂直空白
  \V        [3]  垂直空白以外
  \h        [3]  水平空白
  \H        [3]  水平空白以外
  \R        [4]  行区切り

=over 4

=item [1]

=begin original

See L<perlrecharclass/Bracketed Character Classes> for details.

=end original

詳しくは L<perlrecharclass/Bracketed Character Classes> を参照してください。

=item [2]

=begin original

See L<perlrecharclass/POSIX Character Classes> for details.

=end original

詳しくは L<perlrecharclass/POSIX Character Classes> を参照してください。

=item [3]

=begin original

See L<perlrecharclass/Backslash sequences> for details.

=end original

詳しくは L<perlrecharclass/Backslash sequences> を参照してください。

=item [4]

=begin original

See L<perlrebackslash/Misc> for details.

=end original

詳しくは L<perlrebackslash/Misc> を参照してください。

=item [5]

=begin original

See L</Capture groups> below for details.

=end original

詳しくは以下の L</Capture groups> を参照してください。

=item [6]

=begin original

See L</Extended Patterns> below for details.

=end original

詳しくは以下のSee L</Extended Patterns> を参照してください。

=item [7]

=begin original

Note that C<\N> has two meanings.  When of the form C<\N{NAME}>, it matches the
character or character sequence whose name is C<NAME>; and similarly
when of the form C<\N{U+I<hex>}>, it matches the character whose Unicode
code point is I<hex>.  Otherwise it matches any character but C<\n>.

=end original

C<\N> には二つの意味があることに注意してください。
C<\N{NAME}> の形式では、これは名前が C<NAME> の文字または文字の並びに
マッチングします;
同様に、C<\N{U+I<wide hex char>}> の形式では、Unicode 符号位置が
I<hex> の文字にマッチングします。
そうでなければ、C<\n> 以外の任意の文字にマッチングします。

=back

=head3 Assertions

(言明)

=begin original

Perl defines the following zero-width assertions:
X<zero-width assertion> X<assertion> X<regex, zero-width assertion>
X<regexp, zero-width assertion>
X<regular expression, zero-width assertion>
X<\b> X<\B> X<\A> X<\Z> X<\z> X<\G>

=end original

Perl は以下のゼロ幅のアサーションを定義しています:
X<zero-width assertion> X<assertion> X<regex, zero-width assertion>
X<regexp, zero-width assertion>
X<regular expression, zero-width assertion>
X<\b> X<\B> X<\A> X<\Z> X<\z> X<\G>

    \b  Match a word boundary
    \B  Match except at a word boundary
    \A  Match only at beginning of string
    \Z  Match only at end of string, or before newline at the end
    \z  Match only at end of string
    \G  Match only at pos() (e.g. at the end-of-match position
        of prior m//g)

=begin original

A word boundary (C<\b>) is a spot between two characters
that has a C<\w> on one side of it and a C<\W> on the other side
of it (in either order), counting the imaginary characters off the
beginning and end of the string as matching a C<\W>.  (Within
character classes C<\b> represents backspace rather than a word
boundary, just as it normally does in any double-quoted string.)
The C<\A> and C<\Z> are just like "^" and "$", except that they
won't match multiple times when the C</m> modifier is used, while
"^" and "$" will match at every internal line boundary.  To match
the actual end of the string and not ignore an optional trailing
newline, use C<\z>.
X<\b> X<\A> X<\Z> X<\z> X</m>

=end original

単語境界(C<\b>)はC<\W> にマッチングする文字列の始まりと終わりを
連想するような、片側を C<\w>、もう片側を C<\W> で挟まれている点です。
(文字クラスにおいては C<\b> は単語境界ではなくバックスペースを表します,
ちょうどダブルクォート文字列と同じように。)
C<\A> 及び C<\Z> は "^" 及び "$" と同様ですが、C</m> 修飾子が
指定されているときに "^" 及び "$" は全ての内部的な行境界に
マッチングするのに対して C<\A> 及び C<\Z> は複数回のマッチングには
なりません。
文字列の本当の末尾にマッチングさせ、省略可能である末尾の改行を
無視しないようにする C<\z> を使います。
X<\b> X<\A> X<\Z> X<\z> X</m>

=begin original

The C<\G> assertion can be used to chain global matches (using
C<m//g>), as described in L<perlop/"Regexp Quote-Like Operators">.
It is also useful when writing C<lex>-like scanners, when you have
several patterns that you want to match against consequent substrings
of your string; see the previous reference.  The actual location
where C<\G> will match can also be influenced by using C<pos()> as
an lvalue: see L<perlfunc/pos>. Note that the rule for zero-length
matches (see L</"Repeated Patterns Matching a Zero-length Substring">)
is modified somewhat, in that contents to the left of C<\G> are
not counted when determining the length of the match. Thus the following
will not match forever:
X<\G>

=end original

C<\G> アサーションはグローバルなマッチング(C<m//g>)を連結するために
使います; これは L<perlop/"Regexp Quote-Like Operators"> にも説明されています。
これは文字列に対していくつかのパターンを次々にマッチングさせたいといった、
C<lex> 風のスキャナを書きたいときにも便利です; 以前のリファレンスを
参照してください。
C<\G> が実際にマッチングできる位置は C<pos()> を左辺値として
使うことで変更できます: L<perlfunc/pos> を参照してください。
ゼロ幅マッチング
(L</"Repeated Patterns Matching a Zero-length Substring"> を参照してください)
のルールは少し変化することに注意してください、
C<\G> の左にある内容はマッチングの長さを決定するときに
数えられません。
従って次のコードは永遠にマッチングしません:
X<\G>

     my $string = 'ABC';
     pos($string) = 1;
     while ($string =~ /(.\G)/g) {
         print $1;
     }

=begin original

It will print 'A' and then terminate, as it considers the match to
be zero-width, and thus will not match at the same position twice in a
row.

=end original

これはゼロ幅へのマッチングと見なされ、'A' を出力し終了するので、
行の中で同じ場所に二度はマッチングしません。

=begin original

It is worth noting that C<\G> improperly used can result in an infinite
loop. Take care when using patterns that include C<\G> in an alternation.

=end original

適切に使われていない C<\G> は無限ループとなり何の価値もありません。
代替(alternation; C<|>)の中に C<\G> を含んでいるパターンを使う際には
十分注意してください。

=head3 Capture groups

(捕捉グループ)

=begin original

The bracketing construct C<( ... )> creates capture groups (also referred to as
capture buffers). To refer to the current contents of a group later on, within
the same pattern, use C<\g1> (or C<\g{1}>) for the first, C<\g2> (or C<\g{2}>)
for the second, and so on.
This is called a I<backreference>.
X<regex, capture buffer> X<regexp, capture buffer>
X<regex, capture group> X<regexp, capture group>
X<regular expression, capture buffer> X<backreference>
X<regular expression, capture group> X<backreference>
X<\g{1}> X<\g{-1}> X<\g{name}> X<relative backreference> X<named backreference>
X<named capture buffer> X<regular expression, named capture buffer>
X<named capture group> X<regular expression, named capture group>
X<%+> X<$+{name}> X<< \k<name> >>
There is no limit to the number of captured substrings that you may use.
Groups are numbered with the leftmost open parenthesis being number 1, etc.  If
a group did not match, the associated backreference won't match either. (This
can happen if the group is optional, or in a different branch of an
alternation.)
You can omit the C<"g">, and write C<"\1">, etc, but there are some issues with
this form, described below.

=end original

かっこ構文 C<( ... )> は捕捉グループを作成します (そして捕捉バッファとして
参照します)。
同じパターンの中で、あるグループの現在の内容を後で参照するには、
最初のものには C<\g1> (または C<\g{1}>) を、2 番目には C<\g2> (または
C<\g{2}>) を、以下同様のものを使います。
これを I<後方参照> (backreference) と呼びます。
X<regex, capture buffer> X<regexp, capture buffer>
X<regex, capture group> X<regexp, capture group>
X<regular expression, capture buffer> X<backreference>
X<regular expression, capture group> X<backreference>
X<\g{1}> X<\g{-1}> X<\g{name}> X<relative backreference> X<named backreference>
X<named capture buffer> X<regular expression, named capture buffer>
X<named capture group> X<regular expression, named capture group>
X<%+> X<$+{name}> X<< \k<name> >>
使う捕捉部分文字列の数に制限はありません。
グループはいちばん左の開きかっこを 1 番として番号付けされます。
グループがマッチングしなかった場合、対応する後方参照もマッチングしません。
(これはグループがオプションか、選択の異なる枝の場合に怒ることがあります。)
C<"g"> を省略して C<"\1"> などと書くこともできますが、後で述べるように、
この形式にはいくらかの問題があります。

=begin original

You can also refer to capture groups relatively, by using a negative number, so
that C<\g-1> and C<\g{-1}> both refer to the immediately preceding capture
group, and C<\g-2> and C<\g{-2}> both refer to the group before it.  For
example:

=end original

負数を使うことで捕捉グループを相対的に参照することもできます; C<\g-1> と
C<\g{-1}> は両方とも直前の捕捉グループを参照し、C<\g-2> と C<\g{-2}> は
両方ともその前のグループを参照します。
例えば:

        /
         (Y)            # group 1
         (              # group 2
            (X)         # group 3
            \g{-1}      # backref to group 3
            \g{-3}      # backref to group 1
         )
        /x

=begin original

would match the same as C</(Y) ( (X) \g3 \g1 )/x>.  This allows you to
interpolate regexes into larger regexes and not have to worry about the
capture groups being renumbered.

=end original

は C</(Y) ( (X) \g3 \g1 )/x> と同じマッチングとなります。
これにより、正規表現をより大きな正規表現に挿入したときに、捕捉グループの
番号を振り直す心配をする必要がなくなります。

=begin original

You can dispense with numbers altogether and create named capture groups.
The notation is C<(?E<lt>I<name>E<gt>...)> to declare and C<\g{I<name>}> to
reference.  (To be compatible with .Net regular expressions, C<\g{I<name>}> may
also be written as C<\k{I<name>}>, C<\kE<lt>I<name>E<gt>> or C<\k'I<name>'>.)
I<name> must not begin with a number, nor contain hyphens.
When different groups within the same pattern have the same name, any reference
to that name assumes the leftmost defined group.  Named groups count in
absolute and relative numbering, and so can also be referred to by those
numbers.
(It's possible to do things with named capture groups that would otherwise
require C<(??{})>.)

=end original

数値を全く使わずに、名前付き捕捉グループを作ることが出来ます。
記法は、宣言が C<(?E<lt>I<name>E<gt>...)>、参照が C<\g{I<name>}> です。
(.Net 正規表現との互換性のために、C<\g{I<name>}> は C<\k{I<name>}>,
C<\kE<lt>I<name>E<gt>>, C<\k'I<name>'> とも書けます。)
I<name> は数字で始まってはならず、ハイフンを含んではなりません。
同じパターンの中に同じ名前の違うグループがある場合、
この名前での参照は一番左で定義されたものを仮定します。
名前付きグループも絶対や相対番号付けに含まれるので、
番号で参照することも出来ます。
(C<(??{})> が必要な場合でも名前付き捕捉グループを使うことが出来ます。)

=begin original

Capture group contents are dynamically scoped and available to you outside the
pattern until the end of the enclosing block or until the next successful
match, whichever comes first.  (See L<perlsyn/"Compound Statements">.)
You can refer to them by absolute number (using C<"$1"> instead of C<"\g1">,
etc); or by name via the C<%+> hash, using C<"$+{I<name>}">.

=end original

捕捉グループの内容は動的スコープを持ち、パターンの外側でも現在のブロックの
末尾か次のマッチングの成功のどちらか早いほうまで利用可能です。
(L<perlsyn/"Compound Statements"> を参照してください。)
これらに対して (C<"\g1"> などの代わりに C<"$1"> を使って) 絶対値で
参照するか、C<"$+{I<name>}"> を使って C<%+> 経由で名前で参照できます。

=begin original

Braces are required in referring to named capture groups, but are optional for
absolute or relative numbered ones.  Braces are safer when creating a regex by
concatenating smaller strings.  For example if you have C<qr/$a$b/>, and C<$a>
contained C<"\g1">, and C<$b> contained C<"37">, you would get C</\g137/> which
is probably not what you intended.

=end original

名前付き捕捉グループを参照するには中かっこが必要です;
しかし、絶対数値や相対数値の場合はオプションです。
より小さい文字列を結合して正規表現を作る場合は中かっこを使う方が安全です。
例えば C<qr/$a$b/> で C<$a> に C<"\g1"> を含み、
C<$b> に C<"37"> を含んでいるとき、
結果は C</\g137/> となりますが、おそらく望んでいたものではないでしょう。

=begin original

The C<\g> and C<\k> notations were introduced in Perl 5.10.0.  Prior to that
there were no named nor relative numbered capture groups.  Absolute numbered
groups were referred to using C<\1>,
C<\2>, etc., and this notation is still
accepted (and likely always will be).  But it leads to some ambiguities if
there are more than 9 capture groups, as C<\10> could mean either the tenth
capture group, or the character whose ordinal in octal is 010 (a backspace in
ASCII).  Perl resolves this ambiguity by interpreting C<\10> as a backreference
only if at least 10 left parentheses have opened before it.  Likewise C<\11> is
a backreference only if at least 11 left parentheses have opened before it.
And so on.  C<\1> through C<\9> are always interpreted as backreferences.
There are several examples below that illustrate these perils.  You can avoid
the ambiguity by always using C<\g{}> or C<\g> if you mean capturing groups;
and for octal constants always using C<\o{}>, or for C<\077> and below, using 3
digits padded with leading zeros, since a leading zero implies an octal
constant.

=end original

C<\g> と C<\k> の記法は Perl 5.10.0 で導入されました。
それより前には名前付きや相対数値指定の捕捉グループはありませんでした。
絶対数値指定のグループは C<\1>, C<\2> などとして参照でき、この記法はまだ
受け付けられます (そしておそらくいつも受け付けられます)。
しかし、これは 9 を越える捕捉グループがあるとあいまいさがあります;
C<\10> は 10 番目の捕捉グループとも、8 進数で 010 の文字(ASCII で
バックスペース)とも解釈できます。
Perl はこのあいまいさを以下のように解決します;
C<\10> の場合、これの前に少なくとも 10 の左かっこがある場合にのみ
これを後方参照として解釈します。
同様に、C<\11> はその前に少なくとも 11 の左かっこがある場合にのみ
これを後方参照として解釈します。
以下同様です。
C<\1> から C<\9> は常に後方参照として解釈されます。
これを図示するいくつかの例が後にあります。
捕捉グループを意味する場合は常に C<\g{}> や C<\g> を使うことで
あいまいさを避けられます;
そして 8 進定数については常に C<\o{}> を使うか、C<\077> 以下の場合は、
先頭に 0 を付けて 3 桁にします; なぜなら先頭に 0 が付くと
8 進定数を仮定するからです。

=begin original

The C<\I<digit>> notation also works in certain circumstances outside
the pattern.  See L</Warning on \1 Instead of $1> below for details.

=end original

C<\I<digit>> 記法は、ある種の状況ではパターンの外側でも動作します。
詳しくは後述する L</Warning on \1 Instead of $1> を参照して下さい。

=begin original

Examples:

=end original

例:

    s/^([^ ]*) *([^ ]*)/$2 $1/;     # swap first two words

    /(.)\g1/                        # find first doubled char
         and print "'$1' is the first doubled character\n";

    /(?<char>.)\k<char>/            # ... a different way
         and print "'$+{char}' is the first doubled character\n";

    /(?'char'.)\g1/                 # ... mix and match
         and print "'$1' is the first doubled character\n";

    if (/Time: (..):(..):(..)/) {   # parse out values
        $hours = $1;
        $minutes = $2;
        $seconds = $3;
    }

    /(.)(.)(.)(.)(.)(.)(.)(.)(.)\g10/   # \g10 is a backreference
    /(.)(.)(.)(.)(.)(.)(.)(.)(.)\10/    # \10 is octal
    /((.)(.)(.)(.)(.)(.)(.)(.)(.))\10/  # \10 is a backreference
    /((.)(.)(.)(.)(.)(.)(.)(.)(.))\010/ # \010 is octal

    $a = '(.)\1';        # Creates problems when concatenated.
    $b = '(.)\g{1}';     # Avoids the problems.
    "aa" =~ /${a}/;      # True
    "aa" =~ /${b}/;      # True
    "aa0" =~ /${a}0/;    # False!
    "aa0" =~ /${b}0/;    # True
    "aa\x08" =~ /${a}0/;  # True!
    "aa\x08" =~ /${b}0/;  # False

=begin original

Several special variables also refer back to portions of the previous
match.  C<$+> returns whatever the last bracket match matched.
C<$&> returns the entire matched string.  (At one point C<$0> did
also, but now it returns the name of the program.)  C<$`> returns
everything before the matched string.  C<$'> returns everything
after the matched string. And C<$^N> contains whatever was matched by
the most-recently closed group (submatch). C<$^N> can be used in
extended patterns (see below), for example to assign a submatch to a
variable.
X<$+> X<$^N> X<$&> X<$`> X<$'>

=end original

いくつかの特殊変数もまた以前のマッチングの一部を参照しています。
C<$+> は最後のマッチングしたブラケットマッチングを返します。
C<$&> はマッチングした文字列全体を返します。
(一頃は C<$0> もそうでしたが、現在ではこれはプログラム名を返します。)
C<$`> はマッチングした文字列の前の全てを返します。
C<$'> はマッチングした文字列の後の全てを返します。
そして C<$^N> には一番最後に閉じたグループ(サブマッチング)に
マッチングしたものを含んでいます。
C<$^N> は例えばサブマッチングを変数に格納するため等に拡張パターンの中でも
利用できます(後述)。
X<$+> X<$^N> X<$&> X<$`> X<$'>

=begin original

These special variables, like the C<%+> hash and the numbered match variables
(C<$1>, C<$2>, C<$3>, etc.) are dynamically scoped
until the end of the enclosing block or until the next successful
match, whichever comes first.  (See L<perlsyn/"Compound Statements">.)
X<$+> X<$^N> X<$&> X<$`> X<$'>
X<$1> X<$2> X<$3> X<$4> X<$5> X<$6> X<$7> X<$8> X<$9>

=end original

C<%+> ハッシュのような特殊変数と、数値によるマッチング変数
(C<$1>, C<$2>, C<$3> など)はブロックの終端または次のマッチング
成功までのどちらか先に満たした方の、動的なスコープを持ちます。
(L<perlsyn/"Compound Statements"> を参照してください。)
X<$+> X<$^N> X<$&> X<$`> X<$'>
X<$1> X<$2> X<$3> X<$4> X<$5> X<$6> X<$7> X<$8> X<$9>

=begin original

B<NOTE>: Failed matches in Perl do not reset the match variables,
which makes it easier to write code that tests for a series of more
specific cases and remembers the best match.

=end original

B<補足>: Perl において失敗したマッチングはマッチング変数をリセットしません;
これはより特殊化させる一連のテストを書くことや、
最善のマッチングを書くことを容易にします。

=begin original

B<WARNING>: Once Perl sees that you need one of C<$&>, C<$`>, or
C<$'> anywhere in the program, it has to provide them for every
pattern match.  This may substantially slow your program.  Perl
uses the same mechanism to produce C<$1>, C<$2>, etc, so you also pay a
price for each pattern that contains capturing parentheses.  (To
avoid this cost while retaining the grouping behaviour, use the
extended regular expression C<(?: ... )> instead.)  But if you never
use C<$&>, C<$`> or C<$'>, then patterns I<without> capturing
parentheses will not be penalized.  So avoid C<$&>, C<$'>, and C<$`>
if you can, but if you can't (and some algorithms really appreciate
them), once you've used them once, use them at will, because you've
already paid the price.  As of 5.005, C<$&> is not so costly as the
other two.
X<$&> X<$`> X<$'>

=end original

B<警告>: Perl は、一旦プログラム中のどこかで C<$&>, C<$`>, C<$'> の
いずれかを必要としていることを見つけると、全てのパターンマッチングで
それらを提供しなければなりません。
これはあなたのプログラムを大幅に遅くさせるでしょう。
Perl は C<$1>, C<$2> 等の生成にも同じメカニズムを使っているので、
キャプチャのかっこに含まれるそれぞれのパターンにも
同じ料金を払っています。
(グループ化の振る舞いを維持しつつこのコストを削減するには
拡張正規表現 C<(?: ... )> を代わりに使います
(訳注:Perl拡張というだけで C</x> 修飾子は不要)。)
ですが C<$&>, C<$`> または C<$'> を一度も使わなければ、
キャプチャのかっこをI<もたない>パターンではこの不利益はなくなります。
この為、可能であれば C<$&>, C<$'>, 及び C<$`> を削除しましょう:
しかしそれができなかった(そしてそれらを
本当に理解しているアルゴリズムがあるのであれば)、一旦
それらを使った時点でそれ以降は自由にそれらを使うことができます;
なぜならあなたは(一度使った時点で)既に代価を払っているので。
5.005 であれば C<$&> は他の２つほど高価ではありません。
X<$&> X<$`> X<$'>

=begin original

As a workaround for this problem, Perl 5.10.0 introduces C<${^PREMATCH}>,
C<${^MATCH}> and C<${^POSTMATCH}>, which are equivalent to C<$`>, C<$&>
and C<$'>, B<except> that they are only guaranteed to be defined after a
successful match that was executed with the C</p> (preserve) modifier.
The use of these variables incurs no global performance penalty, unlike
their punctuation char equivalents, however at the trade-off that you
have to tell perl when you want to use them.
X</p> X<p modifier>

=end original

この問題に対する解決策として、Perl 5.10.0 からは C<$`>, C<$&>, C<$'> と
等価だけれども C</p> (preseve) 修飾子を伴って実行されたマッチングが
成功した後でのみ定義されることが保証される C<${^PREMATCH}>、
C<${^MATCH}> 及び C<${^POSTMATCH}> を導入しました。
これらの変数の使用は利用したいときに perl に伝える必要がある代わりに、
等価な記号変数とは違い全体的なパフォーマンスの低下を引き起こしません。
X</p> X<p modifier>

=head2 Quoting metacharacters

=begin original

Backslashed metacharacters in Perl are alphanumeric, such as C<\b>,
C<\w>, C<\n>.  Unlike some other regular expression languages, there
are no backslashed symbols that aren't alphanumeric.  So anything
that looks like \\, \(, \), \<, \>, \{, or \} is always
interpreted as a literal character, not a metacharacter.  This was
once used in a common idiom to disable or quote the special meanings
of regular expression metacharacters in a string that you want to
use for a pattern. Simply quote all non-"word" characters:

=end original

Perl においてバックスラッシュで表現されるメタ文字は C<\b>, C<\w>,
C<\n> のように英数字です。
他の正規表現言語とは異なり、英数字でないシンボルのバックスラッシュは
ありません。
なので \\, \(, \), \<, \>, \{,  \} といったものは全てメタ文字ではなく
リテラル文字です。
これはパターンで使いたい文字列の中で正規表現のメタ文字としての特殊な意味を
無効化またはクォートするための一般的な指標として使われてきました。
「単語」でない全ての文字は単にクォートします:

    $pattern =~ s/(\W)/\\$1/g;

=begin original

(If C<use locale> is set, then this depends on the current locale.)
Today it is more common to use the quotemeta() function or the C<\Q>
metaquoting escape sequence to disable all metacharacters' special
meanings like this:

=end original

(もし C<use locale> が有効であれば、これは現在のロケールに依存します。)
今日では特殊な意味を持つメタ文字を全て無効にするためには次のように 
quotemeta() 関数か C<\Q> メタクォートエスケープシーケンスを使うのが
より一般的です:

    /$unquoted\Q$quoted\E$unquoted/

=begin original

Beware that if you put literal backslashes (those not inside
interpolated variables) between C<\Q> and C<\E>, double-quotish
backslash interpolation may lead to confusing results.  If you
I<need> to use literal backslashes within C<\Q...\E>,
consult L<perlop/"Gory details of parsing quoted constructs">.

=end original

C<\Q> 及び C<\E> の間でリテラルとしてバックスラッシュをおくとき
(埋め込んだ変数の中でではない)には、二重にクォートしたバックスラッシュの
埋め込みは困惑した結果となるでしょう。
もし C<\Q...\E> でリテラルとしてのバックスラッシュを使う
I<必要がある> のなら、
L<perlop/"Gory details of parsing quoted constructs"> を参照してください。

=head2 Extended Patterns

(拡張パターン)

=begin original

Perl also defines a consistent extension syntax for features not
found in standard tools like B<awk> and
B<lex>.  The syntax for most of these is a
pair of parentheses with a question mark as the first thing within
the parentheses.  The character after the question mark indicates
the extension.

=end original

Perl は B<awk> や B<lex> といった標準的なツールでは見られない機能のための
拡張構文も定義しています。
これらのほとんどの構文は対のかっことかっこ内の最初に疑問符の形をとります。
疑問符の後の文字で拡張を区別します。

=begin original

The stability of these extensions varies widely.  Some have been
part of the core language for many years.  Others are experimental
and may change without warning or be completely removed.  Check
the documentation on an individual feature to verify its current
status.

=end original

拡張構文の安定度は様々です。
中には長年言語コアの一部となっている物もあります。
そうでなく実験的に追加され警告なしに変更されたり削除されるものも
中にはあります。
それぞれのステータスに関しては個々の機能のドキュメントを確認してください。

=begin original

A question mark was chosen for this and for the minimal-matching
construct because 1) question marks are rare in older regular
expressions, and 2) whenever you see one, you should stop and
"question" exactly what is going on.  That's psychology....

=end original

疑問符は 1) それが古い正規表現で使われることは稀であること、そして
2) それを見かけると何が行われるのか本当に「疑問に」思って止まることから、
これのためと最小マッチング構成子のために選ばれました。
これが心理学です…。

=over 10

=item C<(?#text)>
X<(?#)>

=begin original

A comment.  The text is ignored.  If the C</x> modifier enables
whitespace formatting, a simple C<#> will suffice.  Note that Perl closes
the comment as soon as it sees a C<)>, so there is no way to put a literal
C<)> in the comment.

=end original

コメント。
テキストは無視されます。
C</x> 修飾子によって空白の整形が有効にされていれば単なる C<#> でも十分です。
Perl は C<)> を見つけると直ぐにコメントを閉じる点に注意してください;
この為リテラル C<)> をコメント中におくことはできません。

=item C<(?adlupimsx-imsx)>

=item C<(?^alupimsx)>
X<(?)> X<(?^)>

=begin original

One or more embedded pattern-match modifiers, to be turned on (or
turned off, if preceded by C<->) for the remainder of the pattern or
the remainder of the enclosing pattern group (if any).

=end original

一つもしくは複数のパターンマッチング修飾子;
パターンの残りまたは(もしあれば)包含しているパターングループの残りで
有効にする(または C<-> が前置されていれば解除する)。

=begin original

This is particularly useful for dynamic patterns, such as those read in from a
configuration file, taken from an argument, or specified in a table
somewhere.  Consider the case where some patterns want to be
case-sensitive and some do not:  The case-insensitive ones merely need to
include C<(?i)> at the front of the pattern.  For example:

=end original

これは設定ファイルから読む、引数から取る、どこかのテーブルで
指定されている箇所からダイナミックなパターンを使うときに特に便利です。
パターンの一部では大文字小文字を区別したいけれども別の箇所では
区別しないといったケースを考えてみます: 区別をしない場所では
単にパターンの先頭に C<(?i)> を含めるだけです。
例えば:

    $pattern = "foobar";
    if ( /$pattern/i ) { }

    # more flexible:

    $pattern = "(?i)foobar";
    if ( /$pattern/ ) { }

=begin original

These modifiers are restored at the end of the enclosing group. For example,

=end original

これらの修飾子は包含しているグループの最後で復元(restore)されます。
例えば、

    ( (?i) blah ) \s+ \g1

=begin original

will match C<blah> in any case, some spaces, and an exact (I<including the case>!)
repetition of the previous word, assuming the C</x> modifier, and no C</i>
modifier outside this group.

=end original

は C<blah> に大文字小文字の区別なくマッチングし、
いくつかの空白、そして前の単語その物(I<大文字小文字の区別まで含めて>!)に
再度マッチングします; ここではこのグループの外側で C</x> 修飾子を持ち、
C</i> 修飾子を持たないものとします。

=begin original

These modifiers do not carry over into named subpatterns called in the
enclosing group. In other words, a pattern such as C<((?i)(&NAME))> does not
change the case-sensitivity of the "NAME" pattern.

=end original

これらの修飾子は囲まれたグループで呼び出された名前付き部分パターンには
持ち越されません。
言い換えると、C<((?i)(&NAME))> のようなパターンは、"NAME" パターンが
大文字小文字を認識するのを変更しません。

=begin original

Any of these modifiers can be set to apply globally to all regular
expressions compiled within the scope of a C<use re>.  See
L<re/"'/flags' mode">.

=end original

それらの変更のどれもセットでき、C<use re>のスコープ内でグローバルに
全てのコンパイルされた正規表現に適用されます。L<re/"'/flags' mode">
を見てください。

=begin original

Starting in Perl 5.14, a C<"^"> (caret or circumflex accent) immediately
after the C<"?"> is a shorthand equivalent to C<d-imsx>.  Flags (except
C<"d">) may follow the caret to override it.
But a minus sign is not legal with it.

=end original

Perl 5.14から、C<"^">(キャレットか曲折アクセント)がC<"?">のすぐ
後ろにつくと、C<d-imsx>と同じになります。フラグ(C<"d">以外の)
をキャレットに続けることで、上書きできます。
ですが、マイナス記号は一緒に使えません。

=begin original

Note that the C<a>, C<d>, C<l>, C<p>, and C<u> modifiers are special in
that they can only be enabled, not disabled, and the C<a>, C<d>, C<l>, and
C<u> modifiers are mutually exclusive: specifying one de-specifies the
others, and a maximum of one (or two C<a>'s) may appear in the
construct.  Thus, for
example, C<(?-p)> will warn when compiled under C<use warnings>;
C<(?-d:...)> and C<(?dl:...)> are fatal errors.

=end original

C<a>, C<d>, C<l>, C<p>, C<u> 修飾子は有効にできるのみで、無効にはできない点、
そして C<a>, C<d>, C<l>, C<u> 修飾子は互いに排他であるという点で特別です:
一つを指定すると他のものの指定を解除し、構文中に最大で一つ (または二つの
C<a>) だけが現れます。
従って 例えば C<(?-p)> は C<use warnings> の下でコンパイルされると
警告を発します; C<(?-d:...)> と C<(?dl:...)> は致命的エラーです。

=begin original

Note also that the C<p> modifier is special in that its presence
anywhere in a pattern has a global effect.

=end original

パターン中のどこにあってもグローバルな影響があるという意味で
C<p> 修飾子が特別であることにも注意してください。

=item C<(?:pattern)>
X<(?:)>

=item C<(?adluimsx-imsx:pattern)>

=item C<(?^aluimsx:pattern)>
X<(?^:)>

=begin original

This is for clustering, not capturing; it groups subexpressions like
"()", but doesn't make backreferences as "()" does.  So

=end original

これはキャプチャではなくクラスタです; これは "()" のように部分式を
グループ化しますが "()" が行うような後方参照は行いません。
つまり、

    @fields = split(/\b(?:a|b|c)\b/)

=begin original

is like

=end original

は次と同様ですが

    @fields = split(/\b(a|b|c)\b/)

=begin original

but doesn't spit out extra fields.  It's also cheaper not to capture
characters if you don't need to.

=end original

余計なフィールドを引き出しません。
また不要であれば文字のキャプチャを行わないため低コストです。

=begin original

Any letters between C<?> and C<:> act as flags modifiers as with
C<(?adluimsx-imsx)>.  For example,

=end original

C<?> 及び C<:> の間の文字は C<(?adluimsx-imsx)> のようなフラグ修飾子として
動作します。
例えば、

    /(?s-i:more.*than).*million/i

=begin original

is equivalent to the more verbose

=end original

はより冗長に書けば以下と等価です

    /(?:(?s-i)more.*than).*million/i

=begin original

Starting in Perl 5.14, a C<"^"> (caret or circumflex accent) immediately
after the C<"?"> is a shorthand equivalent to C<d-imsx>.  Any positive
flags (except C<"d">) may follow the caret, so

=end original

Perl 5.14から、C<"^">(キャレットか曲折アクセント)がC<"?">のすぐ
後ろにつくと、C<d-imsx>と同じになります。
どのような肯定のフラグ(C<"d">以外の)もキャレットに続けることができます;
そのため、

    (?^x:foo)

=begin original

is equivalent to

=end original

は、以下と同じになります。

    (?x-ims:foo)

=begin original

The caret tells Perl that this cluster doesn't inherit the flags of any
surrounding pattern, but uses the system defaults (C<d-imsx>),
modified by any flags specified.

=end original

キャレットは、Perlにこのクラスターはパターンの周りのどのフラグも
引き継がずに、代わりに、システムのデフォルトのフラグ(C<d-imsx>)
を使うことを教えます; 指定されている他のフラグによって変更されます。

=begin original

The caret allows for simpler stringification of compiled regular
expressions.  These look like

=end original

キャレットはより簡単なコンパイルされた正規表現の文字列化をすることが
できます。次のものは

    (?^:pattern)

=begin original

with any non-default flags appearing between the caret and the colon.
A test that looks at such stringification thus doesn't need to have the
system default flags hard-coded in it, just the caret.  If new flags are
added to Perl, the meaning of the caret's expansion will change to include
the default for those flags, so the test will still work, unchanged.

=end original

キャレットとコロンの間には、デフォルトでないフラグがありません。
このような文字列化を見るテストには、したがって、システムのデフォルトのフラグを
その中にハードコードする必要はなく、ただキャレットを使います。新しいフラグが
Perlに追加されたら、キャレットを展開した意味はそれらのフラグのためのデフォルトを
含むように変更されます; そのために、このテストは、それでも何も変えずに
動くでしょう。

=begin original

Specifying a negative flag after the caret is an error, as the flag is
redundant.

=end original

キャレットの後ろに否定のフラグを付けると、余計なフラグであるとして、
エラーになります。

=begin original

Mnemonic for C<(?^...)>:  A fresh beginning since the usual use of a caret is
to match at the beginning.

=end original

C<(?^...)>の覚え方:  新鮮な開始; 通常のキャレットの使い方は文字列の開始の
マッチなので。

=item C<(?|pattern)>
X<(?|)> X<Branch reset>

=begin original

This is the "branch reset" pattern, which has the special property
that the capture groups are numbered from the same starting point
in each alternation branch. It is available starting from perl 5.10.0.

=end original

これは各代替分岐において捕捉グループを同じ番号から始める特殊な
属性を持っている、「ブランチリセット(branch reset)」パターンです。
これは perl 5.10.0 から提供されています。

=begin original

Capture groups are numbered from left to right, but inside this
construct the numbering is restarted for each branch.

=end original

捕捉グループは左から右へと番号が振られますが、この構成子の内側では
各分岐毎に番号はリセットされます。

=begin original

The numbering within each branch will be as normal, and any groups
following this construct will be numbered as though the construct
contained only one branch, that being the one with the most capture
groups in it.

=end original

各分岐内での番号付けは通常通りに行われ、この構成子の後に続くグループは
その中で捕捉グループが一番多かった分岐のみが
格納されていたかのように番号付けされていきます。

=begin original

This construct is useful when you want to capture one of a
number of alternative matches.

=end original

この構成子はいくつかの代替マッチングの1つを捕捉したいときに便利です。

=begin original

Consider the following pattern.  The numbers underneath show in
which group the captured content will be stored.

=end original

以下のパターンを想像してみてください。
下側の番号は内容の格納されるグループを示します。

    # before  ---------------branch-reset----------- after        
    / ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x
    # 1            2         2  3        2     3     4  

=begin original

Be careful when using the branch reset pattern in combination with 
named captures. Named captures are implemented as being aliases to 
numbered groups holding the captures, and that interferes with the
implementation of the branch reset pattern. If you are using named
captures in a branch reset pattern, it's best to use the same names,
in the same order, in each of the alternations:

=end original

名前付き捕捉と枝リセットパターンを組み合わせて使うときには注意してください。
名前付き捕捉は捕捉を保持している番号付きグループへの別名として
実装されていて、枝リセットパターンの実装を妨害します。
枝リセットパターンで名前付き捕捉を使うときは、それぞれの代替で
同じ名前を同じ順番で使うのが最良です:

   /(?|  (?<a> x ) (?<b> y )
      |  (?<a> z ) (?<b> w )) /x

=begin original

Not doing so may lead to surprises:

=end original

そうしないと驚くことになります:

  "12" =~ /(?| (?<a> \d+ ) | (?<b> \D+))/x;
  say $+ {a};   # Prints '12'
  say $+ {b};   # *Also* prints '12'.

=begin original

The problem here is that both the group named C<< a >> and the group
named C<< b >> are aliases for the group belonging to C<< $1 >>.

=end original

ここでの問題は、C<< a >> という名前のグループと C<< b >> という名前の
が両方ともグループ C<< $1 >> への別名であることです。

=item Look-Around Assertions
X<look-around assertion> X<lookaround assertion> X<look-around> X<lookaround>

=begin original

Look-around assertions are zero-width patterns which match a specific
pattern without including it in C<$&>. Positive assertions match when
their subpattern matches, negative assertions match when their subpattern
fails. Look-behind matches text up to the current match position,
look-ahead matches text following the current match position.

=end original

先読み及び後読みの言明(assertion)は C<$&> の中に
含めない特定のパターンにマッチングするゼロ幅のパターンです。
正の言明はその部分パターンがマッチングしたときにマッチングし、
負の言明はその部分パターンが失敗したときにマッチングします。
後読みのマッチングは今のマッチング位置までのテキストにマッチングし、
先読みの言明は今のマッチング位置の先にあるテキストにマッチングします。

=over 4

=item C<(?=pattern)>
X<(?=)> X<look-ahead, positive> X<lookahead, positive>

=begin original

A zero-width positive look-ahead assertion.  For example, C</\w+(?=\t)/>
matches a word followed by a tab, without including the tab in C<$&>.

=end original

ゼロ幅の正の先読み言明。
例えば、C</\w+(?=\t)/> はタブが続く単語にマッチングしますが、タブは
C<$&> に含まれません。

=item C<(?!pattern)>
X<(?!)> X<look-ahead, negative> X<lookahead, negative>

=begin original

A zero-width negative look-ahead assertion.  For example C</foo(?!bar)/>
matches any occurrence of "foo" that isn't followed by "bar".  Note
however that look-ahead and look-behind are NOT the same thing.  You cannot
use this for look-behind.

=end original

ゼロ幅の負の先読み言明。
例えば C</foo(?!bar)/> は "bar" が続かない全ての "foo" にマッチングします。
しかしながら先読みと後読みは同じ物では ない点に注意してください。
これを後読みに使うことはできません。

=begin original

If you are looking for a "bar" that isn't preceded by a "foo", C</(?!foo)bar/>
will not do what you want.  That's because the C<(?!foo)> is just saying that
the next thing cannot be "foo"--and it's not, it's a "bar", so "foobar" will
match.  Use look-behind instead (see below).

=end original

もし "foo" が前にない "bar" を探しているのなら、
C</(?!foo)bar/> では欲しい物にはなりません。
なぜなら  C<(?!foo)> は次のものが "foo" ではないとだけいっているのです -- 
そしてそうではなく、そこには "bar" があるので、"foobar" はマッチングします。
(後述の) 後方参照を使ってください。

=item C<(?<=pattern)> C<\K>
X<(?<=)> X<look-behind, positive> X<lookbehind, positive> X<\K>

=begin original

A zero-width positive look-behind assertion.  For example, C</(?<=\t)\w+/>
matches a word that follows a tab, without including the tab in C<$&>.
Works only for fixed-width look-behind.

=end original

ゼロ幅の正の後読みの言明。
例えば、C</(?<=\t)\w+/> は
タブに続く単語にマッチングしますが、タブは $& に 含まれません。
固定幅の後読みのみが動作します。

=begin original

There is a special form of this construct, called C<\K>, which causes the
regex engine to "keep" everything it had matched prior to the C<\K> and
not include it in C<$&>. This effectively provides variable-length
look-behind. The use of C<\K> inside of another look-around assertion
is allowed, but the behaviour is currently not well defined.

=end original

C<\K> というこの構成子の特殊な形式もあります、
これは正規表現エンジンに対してそれが C<\K> までにマッチングした
すべてのものを"取っておいて"、C<$&> には含めないようにさせます。
これは事実上可変長の後読みを提供します。
他の先読み及び後読みの言明の中での利用も可能ですが、その振る舞いは
今のところあまり定義されていません。

=begin original

For various reasons C<\K> may be significantly more efficient than the
equivalent C<< (?<=...) >> construct, and it is especially useful in
situations where you want to efficiently remove something following
something else in a string. For instance

=end original

いくつかの理由から、C<\K> は等価な C<< (?<=...) >> 
構成子より非常に効率的で、文字列の中で何かに続いている何かを効率的に
取り除きたいようなシチュエーションで効果的に役立ちます。
例えば

  s/(foo)bar/$1/g;

=begin original

can be rewritten as the much more efficient

=end original

次のようにより効率的に書き直せます

  s/foo\Kbar//g;

=item C<(?<!pattern)>
X<(?<!)> X<look-behind, negative> X<lookbehind, negative>

=begin original

A zero-width negative look-behind assertion.  For example C</(?<!bar)foo/>
matches any occurrence of "foo" that does not follow "bar".  Works
only for fixed-width look-behind.

=end original

ゼロ幅の負の後読みの言明。
例えば C</(?<!bar)foo/> は "bar" に続いていない任意の "foo" に
マッチングします。
固定幅の後読みのみが動作します。

=back

=item C<(?'NAME'pattern)>

=item C<< (?<NAME>pattern) >>
X<< (?<NAME>) >> X<(?'NAME')> X<named capture> X<capture>

=begin original

A named capture group. Identical in every respect to normal capturing
parentheses C<()> but for the additional fact that the group
can be referred to by name in various regular expression
constructs (like C<\g{NAME}>) and can be accessed by name
after a successful match via C<%+> or C<%->. See L<perlvar>
for more details on the C<%+> and C<%-> hashes.

=end original

名前付の捕捉グループ。
通常のキャプチャかっこ C<()> と同様ですがそれに加えて、
グループは(C<\g{NAME}> のように) 様々な正規表現構文で名前で参照でき、
マッチングに成功したあと C<%+> を C<%-> を使って名前によって
アクセスできます。
C<%+> 及び C<%-> ハッシュに関する詳細は L<perlvar> を
参照してください。

=begin original

If multiple distinct capture groups have the same name then the
$+{NAME} will refer to the leftmost defined group in the match.

=end original

複数の異なる捕捉グループが同じ名前を持っていたときには
$+{NAME} はマッチングの中で一番左で定義されたグループを参照します。

=begin original

The forms C<(?'NAME'pattern)> and C<< (?<NAME>pattern) >> are equivalent.

=end original

二つの形式 C<(?'NAME'pattern)> 及び C<< (?<NAME>pattern) >> は等価です。

=begin original

B<NOTE:> While the notation of this construct is the same as the similar
function in .NET regexes, the behavior is not. In Perl the groups are
numbered sequentially regardless of being named or not. Thus in the
pattern

=end original

B<補足:> これを構成する記法は 類似していている .NET での正規表現と
同じですが、振る舞いは異なります。
Perl ではグループは名前がついているかどうかにかかわらず順番に番号が
振られます。
従って次のパターンにおいて

  /(x)(?<foo>y)(z)/

=begin original

$+{foo} will be the same as $2, and $3 will contain 'z' instead of
the opposite which is what a .NET regex hacker might expect.

=end original

$+{foo} は $2 と同じであり、$3 には .NET 正規表現に
慣れた人が予測するのとは異なり 'z' が含まれます。

=begin original

Currently NAME is restricted to simple identifiers only.
In other words, it must match C</^[_A-Za-z][_A-Za-z0-9]*\z/> or
its Unicode extension (see L<utf8>),
though it isn't extended by the locale (see L<perllocale>).

=end original

現在のところ NAME はシンプルな識別子のみに制限されています。
言い換えると、C</^[_A-Za-z][_A-Za-z0-9]*\z/> または
その Unicode 拡張にマッチングしなければなりません
(L<utf8> も参照); しかしロケールでは拡張されません
(L<perllocale> 参照)。

=begin original

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines, the pattern C<< (?PE<lt>NAMEE<gt>pattern) >>
may be used instead of C<< (?<NAME>pattern) >>; however this form does not
support the use of single quotes as a delimiter for the name.

=end original

B<補足:> Python や PCRE 正規表現エンジンになれたプログラマが
楽になるように、C<< (?<NAME>pattern) >> の代わりに
C<< (?PE<lt>NAMEE<gt>pattern) >> のパターンを使うことも
できます; しかしこの形式は名前のデリミタとして
シングルクォートの使用はサポートされていません。

=item C<< \k<NAME> >>

=item C<< \k'NAME' >>

=begin original

Named backreference. Similar to numeric backreferences, except that
the group is designated by name and not number. If multiple groups
have the same name then it refers to the leftmost defined group in
the current match.

=end original

名前による後方参照。
数値によってではなく名前によってグループを指定する点を除いて、名前による
後方参照と似ています。
もし同じ名前の複数のグループがあったときには現在のマッチングで
一番左に定義されているグループを参照します。

=begin original

It is an error to refer to a name not defined by a C<< (?<NAME>) >>
earlier in the pattern.

=end original

パターン内で C<< (?<NAME>) >> によって定義されていない名前を
参照するとエラーになります。

=begin original

Both forms are equivalent.

=end original

両方の形式とも等価です。

=begin original

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines, the pattern C<< (?P=NAME) >>
may be used instead of C<< \k<NAME> >>.

=end original

B<補足:> Python や PCRE 正規表現エンジンになれたプログラマが楽に
なるように、C<< \k<NAME> >> の代わりに
C<< (?P=NAME) >> のパターンを使うこともできます。

=item C<(?{ code })>
X<(?{})> X<regex, code in> X<regexp, code in> X<regular expression, code in>

=begin original

B<WARNING>: This extended regular expression feature is considered
experimental, and may be changed without notice. Code executed that
has side effects may not perform identically from version to version
due to the effect of future optimisations in the regex engine.

=end original

B<警告>: この拡張正規表現の機能は実験的なものと考えられており、
また通知なしに変更されるかもしれません。
副作用を持つコードの実行は今後の正規表現エンジンの最適化の影響で
バージョン間で必ずしも同じになるとは限らないでしょう。

=begin original

This zero-width assertion evaluates any embedded Perl code.  It
always succeeds, and its C<code> is not interpolated.  Currently,
the rules to determine where the C<code> ends are somewhat convoluted.

=end original

このゼロ幅アサーションは埋め込まれた任意の Perl コードを評価します。
これは常に(正規表現として)成功し、その C<code> は埋め込まれません。
今のところ、C<code> が終わる場所を認識するルールは少々複雑です。

=begin original

This feature can be used together with the special variable C<$^N> to
capture the results of submatches in variables without having to keep
track of the number of nested parentheses. For example:

=end original

この機能では一緒にネストしたかっこの数を数えなくとも1つ前の
マッチング結果をキャプチャ特殊変数 C<$^N> を使うことができます。
例えば:

  $_ = "The brown fox jumps over the lazy dog";
  /the (\S+)(?{ $color = $^N }) (\S+)(?{ $animal = $^N })/i;
  print "color = $color, animal = $animal\n";

=begin original

Inside the C<(?{...})> block, C<$_> refers to the string the regular
expression is matching against. You can also use C<pos()> to know what is
the current position of matching within this string.

=end original

C<(?{...})> ブロックの中では C<$_> は正規表現をマッチングさせている文字列を
参照します。
C<pos()> を使ってこの文字列で現在のマッチング位置を知ることもできます。

=begin original

The C<code> is properly scoped in the following sense: If the assertion
is backtracked (compare L<"Backtracking">), all changes introduced after
C<local>ization are undone, so that

=end original

C<code> は次の感じで適切にスコープを持ちます: もしアサーションが
バックトラックされている(L<"Backtracking"> 参照)のなら、
C<local> されなかった後の全ての変更、つまり

  $_ = 'a' x 8;
  m<
     (?{ $cnt = 0 })                   # Initialize $cnt.
     (
       a
       (?{
           local $cnt = $cnt + 1;      # Update $cnt, backtracking-safe.
       })
     )*
     aaaa
     (?{ $res = $cnt })                # On success copy to
                                       # non-localized location.
   >x;

=begin original

will set C<$res = 4>.  Note that after the match, C<$cnt> returns to the globally
introduced value, because the scopes that restrict C<local> operators
are unwound.

=end original

は C<$res = 4> を設定します。
マッチングの後で C<$cnt> はグローバルに設定された値を返します; なぜなら
C<local> 演算子で制限されたスコープは巻き戻されるためです。

=begin original

This assertion may be used as a C<(?(condition)yes-pattern|no-pattern)>
switch.  If I<not> used in this way, the result of evaluation of
C<code> is put into the special variable C<$^R>.  This happens
immediately, so C<$^R> can be used from other C<(?{ code })> assertions
inside the same regular expression.

=end original

このアサーションは C<(?(condition)yes-pattern|no-pattern)> スイッチとして
使われるかもしれません。
この方法で使われI<なかった>のなら、C<code> の評価結果は特殊変数 C<$^R> に
おかれます。
これはすぐに行われるので C<$^R> は同じ正規表現内の他の C<?{ code })> 
アサーションで使うことができます。

=begin original

The assignment to C<$^R> above is properly localized, so the old
value of C<$^R> is restored if the assertion is backtracked; compare
L<"Backtracking">.

=end original

この C<$^R> への設定は適切にlocal化されるため、C<$^R> の古い値は
バックトラックしたときには復元されます; L<"Backtracking"> を
見てください。

=begin original

For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous C<use re 'eval'> pragma has been used (see L<re>), or the
variables contain results of the C<qr//> operator (see
L<perlop/"qr/STRINGE<sol>msixpodual">).

=end original

セキュリティ的な理由により、正規表現を実行時に変数から構築することは、
危険な C<use re 'eval'> プラグマが使われている(L<re> 参照)か
変数が C<qr//> 演算子(L<perlop/"qr/STRINGE<sol>msixpodual"> 参照)の結果を
含んでいる時以外は拒否されます。

=begin original

This restriction is due to the wide-spread and remarkably convenient
custom of using run-time determined strings as patterns.  For example:

=end original

この制限は、実行時に決まる文字列をパターンとして使う、とても広まっていて
とても便利な風習のためのものです。
例えば:

    $re = <>;
    chomp $re;
    $string =~ /$re/;

=begin original

Before Perl knew how to execute interpolated code within a pattern,
this operation was completely safe from a security point of view,
although it could raise an exception from an illegal pattern.  If
you turn on the C<use re 'eval'>, though, it is no longer secure,
so you should only do so if you are also using taint checking.
Better yet, use the carefully constrained evaluation within a Safe
compartment.  See L<perlsec> for details about both these mechanisms.

=end original

Perl がパターンの中にあるコードを実行する方法を知る前はこの操作は不正な
パターンで例外を発生させはしますがセキュリティ的な視点で完全に安全でした。
もし C<use re 'eval'> を有効にしているのなら、これはもはやセキュアでは
ありません; そして汚染チェックを使っているときにだけ行うべきです。
より良い方法としては、Safe の区画内で注意深く制限された評価を
使うべきでしょう。
この双方のメカニズムについての詳細は L<perlsec> を参照してください。

=begin original

B<WARNING>: Use of lexical (C<my>) variables in these blocks is
broken. The result is unpredictable and will make perl unstable. The
workaround is to use global (C<our>) variables.

=end original

B<警告>: これらのブロックでのレキシカル (C<my>) 変数の使用は壊れています。
結果は不確定で、perl を不安定にします。
回避方法はグローバル (C<our>) 変数を使うことです。

=begin original

B<WARNING>: In perl 5.12.x and earlier, the regex engine
was not re-entrant, so interpolated code could not
safely invoke the regex engine either directly with
C<m//> or C<s///>), or indirectly with functions such as
C<split>. Invoking the regex engine in these blocks would make perl
unstable.

=end original

B<警告>: Perl 5.12.x 以前では、正規表現エンジンは再入可能ではないので、
埋め込まれたコードからは C<m//> または C<s///> を使って直接的にでも
C<split> のような関数を使って間接的にでも安全には呼び出せません。
これらのブロックで正規表現エンジンを起動すると perl が不安定になります。

=item C<(??{ code })>
X<(??{})>
X<regex, postponed> X<regexp, postponed> X<regular expression, postponed>

=begin original

B<WARNING>: This extended regular expression feature is considered
experimental, and may be changed without notice. Code executed that
has side effects may not perform identically from version to version
due to the effect of future optimisations in the regex engine.

=end original

B<警告>: この拡張正規表現の機能は実験的なものと考えられており、
また通知なしに変更されるかもしれません。
副作用を持つコードの実行は今後の正規表現エンジンの最適化の影響で
バージョン間で必ずしも同じになるとは限らないでしょう。

=begin original

This is a "postponed" regular subexpression.  The C<code> is evaluated
at run time, at the moment this subexpression may match.  The result
of evaluation is considered a regular expression and matched as
if it were inserted instead of this construct.  Note that this means
that the contents of capture groups defined inside an eval'ed pattern
are not available outside of the pattern, and vice versa, there is no
way for the inner pattern to refer to a capture group defined outside.
Thus,

=end original

これは「先送りされた」正規部分表現です。
C<code> は実行時に評価され、そのときにこの部分表現にマッチングさせます。
評価の結果は正規表現として受け取られ、この構成子の代わりに
入れられていたかのようにマッチングされます。
これは eval されたパターン内部で定義された捕捉グループの内容はパターンの
外側では提供されず、そしてその逆も同様になる点に注意してください;
内側のパターンが外側で定義された捕捉グループを参照する方法はありません。
例えば、

    ('a' x 100)=~/(??{'(.)' x 100})/

=begin original

B<will> match, it will B<not> set $1.

=end original

これはマッチング B<します >が、$1 は設定 B<されません>。

=begin original

The C<code> is not interpolated.  As before, the rules to determine
where the C<code> ends are currently somewhat convoluted.

=end original

C<code> は埋め込まれません。
先の時と同様に C<code> が終了していると決定するルールは少々複雑です。

=begin original

The following pattern matches a parenthesized group:

=end original

次のパターンはかっこで囲まれたグループにマッチングします:

  $re = qr{
             \(
             (?:
                (?> [^()]+ )       # Non-parens without backtracking
              |
                (??{ $re })        # Group with matching parens
             )*
             \)
          }x;

=begin original

See also C<(?PARNO)> for a different, more efficient way to accomplish
the same task.

=end original

同じタスクを行う別の、より効率的な方法として C<(?PARNO)> も
参照してください。

=begin original

For reasons of security, this construct is forbidden if the regular
expression involves run-time interpolation of variables, unless the
perilous C<use re 'eval'> pragma has been used (see L<re>), or the
variables contain results of the C<qr//> operator (see
L<perlop/"qrE<sol>STRINGE<sol>msixpodual">).

=end original

セキュリティ的な理由により、正規表現を実行時に変数から構築することは、
危険な C<use re 'eval'> プラグマが使われている(L<re> 参照)か
変数が C<qr//> 演算子(L<perlop/"qr/STRING/imosx"> 参照)の結果を
含んでいる時以外は拒否されます。

=begin original

In perl 5.12.x and earlier, because the regex engine was not re-entrant,
delayed code could not safely invoke the regex engine either directly with
C<m//> or C<s///>), or indirectly with functions such as C<split>.

=end original

perl 5.12.x 以前では、Perl の正規表現エンジンは再入可能ではないので、
遅延されたコードからは C<m//> または C<s///> を使って直接的にでも
C<split> のような関数を使って間接的にでも安全には呼び出せません。

=begin original

Recursing deeper than 50 times without consuming any input string will
result in a fatal error.  The maximum depth is compiled into perl, so
changing it requires a custom build.

=end original

入力を消費しない 50 回を超える深い再帰は致命的なエラーとなります。
最大深度は perl にコンパイルされているので、これを変更するには特別に
ビルドする必要があります。

=item C<(?PARNO)> C<(?-PARNO)> C<(?+PARNO)> C<(?R)> C<(?0)>
X<(?PARNO)> X<(?1)> X<(?R)> X<(?0)> X<(?-1)> X<(?+1)> X<(?-PARNO)> X<(?+PARNO)>
X<regex, recursive> X<regexp, recursive> X<regular expression, recursive>
X<regex, relative recursion>

=begin original

Similar to C<(??{ code })> except it does not involve compiling any code,
instead it treats the contents of a capture group as an independent
pattern that must match at the current position.  Capture groups
contained by the pattern will have the value as determined by the
outermost recursion.

=end original

コードのコンパイルを伴わなず、その代わりに捕捉グループの内容を現在の位置で
マッチングすべき独立したパターンとして扱う、C<(??{ code })> と似た機能です。
パターンに内包されている捕捉グループは一番外側の再帰として
決定されるという価値があります。

=begin original

PARNO is a sequence of digits (not starting with 0) whose value reflects
the paren-number of the capture group to recurse to. C<(?R)> recurses to
the beginning of the whole pattern. C<(?0)> is an alternate syntax for
C<(?R)>. If PARNO is preceded by a plus or minus sign then it is assumed
to be relative, with negative numbers indicating preceding capture groups
and positive ones following. Thus C<(?-1)> refers to the most recently
declared group, and C<(?+1)> indicates the next group to be declared.
Note that the counting for relative recursion differs from that of
relative backreferences, in that with recursion unclosed groups B<are>
included.

=end original

PARNO はその値が再帰させる捕捉グループのかっこ番号を反映する一連の
数字からなります(そして 0 からは始まりません)。
C<(?R)> はパターン全体の最初から再帰します。
C<(?0)> は C<(?R)> の別の構文です。
PARNO の前に正符号または負符号がついていた場合には相対的な位置として
使われます; 負数であれば前の捕捉グループを、正数であれば続く
捕捉グループを示します。
従って C<(?-1)> は一番最近宣言されたグループを参照し、C<(?+1)> は次に
宣言されるグループを参照します。
相対再帰の数え方は相対後方参照とは違って、グループに閉じていない再帰は
含まB<れる>ことに注意してください,

=begin original

The following pattern matches a function foo() which may contain
balanced parentheses as the argument.

=end original

以下のパターンは引数にバランスのとれたかっこを含んでいるかもしれない関数
foo() にマッチングします。

  $re = qr{ (                    # paren group 1 (full function)
              foo
              (                  # paren group 2 (parens)
                \(
                  (              # paren group 3 (contents of parens)
                  (?:
                   (?> [^()]+ )  # Non-parens without backtracking
                  |
                   (?2)          # Recurse to start of paren group 2
                  )*
                  )
                \)
              )
            )
          }x;

=begin original

If the pattern was used as follows

=end original

このパターンを以下のように使うと,

    'foo(bar(baz)+baz(bop))'=~/$re/
        and print "\$1 = $1\n",
                  "\$2 = $2\n",
                  "\$3 = $3\n";

=begin original

the output produced should be the following:

=end original

次のように出力されます:

    $1 = foo(bar(baz)+baz(bop))
    $2 = (bar(baz)+baz(bop))
    $3 = bar(baz)+baz(bop)

=begin original

If there is no corresponding capture group defined, then it is a
fatal error.  Recursing deeper than 50 times without consuming any input
string will also result in a fatal error.  The maximum depth is compiled
into perl, so changing it requires a custom build.

=end original

もし対応する捕捉グループが定義されていなかったときには致命的な
エラーとなります。
入力を消費しない 50 回を超える深い再帰も致命的なエラーとなります。
最大深度は perl にコンパイルされているので、これを変更するには特別に
ビルドする必要があります。

=begin original

The following shows how using negative indexing can make it
easier to embed recursive patterns inside of a C<qr//> construct
for later use:

=end original

以下に後で使うパターンのために、C<qr//> 構成子内で再帰を埋め込むのに
負数の参照を使うとどのように容易になるかを示します:

    my $parens = qr/(\((?:[^()]++|(?-1))*+\))/;
    if (/foo $parens \s+ + \s+ bar $parens/x) {
       # do something here...
    }

=begin original

B<Note> that this pattern does not behave the same way as the equivalent
PCRE or Python construct of the same form. In Perl you can backtrack into
a recursed group, in PCRE and Python the recursed into group is treated
as atomic. Also, modifiers are resolved at compile time, so constructs
like (?i:(?1)) or (?:(?i)(?1)) do not affect how the sub-pattern will
be processed.

=end original

B<補足> このパターンは PCRE や Python での等価な形式の構成子と同じように
振る舞うわけではありません。
Perl においては再帰グループの中にバックトラックできますが、PCRE や
Python ではグループへの再帰はアトミックに扱われます。
また、修飾子はコンパイル時に解決されるので、(?i:(?1)) や
(?:(?i)(?1)) といった構成子はサブパターンがどのように処理されたかに
影響されません。

=item C<(?&NAME)>
X<(?&NAME)>

=begin original

Recurse to a named subpattern. Identical to C<(?PARNO)> except that the
parenthesis to recurse to is determined by name. If multiple parentheses have
the same name, then it recurses to the leftmost.

=end original

名前付きサブパターンへの再帰。
再帰するかっこが名前によって決定される点以外は C<(?PARNO)> と等価です。
もし複数のかっこで同じ名前を持っていた場合には一番左のものに再帰します。

=begin original

It is an error to refer to a name that is not declared somewhere in the
pattern.

=end original

パターンのどこでも宣言されていない名前の参照はエラーになります。

=begin original

B<NOTE:> In order to make things easier for programmers with experience
with the Python or PCRE regex engines the pattern C<< (?P>NAME) >>
may be used instead of C<< (?&NAME) >>.

=end original

B<補足:> Python または PCRE 正規表現エンジンに慣れているプログラマが
簡単になるように C<< (?&NAME) >> の代わりに C<< (?P>NANE) >> を使うことも
できます。

=item C<(?(condition)yes-pattern|no-pattern)>
X<(?()>

=item C<(?(condition)yes-pattern)>

=begin original

Conditional expression. Matches C<yes-pattern> if C<condition> yields
a true value, matches C<no-pattern> otherwise. A missing pattern always
matches.

=end original

条件付き式。
C<condition> が真なら C<yes-pattern> にマッチングし、さもなければ
C<no-pattern> にマッチングします。
パターンがなければ常にマッチングします。

=begin original

C<(condition)> should be either an integer in
parentheses (which is valid if the corresponding pair of parentheses
matched), a look-ahead/look-behind/evaluate zero-width assertion, a
name in angle brackets or single quotes (which is valid if a group
with the given name matched), or the special symbol (R) (true when
evaluated inside of recursion or eval). Additionally the R may be
followed by a number, (which will be true when evaluated when recursing
inside of the appropriate group), or by C<&NAME>, in which case it will
be true only when evaluated during recursion in the named group.

=end original

C<(condition)> はかっこでくるまれた数値(対応するかっこ対が
マッチングしたときに有効)、先読み/後読み/ゼロ幅で評価される言明、角かっこ
もしくはシングルクォートでくるまれた名前(その名前のグループが
マッチングしたときに有効)、特殊なシンボル (R) (再帰または eval 内で
評価されているときに真)のいずれかです。
加えて R には数字(対応するグループ内で再帰しているときに真)、もしくは
C<&NAME>、こちらの時はその名前のグループで再帰している時にのみ真、を
続けることもできます。

=begin original

Here's a summary of the possible predicates:

=end original

可能な述語の要約を次に示します:

=over 4

=item (1) (2) ...

=begin original

Checks if the numbered capturing group has matched something.

=end original

その番号の捕捉グループが何かにマッチングしたかどうかを調べます。

=item (<NAME>) ('NAME')

=begin original

Checks if a group with the given name has matched something.

=end original

その名前のグループが何かにマッチングしたかどうかを調べます。

=item (?=...) (?!...) (?<=...) (?<!...)

=begin original

Checks whether the pattern matches (or does not match, for the '!'
variants).

=end original

パターンがマッチングするか (あるいは '!' 版はマッチングしないか) を
チェックします。

=item (?{ CODE })

=begin original

Treats the return value of the code block as the condition.

=end original

コードブロックの返り値を条件として扱います。

=item (R)

=begin original

Checks if the expression has been evaluated inside of recursion.

=end original

式が再帰の中で評価されているかどうかを調べます。

=item (R1) (R2) ...

=begin original

Checks if the expression has been evaluated while executing directly
inside of the n-th capture group. This check is the regex equivalent of

=end original

式がその n 番目の捕捉グループのすぐ内側で実行されているかどうかを調べます。
これは次のものと等価な正規表現です

  if ((caller(0))[3] eq 'subname') { ... }

=begin original

In other words, it does not check the full recursion stack.

=end original

言い換えると、これは完全な再帰スタックを調べるわけではありません。

=item (R&NAME)

=begin original

Similar to C<(R1)>, this predicate checks to see if we're executing
directly inside of the leftmost group with a given name (this is the same
logic used by C<(?&NAME)> to disambiguate). It does not check the full
stack, but only the name of the innermost active recursion.

=end original

C<(R1)> と似ていて、この述語はその名前のつけられている一番左のグループの
すぐ内側で実行されているかどうかをしらべます(一番左は C<(?NAME)> と
同じロジックです）。
これは完全なスタックを調べずに、一番内部のアクティブな再帰の名前だけを
調べます。

=item (DEFINE)

=begin original

In this case, the yes-pattern is never directly executed, and no
no-pattern is allowed. Similar in spirit to C<(?{0})> but more efficient.
See below for details.

=end original

この場合において、yes-pattern は直接は実行されず、no-pattern は
許可されていません。
C<(?{0})> と似ていますがより効率的です。
詳細は次のようになります。

=back

=begin original

For example:

=end original

例:

    m{ ( \( )?
       [^()]+
       (?(1) \) )
     }x

=begin original

matches a chunk of non-parentheses, possibly included in parentheses
themselves.

=end original

これはかっこ以外からなる固まりかかっこの中にあるそれらにマッチングします。

=begin original

A special form is the C<(DEFINE)> predicate, which never executes its
yes-pattern directly, and does not allow a no-pattern. This allows one to
define subpatterns which will be executed only by the recursion mechanism.
This way, you can define a set of regular expression rules that can be
bundled into any pattern you choose.

=end original

C<(DEFINE)> は特殊な形式で、これはその yes-pattern を直接は実行せず、
no-pattern も許可していません。
これは再帰メカニズムの中で利用することでのみ実行されるサブパターンの
定義を許可します。
これによって、選んだパターンと一緒に正規表現ルールを定義できます。

=begin original

It is recommended that for this usage you put the DEFINE block at the
end of the pattern, and that you name any subpatterns defined within it.

=end original

この使い方において、DEFINE ブロックはパターンの最後におくこと、
そしてそこで定義する全てのサブパターンに名前をつけることが
推奨されています。

=begin original

Also, it's worth noting that patterns defined this way probably will
not be as efficient, as the optimiser is not very clever about
handling them.

=end original

また、この方法によって定義されるパターンはその処理に関してそんなに
賢い訳ではないので効率的でないことに価値は何もないでしょう。

=begin original

An example of how this might be used is as follows:

=end original

これをどのように使うかの例を次に示します:

  /(?<NAME>(?&NAME_PAT))(?<ADDR>(?&ADDRESS_PAT))
   (?(DEFINE)
     (?<NAME_PAT>....)
     (?<ADRESS_PAT>....)
   )/x

=begin original

Note that capture groups matched inside of recursion are not accessible
after the recursion returns, so the extra layer of capturing groups is
necessary. Thus C<$+{NAME_PAT}> would not be defined even though
C<$+{NAME}> would be.

=end original

再帰の内側でマッチングした捕捉グループは再帰から戻った後には
アクセスできないため、余分な捕捉グループの
レイヤは必要な点に注意してください。
従って C<$+{NAME}> が定義されていても C<$+{NAME_PAT}> は定義されません。

=item C<< (?>pattern) >>
X<backtrack> X<backtracking> X<atomic> X<possessive>

=begin original

An "independent" subexpression, one which matches the substring
that a I<standalone> C<pattern> would match if anchored at the given
position, and it matches I<nothing other than this substring>.  This
construct is useful for optimizations of what would otherwise be
"eternal" matches, because it will not backtrack (see L<"Backtracking">).
It may also be useful in places where the "grab all you can, and do not
give anything back" semantic is desirable.

=end original

「独立した」部分式、I<スタンドアロンの> C<pattern> がその場所に
固定されてマッチングする部分文字列にマッチングし、
I<その文字列以外にはなにも>マッチングしません。
この構成子は他の"外部"マッチングになる最適化に便利です;
なぜならこれはバックトラックしないためです(L<"Backtracking"> 参照)。
これは "できる限りを取り込んで、後は戻らない"セマンティクスが
必要な場所でも便利です。

=begin original

For example: C<< ^(?>a*)ab >> will never match, since C<< (?>a*) >>
(anchored at the beginning of string, as above) will match I<all>
characters C<a> at the beginning of string, leaving no C<a> for
C<ab> to match.  In contrast, C<a*ab> will match the same as C<a+b>,
since the match of the subgroup C<a*> is influenced by the following
group C<ab> (see L<"Backtracking">).  In particular, C<a*> inside
C<a*ab> will match fewer characters than a standalone C<a*>, since
this makes the tail match.

=end original

例: C<< ^(?>a*)ab >> は何もマッチングしません、
なぜなら C<< (?>a*) >> (前述のように、文字列の開始で固定されます)は
文字列のはじめにある全ての文字 C<a> にマッチングし、
C<ab> のマッチングのための C<a> を残さないためです。
対照的に、C<a*ab> は C<a+b> と同じようにマッチングします、
これはサブグループ C<a*> のマッチングは次のグループ C<ab> の影響を
受けるためです (L<"Backtracking"> 参照)。
特に、C<a*ab> の中の C<a*> は単独の C<a*> より短い文字にマッチングします;
これによって最後のマッチングが行えるようになります。

=begin original

C<< (?>pattern) >> does not disable backtracking altogether once it has
matched. It is still possible to backtrack past the construct, but not
into it. So C<< ((?>a*)|(?>b*))ar >> will still match "bar".

=end original

C<< (?>pattern) >> は、一旦マッチングしたら、全くバックトラックを
無効にしません。
未だこの構文の前までバックトラックする可能性はありますが、構文の中に
バックトラックすることはありません。
従って C<< ((?>a*)|(?>b*))ar >> は "bar" にマッチングするままです。

=begin original

An effect similar to C<< (?>pattern) >> may be achieved by writing
C<(?=(pattern))\g{-1}>.  This matches the same substring as a standalone
C<a+>, and the following C<\g{-1}> eats the matched string; it therefore
makes a zero-length assertion into an analogue of C<< (?>...) >>.
(The difference between these two constructs is that the second one
uses a capturing group, thus shifting ordinals of backreferences
in the rest of a regular expression.)

=end original

C<< (?>pattern) >> と似た効果は C<(?=(pattern))\g{-1}>  でも達成できます。
これは単独の C<a+> と同じ部分文字列にマッチングし、それに続く C<\g{-1}> が
マッチングした文字列を消費します; 
これはゼロ幅の言明が C<< (?>...) >> の類似を作るためです。
(この2つの構成子は後者はグループをキャプチャするため、
それに続く正規表現の残りで後方参照の順序をずらす点で違いがあります。)

=begin original

Consider this pattern:

=end original

次のパターンを考えてみてください:

    m{ \(
          (
            [^()]+           # x+
          |
            \( [^()]* \)
          )+
       \)
     }x

=begin original

That will efficiently match a nonempty group with matching parentheses
two levels deep or less.  However, if there is no such group, it
will take virtually forever on a long string.  That's because there
are so many different ways to split a long string into several
substrings.  This is what C<(.+)+> is doing, and C<(.+)+> is similar
to a subpattern of the above pattern.  Consider how the pattern
above detects no-match on C<((()aaaaaaaaaaaaaaaaaa> in several
seconds, but that each extra letter doubles this time.  This
exponential performance will make it appear that your program has
hung.  However, a tiny change to this pattern

=end original

これは 2 段階までのかっこでくるまれた空でないグループに効率的に
マッチングします。
しかしながら、これはマッチングするグループがなかったときに長い
文字列においてはほとんど永遠に戻りません。
これは長い文字列をいくつかの部分文字列に分解する方法がいくつもあるためです。
これは C<(.+)+> が行うことでもあり、C<(.+)+> は このパターンの
部分パターンと似ています。
このパターンが C<((()aaaaaaaaaaaaaaaaaa> にはマッチングしないことを
どうやって検出するかを少し考えてみましょう、
しかしここでは余計な文字を2倍にしてみます。
この指数的なパフォーマンスはプログラムのハングアップとして表面化します。
しかしながら、このパターンに小さな変更をいれてみます,

    m{ \(
          (
            (?> [^()]+ )        # change x+ above to (?> x+ )
          |
            \( [^()]* \)
          )+
       \)
     }x

=begin original

which uses C<< (?>...) >> matches exactly when the one above does (verifying
this yourself would be a productive exercise), but finishes in a fourth
the time when used on a similar string with 1000000 C<a>s.  Be aware,
however, that, when this construct is followed by a
quantifier, it currently triggers a warning message under
the C<use warnings> pragma or B<-w> switch saying it
C<"matches null string many times in regex">.

=end original

これは上で行っているように C<< (?>...) >> マッチングを
使っています(これは自身で確認してみるとよいでしょう)が、
しかし 1000000 個の C<a> からなる似た文字列を使ってみると、4 分の 1 の
時間で完了します。
しかしながら、この構文は量指定子が引き続くと現在のところ
C<use warnings> プラグマまたは B<-w> スイッチの影響下では
C<"matches null string many times in regex">
(正規表現において空文字列に何回もマッチングしました) という警告を
発するでしょう。

=begin original

On simple groups, such as the pattern C<< (?> [^()]+ ) >>, a comparable
effect may be achieved by negative look-ahead, as in C<[^()]+ (?! [^()] )>.
This was only 4 times slower on a string with 1000000 C<a>s.

=end original

パターン C<< (?> [^()]+ ) >> のような簡単なグループでは、
比較できる影響は C<[^()]+ (?! [^()] )> のように負の先読みの
言明で達することができます。
これは 1000000 個の C<a> からなる文字列において 4 倍だけ遅くなります。

=begin original

The "grab all you can, and do not give anything back" semantic is desirable
in many situations where on the first sight a simple C<()*> looks like
the correct solution.  Suppose we parse text with comments being delimited
by C<#> followed by some optional (horizontal) whitespace.  Contrary to
its appearance, C<#[ \t]*> I<is not> the correct subexpression to match
the comment delimiter, because it may "give up" some whitespace if
the remainder of the pattern can be made to match that way.  The correct
answer is either one of these:

=end original

最初の C<()*> のような正しい解法となる多くの状況において
「できる限りを取り込んで、後は戻らない」セマンティクスが望まれるものです。
任意で(水平)空白の続く C<#> によって区切られるコメントのついたテキストの
パースを考えてみます。
その出現と対比して、C<#[ \t]*> はコメント区切りにマッチングする
正しい部分式ではありません; なぜならパターンの残りがそれのマッチングを
作ることができるのならそれはいくつかの空白を「あきらめてしまう」ためです。
正しい回答は以下のいずれかです:

    (?>#[ \t]*)
    #[ \t]*(?![ \t])

=begin original

For example, to grab non-empty comments into $1, one should use either
one of these:

=end original

例えば空でないコメントを $1 に取り込むためには次のいずれかを使います:

    / (?> \# [ \t]* ) (        .+ ) /x;
    /     \# [ \t]*   ( [^ \t] .* ) /x;

=begin original

Which one you pick depends on which of these expressions better reflects
the above specification of comments.

=end original

選んだ方はコメントの仕様をより適切に反映した式に依存します。

=begin original

In some literature this construct is called "atomic matching" or
"possessive matching".

=end original

いくつかの書籍においてこの構成子は「アトミックなマッチング」
または「絶対最大量マッチング(possessive matching)」と呼ばれます。

=begin original

Possessive quantifiers are equivalent to putting the item they are applied
to inside of one of these constructs. The following equivalences apply:

=end original

絶対最大量指定子はそれが適用されている項目をこれらの構成子の中に置くことと
等価です。
以下の等式が適用されます:

    Quantifier Form     Bracketing Form
    ---------------     ---------------
    PAT*+               (?>PAT*)
    PAT++               (?>PAT+)
    PAT?+               (?>PAT?)
    PAT{min,max}+       (?>PAT{min,max})

=back

=head2 Special Backtracking Control Verbs

(特殊なバックトラック制御記号)

=begin original

B<WARNING:> These patterns are experimental and subject to change or
removal in a future version of Perl. Their usage in production code should
be noted to avoid problems during upgrades.

=end original

B<警告:> これらのパターンは実験的なものであり、
Perl の今後のバージョンで変更または削除される可能性があります。
製品コードでこれらを使う際にはアップグレードによる問題を
避けるために明記するべきです。

=begin original

These special patterns are generally of the form C<(*VERB:ARG)>. Unless
otherwise stated the ARG argument is optional; in some cases, it is
forbidden.

=end original

これらの特殊なパターンは C<(*VERB:ARG)> という一般形式を持っています。
ARG が任意であると規定されていいないいくつかのケース以外では、それは
拒否されます。

=begin original

Any pattern containing a special backtracking verb that allows an argument
has the special behaviour that when executed it sets the current package's
C<$REGERROR> and C<$REGMARK> variables. When doing so the following
rules apply:

=end original

引数を許可する特殊バックトラック制御記号を含んでいる全てのパターンは、
それが実行されると現在のパッケージの C<$REGERROR> 及び C<$REGMARK> 変数を
設定する特殊な振る舞いを持っています。
これが行われる時以下の手順が適用されます。

=begin original

On failure, the C<$REGERROR> variable will be set to the ARG value of the
verb pattern, if the verb was involved in the failure of the match. If the
ARG part of the pattern was omitted, then C<$REGERROR> will be set to the
name of the last C<(*MARK:NAME)> pattern executed, or to TRUE if there was
none. Also, the C<$REGMARK> variable will be set to FALSE.

=end original

失敗時には C<$REGERROR> 変数には、記号がマッチングの失敗の中で
使われていたのならその記号パターンの ARG の値がセットされます。
もしパターンの ARG 部分が省略されていたときには、C<$REGERROR> には
最後に実行された C<(*MARK:NAME)> パターンの名前、またはそれもなければ
真に設定されます。
また、C<$REGMARK> 変数は偽に設定されます。

=begin original

On a successful match, the C<$REGERROR> variable will be set to FALSE, and
the C<$REGMARK> variable will be set to the name of the last
C<(*MARK:NAME)> pattern executed.  See the explanation for the
C<(*MARK:NAME)> verb below for more details.

=end original

マッチングの成功時には、C<$REGERROR> 変数は偽に設定され、C<$REGMARK> 変数には
最後に実行された C<(*MARK:NAME)> パターンの名前が設定されます。
詳細は C<(*MARK:NAME)> 記号の説明を参照してください。

=begin original

B<NOTE:> C<$REGERROR> and C<$REGMARK> are not magic variables like C<$1>
and most other regex-related variables. They are not local to a scope, nor
readonly, but instead are volatile package variables similar to C<$AUTOLOAD>.
Use C<local> to localize changes to them to a specific scope if necessary.

=end original

B<補足:> C<$REGERROR> 及び C<$REGMARK> は C<$1> や他の多くの
正規表現関連の変数のようにマジック変数ではありません。
それらはスコープ内にローカルにならず、読み込み専用でもありませんが、
C<$AUTOLOAD> と似た揮発するパッケージ変数です。
必要時に特定のスコープ内に変更を留めたいときには C<local> を使ってください。

=begin original

If a pattern does not contain a special backtracking verb that allows an
argument, then C<$REGERROR> and C<$REGMARK> are not touched at all.

=end original

もしパターンが引数を許可する特殊バックトラック記号を含んでなかった場合には、
C<$REGERROR> 及び C<$REGMARK> は全く触られません。

=over 4

=item Verbs that take an argument

(引数を取る動詞)

=over 4

=item C<(*PRUNE)> C<(*PRUNE:NAME)>
X<(*PRUNE)> X<(*PRUNE:NAME)>

=begin original

This zero-width pattern prunes the backtracking tree at the current point
when backtracked into on failure. Consider the pattern C<A (*PRUNE) B>,
where A and B are complex patterns. Until the C<(*PRUNE)> verb is reached,
A may backtrack as necessary to match. Once it is reached, matching
continues in B, which may also backtrack as necessary; however, should B
not match, then no further backtracking will take place, and the pattern
will fail outright at the current starting position.

=end original

このゼロ幅のパターンは失敗でバックトラックしてきたときに現在の位置で
バックトラックツリーを刈り取ります。
C<A (*PRUNE) B> というパターンで A も B も複雑なパターンである時を
考えてみます。
C<(*PRUNE)> に達するまでは、A はマッチングに必要であれば
バックトラックしていきます。
しかし一旦そこに達して B に続くと、そこでも必要に応じてバックトラックします;
しかしながら、B がマッチングしなかったときにはそれ以上のバックトラックは
行われず、現在の開始位置でのマッチングはすぐに失敗します。

=begin original

The following example counts all the possible matching strings in a
pattern (without actually matching any of them).

=end original

次の例ではパターンに対してマッチングできるすべての文字列を(実際には
マッチングさせずに)数えます。

    'aaab' =~ /a+b?(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

=begin original

which produces:

=end original

この出力:

    aaab
    aaa
    aa
    a
    aab
    aa
    a
    ab
    a
    Count=9

=begin original

If we add a C<(*PRUNE)> before the count like the following

=end original

次のように数える前に C<(*PRUNE)> を加えると

    'aaab' =~ /a+b?(*PRUNE)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

=begin original

we prevent backtracking and find the count of the longest matching string
at each matching starting point like so:

=end original

バックトラックを妨げ次のように各開始位置での一番長いマッチング文字列を
数えるようになります:

    aaab
    aab
    ab
    Count=3

=begin original

Any number of C<(*PRUNE)> assertions may be used in a pattern.

=end original

1つのパターン内で C<(*PRUNE)> 言明はいくつでも使えます。

=begin original

See also C<< (?>pattern) >> and possessive quantifiers for other ways to
control backtracking. In some cases, the use of C<(*PRUNE)> can be
replaced with a C<< (?>pattern) >> with no functional difference; however,
C<(*PRUNE)> can be used to handle cases that cannot be expressed using a
C<< (?>pattern) >> alone.

=end original

バックトラックを制御する他の方法として  C<< (?>pattern) >> 
及び絶対最大量指定子も参照してください。
幾つかのケースにおいては C<(*PRUNE)> の利用は機能的な違いなしに
C<< (?>pattern) >> で置き換えることができます; しかしながら C<(*PRUNE)> は
C<< (?>pattern) >> 単独では表現できないケースを扱うために使えます。

=item C<(*SKIP)> C<(*SKIP:NAME)>
X<(*SKIP)>

=begin original

This zero-width pattern is similar to C<(*PRUNE)>, except that on
failure it also signifies that whatever text that was matched leading up
to the C<(*SKIP)> pattern being executed cannot be part of I<any> match
of this pattern. This effectively means that the regex engine "skips" forward
to this position on failure and tries to match again, (assuming that
there is sufficient room to match).

=end original

このゼロ幅のパターンは C<*PRUNE> と似ていますが、実行されている
C<(*SKIP)> パターンまでにマッチングしたテキストはこのパターンの
I<どの>マッチングの一部にもならないことを示します。
これは正規表現エンジンがこの位置まで失敗として「スキップ」して(マッチングに
十分な空間があれば)再びマッチングを試みることを効率的に意味します。

=begin original

The name of the C<(*SKIP:NAME)> pattern has special significance. If a
C<(*MARK:NAME)> was encountered while matching, then it is that position
which is used as the "skip point". If no C<(*MARK)> of that name was
encountered, then the C<(*SKIP)> operator has no effect. When used
without a name the "skip point" is where the match point was when
executing the (*SKIP) pattern.

=end original

C<(*SKIP:NAME)> パターンの名前部分には特別な意味があります。
もしマッチングにおいて C<(*MARK:NAME)> に遭遇すると、それは「スキップ
位置」として使われる位置になります。
その名前の C<(*MARK)> と東宮していなければ、C<(*SKIP)> 操作は効果を
持ちません。
名前がなければ「スキップ位置」は(*SKIP)パターンの実行されたときに
マッチングポイントが使われます。

=begin original

Compare the following to the examples in C<(*PRUNE)>; note the string
is twice as long:

=end original

以下の例を C<(*PRUNE)> と比べてみてください;
文字列が2倍になってることに注意してください:

    'aaabaaab' =~ /a+b?(*SKIP)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

=begin original

outputs

=end original

これの出力は

    aaab
    aaab
    Count=2

=begin original

Once the 'aaab' at the start of the string has matched, and the C<(*SKIP)>
executed, the next starting point will be where the cursor was when the
C<(*SKIP)> was executed.

=end original

いったん文字列の最初の 'aaab' がマッチングして、C<(*SKIP)> が実行されると、
次の開始位置は C<(*SKIP)> が実行されたときのカーソルがいた位置になります。

=item C<(*MARK:NAME)> C<(*:NAME)>
X<(*MARK)> C<(*MARK:NAME)> C<(*:NAME)>

=begin original

This zero-width pattern can be used to mark the point reached in a string
when a certain part of the pattern has been successfully matched. This
mark may be given a name. A later C<(*SKIP)> pattern will then skip
forward to that point if backtracked into on failure. Any number of
C<(*MARK)> patterns are allowed, and the NAME portion may be duplicated.

=end original

このゼロ幅のマッチングはパターン内の特定の箇所がマッチングに成功したときに、
文字列の中で達した位置を記録するために使われます。
このマークには名前をつけることもできます。
後者の C<(*SKIP)> パターンは失敗時でバックトラックしたときにその箇所まで
スキップします。
C<(*MARK)> パターンはいくつでも使うことができて、NAME 部分は
重複することもあります。

=begin original

In addition to interacting with the C<(*SKIP)> pattern, C<(*MARK:NAME)>
can be used to "label" a pattern branch, so that after matching, the
program can determine which branches of the pattern were involved in the
match.

=end original

C<(*SKIP)> パターンとの相互動作に加えて、C<(*MARK:NAME)> はパターン分岐の
「ラベル」としても使うことができます; このためマッチングの後で、プログラムは
そのマッチングにおいてパターンのどの分岐が使われたのかを知ることができます。

=begin original

When a match is successful, the C<$REGMARK> variable will be set to the
name of the most recently executed C<(*MARK:NAME)> that was involved
in the match.

=end original

マッチングの成功時に、C<$REGMARK> 変数はマッチングの中で一番最近に
実行された C<(*MARK:NAME)> の名前を設定します。

=begin original

This can be used to determine which branch of a pattern was matched
without using a separate capture group for each branch, which in turn
can result in a performance improvement, as perl cannot optimize
C</(?:(x)|(y)|(z))/> as efficiently as something like
C</(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/>.

=end original

これは書く分岐で別々の捕捉グループを使うことなしにパターンのどの分岐が
マッチングしたのかを知るために使うことができます; これは perl は
C</(?:(x)|(y)|(z))/> を C</(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/> 程度に
効率的には最適化できないためパフォーマンスの向上をもたらします。

=begin original

When a match has failed, and unless another verb has been involved in
failing the match and has provided its own name to use, the C<$REGERROR>
variable will be set to the name of the most recently executed
C<(*MARK:NAME)>.

=end original

マッチングが失敗して、そして他の記号がマッチングの失敗で行われずかつ名前を
持っているというのでなければ、C<$REGERROR> 変数には一番最近に実行された
名前が設定されます。

=begin original

See C<(*SKIP)> for more details.

=end original

詳細は C<(*SKIP)> を参照してください。

=begin original

As a shortcut C<(*MARK:NAME)> can be written C<(*:NAME)>.

=end original

C<(*MARK:NAME)> の短縮形として C<(*:NAME)> とも記述できます。

=item C<(*THEN)> C<(*THEN:NAME)>

=begin original

This is similar to the "cut group" operator C<::> from Perl 6. Like
C<(*PRUNE)>, this verb always matches, and when backtracked into on
failure, it causes the regex engine to try the next alternation in the
innermost enclosing group (capturing or otherwise).

=end original

これは Perl 6 の "cut group" 演算子 C<::> と似ています。
C<(*PRUNE)> のように、この記号は常にマッチングし、そして失敗で
バックトラックした時に正規表現エンジンに一番内側で閉じているグループ
(キャプチャでもそうでなくとも)で次の代替を試みるようにさせます。

=begin original

Its name comes from the observation that this operation combined with the
alternation operator (C<|>) can be used to create what is essentially a
pattern-based if/then/else block:

=end original

この名前は代替演算子(C<|>) と連結されたこの演算子で本質的にパターンベースの
if/then/else ブロックとなるものを作るために使うことが
できることからきています:

  ( COND (*THEN) FOO | COND2 (*THEN) BAR | COND3 (*THEN) BAZ )

=begin original

Note that if this operator is used and NOT inside of an alternation then
it acts exactly like the C<(*PRUNE)> operator.

=end original

この演算子が使われていてそしてそれが代替の内側ではなければ
これはちょうど C<(*PRUNE)> 演算子のように動作します。

  / A (*PRUNE) B /

=begin original

is the same as

=end original

は次と同じです

  / A (*THEN) B /

=begin original

but

=end original

しかし

  / ( A (*THEN) B | C (*THEN) D ) /

=begin original

is not the same as

=end original

は次と同じではありません

  / ( A (*PRUNE) B | C (*PRUNE) D ) /

=begin original

as after matching the A but failing on the B the C<(*THEN)> verb will
backtrack and try C; but the C<(*PRUNE)> verb will simply fail.

=end original

A にマッチングしたけれど B に失敗した後 C<(*THEN)> 記号はバックトラックして
C を試みます; しかし C<(*PRUNE)> 記号であれば単純に失敗します。

=item C<(*COMMIT)>
X<(*COMMIT)>

=begin original

This is the Perl 6 "commit pattern" C<< <commit> >> or C<:::>. It's a
zero-width pattern similar to C<(*SKIP)>, except that when backtracked
into on failure it causes the match to fail outright. No further attempts
to find a valid match by advancing the start pointer will occur again.
For example,

=end original

これは Perl 6 の"コミットパターン" C<< <commit> >> または C<:::> です。
これは C<(*SKIP)> と似たゼロ幅のパターンですが、失敗でバックトラックした
際にマッチングがすぐに失敗する点で異なります。
それ以降で開始位置を進めて有効なマッチングを探す試行は行われません。
例えば、

    'aaabaaab' =~ /a+b?(*COMMIT)(?{print "$&\n"; $count++})(*FAIL)/;
    print "Count=$count\n";

=begin original

outputs

=end original

これの出力は

    aaab
    Count=1

=begin original

In other words, once the C<(*COMMIT)> has been entered, and if the pattern
does not match, the regex engine will not try any further matching on the
rest of the string.

=end original

言い換えると、いったん C<(*COMMIT)> に入った後に、そのパターンが
マッチングしなかったのなら、正規表現エンジンは文字列の残りに対して
それ以上のマッチングを試みません。

=back

=item Verbs without an argument

=over 4

=item C<(*FAIL)> C<(*F)>
X<(*FAIL)> X<(*F)>

=begin original

This pattern matches nothing and always fails. It can be used to force the
engine to backtrack. It is equivalent to C<(?!)>, but easier to read. In
fact, C<(?!)> gets optimised into C<(*FAIL)> internally.

=end original

このパターンは何にもマッチングせず常に失敗します。
これはエンジンを強制的にバックトラックさせるために使えます。
これは C<(?!)> と等価ですが、より読みやすくなっています。
実際、C<(?!)> は内部的には C<(*FAIL)> に最適化されます。

=begin original

It is probably useful only when combined with C<(?{})> or C<(??{})>.

=end original

これはおそらく C<(?{})> または C<(??{})> と組み合わせた時にだけ
役に立つでしょう。

=item C<(*ACCEPT)>
X<(*ACCEPT)>

=begin original

B<WARNING:> This feature is highly experimental. It is not recommended
for production code.

=end original

B<警告:> この機能は強く実験的です。
製品コードでは推奨されません。

=begin original

This pattern matches nothing and causes the end of successful matching at
the point at which the C<(*ACCEPT)> pattern was encountered, regardless of
whether there is actually more to match in the string. When inside of a
nested pattern, such as recursion, or in a subpattern dynamically generated
via C<(??{})>, only the innermost pattern is ended immediately.

=end original

このパターンマッチングは何もせず C<(*ACCEPT)> パターンと遭遇した場所で
文字列の中で実際にもっとマッチングするものがあるかどうかにかかわらず
成功のマッチングを終了させます。
再帰、または C<(??{})> といったネストしたパターンの内側では、一番内側の
パターンのみがすぐに終了します。

=begin original

If the C<(*ACCEPT)> is inside of capturing groups then the groups are
marked as ended at the point at which the C<(*ACCEPT)> was encountered.
For instance:

=end original

C<(*ACCEPT)> が捕捉グループの内側で使われた場合捕捉グループは
C<(*ACCEPT)> と遭遇した位置で終了とマークされます。
例えば:

  'AB' =~ /(A (A|B(*ACCEPT)|C) D)(E)/x;

=begin original

will match, and C<$1> will be C<AB> and C<$2> will be C<B>, C<$3> will not
be set. If another branch in the inner parentheses was matched, such as in the
string 'ACDE', then the C<D> and C<E> would have to be matched as well.

=end original

はマッチングし、C<$1> は C<AB> になり、C<$2> は C<B> に、そして
C<$3> は設定されません。
'ACDE' のようにかっこの内側で他の分岐がマッチングしたのなら、C<D> 及び
C<E> もマッチングします。

=back

=back

=head2 Backtracking
X<backtrack> X<backtracking>

(バックトラック)

=begin original

NOTE: This section presents an abstract approximation of regular
expression behavior.  For a more rigorous (and complicated) view of
the rules involved in selecting a match among possible alternatives,
see L<Combining RE Pieces>.

=end original

補足: このセクションでは正規表現の振る舞いに関する抽象的な概要を
説明します。
可能な代替におけるマッチングの選択におけるルールの厳密な(そして複雑な)
説明は L<Combining RE Pieces> を参照してください。

=begin original

A fundamental feature of regular expression matching involves the
notion called I<backtracking>, which is currently used (when needed)
by all regular non-possessive expression quantifiers, namely C<*>, C<*?>, C<+>,
C<+?>, C<{n,m}>, and C<{n,m}?>.  Backtracking is often optimized
internally, but the general principle outlined here is valid.

=end original

正規表現マッチングの基本的な機能には最近(必要であれば)すべての強欲でない
正規表現量指定子、つまり、C<*>, C<*?>, C<+>, C<+?>, C<{n,m}>, C<{n,m}?> で
使われる I<バックトラッキング> と呼ばれる概念が含まれています。
バックトラックはしばしば内部で最適化されますが、ここで概説する一般的な
原則は妥当です。

=begin original

For a regular expression to match, the I<entire> regular expression must
match, not just part of it.  So if the beginning of a pattern containing a
quantifier succeeds in a way that causes later parts in the pattern to
fail, the matching engine backs up and recalculates the beginning
part--that's why it's called backtracking.

=end original

正規表現がマッチングする時、その正規表現の一部ではなく、
I<全体> がマッチングしなければなりません。
そのためもしパターンの前半にパターンの後半部分を失敗させてしまう
量指定子が含まれているのなら、マッチングングエンジンはいったん戻って
開始位置を再計算します -- これがバックトラッキングと呼ばれる所以です。

=begin original

Here is an example of backtracking:  Let's say you want to find the
word following "foo" in the string "Food is on the foo table.":

=end original

バックトラッキングの例をあげてみます: "Food is on the foo table." という
文字列の中で "foo" に続く単語を取り出してください:

    $_ = "Food is on the foo table.";
    if ( /\b(foo)\s+(\w+)/i ) {
        print "$2 follows $1.\n";
    }

=begin original

When the match runs, the first part of the regular expression (C<\b(foo)>)
finds a possible match right at the beginning of the string, and loads up
$1 with "Foo".  However, as soon as the matching engine sees that there's
no whitespace following the "Foo" that it had saved in $1, it realizes its
mistake and starts over again one character after where it had the
tentative match.  This time it goes all the way until the next occurrence
of "foo". The complete regular expression matches this time, and you get
the expected output of "table follows foo."

=end original

マッチングが実行される時、正規表現の最初の部分 (C<\b(foo)>) は開始文字列の
右側で可能なマッチングを探します; そして $1 に "Foo" をロードします。
しかし、すぐにマッチングエンジンは $1 に保存した "Foo" の後に空白が
無いことを見つけ、それが失敗だったことを検出して仮にマッチングさせた
場所の1文字後から開始します。
この時次の "foo" の出現まで進みます。
この時に正規表現は完全にマッチングし、予測した出力 "table follows foo." を
得ます。

=begin original

Sometimes minimal matching can help a lot.  Imagine you'd like to match
everything between "foo" and "bar".  Initially, you write something
like this:

=end original

最小マッチングが役立つこともあります。
"foo" と "bar" の間の全てにマッチングしたいと考えてください。
最初に、次のように書くかもしれません:

    $_ =  "The food is under the bar in the barn.";
    if ( /foo(.*)bar/ ) {
        print "got <$1>\n";
    }

=begin original

Which perhaps unexpectedly yields:

=end original

しかしこれは考えたのと違う結果となるでしょう:

  got <d is under the bar in the >

=begin original

That's because C<.*> was greedy, so you get everything between the
I<first> "foo" and the I<last> "bar".  Here it's more effective
to use minimal matching to make sure you get the text between a "foo"
and the first "bar" thereafter.

=end original

これは C<.*> が貪欲であり、そのために I<最初の> "foo" と I<最後の>
"bar" の間にある全てを取り出してしまいます。
次に "foo" とその後の最初の "bar" の間にあるテキストを取り出す
最小マッチングを使ったもっと効率的な方法を示します:

    if ( /foo(.*?)bar/ ) { print "got <$1>\n" }
  got <d is under the >

=begin original

Here's another example. Let's say you'd like to match a number at the end
of a string, and you also want to keep the preceding part of the match.
So you write this:

=end original

別の例も出してみます。
文字列の最後にある数字にマッチングさせて、そのマッチングの前の部分も
保持させてみましょう。
そしてあなたは次のように書くかもしれません。

    $_ = "I have 2 numbers: 53147";
    if ( /(.*)(\d*)/ ) {                                # Wrong!
        print "Beginning is <$1>, number is <$2>.\n";
    }

=begin original

That won't work at all, because C<.*> was greedy and gobbled up the
whole string. As C<\d*> can match on an empty string the complete
regular expression matched successfully.

=end original

これは全く動作しません、なぜなら C<.*> は貪欲であり文字列全体を
飲み込んでしまいます。
C<\d*> は空の文字列にマッチングできるので正規表現は完全に正常に
マッチングします。

    Beginning is <I have 2 numbers: 53147>, number is <>.

=begin original

Here are some variants, most of which don't work:

=end original

動作しない主なバリエーションをあげておきます:

    $_ = "I have 2 numbers: 53147";
    @pats = qw{
        (.*)(\d*)
        (.*)(\d+)
        (.*?)(\d*)
        (.*?)(\d+)
        (.*)(\d+)$
        (.*?)(\d+)$
        (.*)\b(\d+)$
        (.*\D)(\d+)$
    };

    for $pat (@pats) {
        printf "%-12s ", $pat;
        if ( /$pat/ ) {
            print "<$1> <$2>\n";
        } else {
            print "FAIL\n";
        }
    }

=begin original

That will print out:

=end original

これらの結果は次のようになります:

    (.*)(\d*)    <I have 2 numbers: 53147> <>
    (.*)(\d+)    <I have 2 numbers: 5314> <7>
    (.*?)(\d*)   <> <>
    (.*?)(\d+)   <I have > <2>
    (.*)(\d+)$   <I have 2 numbers: 5314> <7>
    (.*?)(\d+)$  <I have 2 numbers: > <53147>
    (.*)\b(\d+)$ <I have 2 numbers: > <53147>
    (.*\D)(\d+)$ <I have 2 numbers: > <53147>

=begin original

As you see, this can be a bit tricky.  It's important to realize that a
regular expression is merely a set of assertions that gives a definition
of success.  There may be 0, 1, or several different ways that the
definition might succeed against a particular string.  And if there are
multiple ways it might succeed, you need to understand backtracking to
know which variety of success you will achieve.

=end original

このように、これは幾分トリッキーです。
重要なのは正規表現は成功の定義を定める主張の集合にすぎないことを
認識することです。
特定の文字列で成功となる定義には 0, 1 または複数の違ったやり方が存在します。
そしてもし成功する複数の方法が存在するのなら成功したうちのどれが目的と
するものなのかを知るためにバックトラッキングを理解しておく必要があります。

=begin original

When using look-ahead assertions and negations, this can all get even
trickier.  Imagine you'd like to find a sequence of non-digits not
followed by "123".  You might try to write that as

=end original

前読みの言明及び否定を使っている時にはこれはますますトリッキーになります。
"123" が後ろに続かない数字以外の列を探したいと考えてみてください。
あなたは次のように書くかもしれません。

    $_ = "ABC123";
    if ( /^\D*(?!123)/ ) {                # Wrong!
        print "Yup, no 123 in $_\n";
    }

=begin original

But that isn't going to match; at least, not the way you're hoping.  It
claims that there is no 123 in the string.  Here's a clearer picture of
why that pattern matches, contrary to popular expectations:

=end original

ですがこれはマッチングしません; 少なくともなってほしかったようには。
これは文字列の中に 123 がないことを要求します。
よくある予想と比較してなぜパターンがマッチングするのかのわかりやすい
説明を次に示します:

    $x = 'ABC123';
    $y = 'ABC445';

    print "1: got $1\n" if $x =~ /^(ABC)(?!123)/;
    print "2: got $1\n" if $y =~ /^(ABC)(?!123)/;

    print "3: got $1\n" if $x =~ /^(\D*)(?!123)/;
    print "4: got $1\n" if $y =~ /^(\D*)(?!123)/;

=begin original

This prints

=end original

これは次の出力となります

    2: got ABC
    3: got AB
    4: got ABC

=begin original

You might have expected test 3 to fail because it seems to a more
general purpose version of test 1.  The important difference between
them is that test 3 contains a quantifier (C<\D*>) and so can use
backtracking, whereas test 1 will not.  What's happening is
that you've asked "Is it true that at the start of $x, following 0 or more
non-digits, you have something that's not 123?"  If the pattern matcher had
let C<\D*> expand to "ABC", this would have caused the whole pattern to
fail.

=end original

テスト 3 はテスト 1 のより一般的なバージョンなのでそれが失敗すると
考えたかもしれません。
この 2 つの重要な違いは、テスト 3 には量指定子(C<\D*>)が含まれているので
テスト1ではできなかったバックトラッキングを行うことが
できるところにあります。
ここであなたは「$x のはじめで 0 個以上の非数字があるから 123 ではない
何かを得られるんじゃないの？」と聞くでしょう。
このパターンマッチングが C<\D*> を "ABC" に展開させると
これはパターン全体を失敗させることになります。

=begin original

The search engine will initially match C<\D*> with "ABC".  Then it will
try to match C<(?!123)> with "123", which fails.  But because
a quantifier (C<\D*>) has been used in the regular expression, the
search engine can backtrack and retry the match differently
in the hope of matching the complete regular expression.

=end original

探索エンジンは最初に C<\D*> を "ABC" にマッチングさせます。
そして C<(?!123)> を "123" にマッチングさせ、これは失敗します。
けれども量指定子 (C<\D*>) が正規表現の中で使われているので、探索エンジンは
バックトラックしてこの正規表現全体をマッチングさせるように異なるマッチングを
行うことができます。

=begin original

The pattern really, I<really> wants to succeed, so it uses the
standard pattern back-off-and-retry and lets C<\D*> expand to just "AB" this
time.  Now there's indeed something following "AB" that is not
"123".  It's "C123", which suffices.

=end original

このパターンは本当に、I<本当に> 成功したいので、これは標準的なパターンの
後退再試行を行い、この時に C<\D*> を "AB" のみに展開させます。
そして確かに "AB" の後ろは "123" ではありません。
"C123" は十分満たしています。

=begin original

We can deal with this by using both an assertion and a negation.
We'll say that the first part in $1 must be followed both by a digit
and by something that's not "123".  Remember that the look-aheads
are zero-width expressions--they only look, but don't consume any
of the string in their match.  So rewriting this way produces what
you'd expect; that is, case 5 will fail, but case 6 succeeds:

=end original

これは言明と否定の両方を使うことで処理することができます。
$1 の最初の部分は数字が続きかつそれは "123" ではないことを宣言します。
先読みはゼロ幅の式なのでそれがマッチングした文字列を全く消費しないことを
思い出してください。
そしてこれを必要なものを生成するように書き換えます; 
つまり、5 のケースでは失敗し、6 のケースは成功します:

    print "5: got $1\n" if $x =~ /^(\D*)(?=\d)(?!123)/;
    print "6: got $1\n" if $y =~ /^(\D*)(?=\d)(?!123)/;

    6: got ABC

=begin original

In other words, the two zero-width assertions next to each other work as though
they're ANDed together, just as you'd use any built-in assertions:  C</^$/>
matches only if you're at the beginning of the line AND the end of the
line simultaneously.  The deeper underlying truth is that juxtaposition in
regular expressions always means AND, except when you write an explicit OR
using the vertical bar.  C</ab/> means match "a" AND (then) match "b",
although the attempted matches are made at different positions because "a"
is not a zero-width assertion, but a one-width assertion.

=end original

言い換えると、このそれぞれの次にある2つのゼロ幅の言明はちょうど何か組み込みの
言明を使ったかのようにそれらがともに AND されているかのように動作します:
C</^$/> は行の始まりで且つ同時に行の終了でる時にのみマッチングします。
もっと深部での真実は、併記された正規表現は垂直線を使って明示的に OR を
書いたとき以外は常に AND を意味します。
C</ab/> は、"a" がゼロ幅の言明ではなく 1 文字幅の言明なので異なる場所で
マッチングが行われはしますが、 "a" にマッチング且つ(そして) "b" に
マッチングということを意味します。

=begin original

B<WARNING>: Particularly complicated regular expressions can take
exponential time to solve because of the immense number of possible
ways they can use backtracking to try for a match.  For example, without
internal optimizations done by the regular expression engine, this will
take a painfully long time to run:

=end original

B<警告>: 特にコンパイルされた正規表現はマッチングのために
できる限りのバックトラックを非常に多くの回数行うので
解くために指数的な時間を必要とすることがあります。
例えば、正規表現エンジンの内部で行われる最適化がなかったときには、次の評価は
尋常じゃないくらい長時間かかります:

    'aaaaaaaaaaaa' =~ /((a{0,5}){0,5})*[c]/

=begin original

And if you used C<*>'s in the internal groups instead of limiting them
to 0 through 5 matches, then it would take forever--or until you ran
out of stack space.  Moreover, these internal optimizations are not
always applicable.  For example, if you put C<{0,5}> instead of C<*>
on the external group, no current optimization is applicable, and the
match takes a long time to finish.

=end original

そしてもし内側のグループで 0 から 5 回にマッチングを制限する代わりに
C<*> を使うと、永久に、またはスタックを使い果たすまで
実行し続けることになります。
その上、これらの最適化は常にできるわけではありません。
例えば、外側のグループで C<*> の代わりに C<{0,5}> を使ったときに、現在の
最適化は適用されません; そしてマッチングが終わるまでの長い時間が
必要になります。

=begin original

A powerful tool for optimizing such beasts is what is known as an
"independent group",
which does not backtrack (see L</C<< (?>pattern) >>>).  Note also that
zero-length look-ahead/look-behind assertions will not backtrack to make
the tail match, since they are in "logical" context: only
whether they match is considered relevant.  For an example
where side-effects of look-ahead I<might> have influenced the
following match, see L</C<< (?>pattern) >>>.

=end original

そのような野獣のような最適化のためのパワフルなツールとして
知られているものに、「独立グループ」があります; これはバックトラックを
行いません (L</C<< (?>pattern) >>> を参照)。
ゼロ幅の先読み/後読みの言明も「論理的な」文脈なので末尾のマッチングを
バックトラックしません: マッチングが関連して考慮されるかどうかだけです。
先読みの言明の副作用がそれに続くマッチングに影響する I<かもしれない> 例は、
L</C<< (?>pattern) >>> を参照してください。

=head2 Version 8 Regular Expressions
X<regular expression, version 8> X<regex, version 8> X<regexp, version 8>

(バージョン 8 正規表現)

=begin original

In case you're not familiar with the "regular" Version 8 regex
routines, here are the pattern-matching rules not described above.

=end original

「通常の」バージョン 8 正規表現ルーチンに詳しくないのであれば、ここには
これまでに説明されていないパターンマッチングルールがあります。

=begin original

Any single character matches itself, unless it is a I<metacharacter>
with a special meaning described here or above.  You can cause
characters that normally function as metacharacters to be interpreted
literally by prefixing them with a "\" (e.g., "\." matches a ".", not any
character; "\\" matches a "\"). This escape mechanism is also required
for the character used as the pattern delimiter.

=end original

すべての単一の文字は、それが個々でまたはこれまでに説明した特別な意味を
持っている I<メタ文字> である場合以外は、文字それ自身にマッチングします。
文字は "\" で前置されることで通常はメタ文字としての機能を持っている文字を
リテラルとして処理させれるようになります(つまり、"\." は任意の 1 文字ではなく 
"." にマッチングするようになり、"\\" は "\" にマッチングするようになります。
このエスケープ機構はパターン区切りとして使われている文字でも必要です。

=begin original

A series of characters matches that series of characters in the target
string, so the pattern C<blurfl> would match "blurfl" in the target
string.

=end original

文字の並びは、ターゲット文字列の文字の並びにマッチングします; 従って
パターン C<blurfl> は、ターゲット文字列の "blurfl" にマッチングします。

=begin original

You can specify a character class, by enclosing a list of characters
in C<[]>, which will match any character from the list.  If the
first character after the "[" is "^", the class matches any character not
in the list.  Within a list, the "-" character specifies a
range, so that C<a-z> represents all characters between "a" and "z",
inclusive.  If you want either "-" or "]" itself to be a member of a
class, put it at the start of the list (possibly after a "^"), or
escape it with a backslash.  "-" is also taken literally when it is
at the end of the list, just before the closing "]".  (The
following all specify the same class of three characters: C<[-az]>,
C<[az-]>, and C<[a\-z]>.  All are different from C<[a-z]>, which
specifies a class containing twenty-six characters, even on EBCDIC-based
character sets.)  Also, if you try to use the character
classes C<\w>, C<\W>, C<\s>, C<\S>, C<\d>, or C<\D> as endpoints of
a range, the "-" is understood literally.

=end original

C<[]> で文字のリストを囲むことで文字クラスを指定することができます;
これはリストの中の任意の文字にマッチングします。
もし "[" の後の最初の文字が "^" だったときには、その文字クラスは
リストの中にない任意の文字にマッチングします。
リストの中では、文字 "-" は範囲を意味します; なので C<a-z> は "a" と "z" を
含めてそれらの間にあるすべての文字を表現します。
文字クラスの要素として "-" または "]" を使いたい時には、リストの先頭に
(あるいは"^"の後に)置くか、バックスラッシュを使ってエスケープします。
"-" はリストの終端、リストを閉じる "]" の直前にあったときもリテラルとして
扱われます。
(次の例はすべて同じ3文字からなる文字クラスです: C<[-az]>, C<[az-]>,
C<[a\-z]>。
これらはすべて EBCDIC ベースの文字集合であっても26文字からなる文字集合
C<[a-z]> とは異なります。) また、範囲の端点として文字クラス C<\w>, C<\W>,
C<\s>, C<\S>, C<\d>,  C<\D> を使ったときも "-" はリテラルとして
処理されます。

=begin original

Note also that the whole range idea is rather unportable between
character sets--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabetics of equal case ([a-e],
[A-E]), or digits ([0-9]).  Anything else is unsafe.  If in doubt,
spell out the character sets in full.

=end original

範囲全体というアイデアは文字集合間でポータブルではありません -- そして
結果となる文字集合では予期したものではないでしょう。
ひとつの安全策としては同じケースの英字の([a-e], [A-E]),
または数字([0-9])という範囲でのみ使うことです。
これ以外は安全ではありません。
もし信じられないのであれば文字集合を完全につづってみてください。

=begin original

Characters may be specified using a metacharacter syntax much like that
used in C: "\n" matches a newline, "\t" a tab, "\r" a carriage return,
"\f" a form feed, etc.  More generally, \I<nnn>, where I<nnn> is a string
of three octal digits, matches the character whose coded character set value
is I<nnn>.  Similarly, \xI<nn>, where I<nn> are hexadecimal digits,
matches the character whose ordinal is I<nn>. The expression \cI<x>
matches the character control-I<x>.  Finally, the "." metacharacter
matches any character except "\n" (unless you use C</s>).

=end original

文字は C でよく使われているようなメタ文字の構文を使って指定することも
できます: "\n" は改行にマッチングし、"\t" はタブに、"\r" は復帰に、
"\f" はフォームフィードにといった具合にマッチングします。
より一般的に、\I<nnn> (I<nnn> は 3 桁の 8 進数字) はその文字集合でコード値
I<nnn> の文字にマッチングします。
同じように、\xI<nn> (I<nn> は16進数字) は数値で I<nn> になる文字に
マッチングします。
式 \cI<x> は制御文字 I<x> にマッチングします。
そして最後に、"." メタ文字は (C</s> を使っていない限り) "\n" 以外の任意の
文字にマッチングします。

=begin original

You can specify a series of alternatives for a pattern using "|" to
separate them, so that C<fee|fie|foe> will match any of "fee", "fie",
or "foe" in the target string (as would C<f(e|i|o)e>).  The
first alternative includes everything from the last pattern delimiter
("(", "(?:", etc. or the beginning of the pattern) up to the first "|", and
the last alternative contains everything from the last "|" to the next
closing pattern delimiter.  That's why it's common practice to include
alternatives in parentheses: to minimize confusion about where they
start and end.

=end original

"|" を使ってパターンを区切って一連の代替を指定することもできます; なので
C<fee|fie|foe> は対象の文字列の "fee"、"fie"、または "foe" のいずれかに
(C<f(e|i|o)e> のように)マッチングします。
最初の代替には最後のパターン区切り ("(", "(?:" など、またはパターンの始まり)から
最初の "|" までのすべてが含まれ、最後の代替には最後の "|" から
次の閉じパターン区切りまでが含まれます。
通常代替をかっこの中に入れるのは、その開始位置と終了位置が少しはわかりやすく
なるようにです。

=begin original

Alternatives are tried from left to right, so the first
alternative found for which the entire expression matches, is the one that
is chosen. This means that alternatives are not necessarily greedy. For
example: when matching C<foo|foot> against "barefoot", only the "foo"
part will match, as that is the first alternative tried, and it successfully
matches the target string. (This might not seem important, but it is
important when you are capturing matched text using parentheses.)

=end original

代替は左から右へと試されます、なので最初の代替がその完全な式で
マッチングしたのならそれが選択されます。
これは代替は貪欲である必要はないということを意味します。
例えば: "barefoot" に対して C<foo|foot> をマッチングさせると、最初の代替から
試されるので、"foo" の部分がマッチングし、これは対象の文字列に対して成功で
マッチングします。
(これは重要ではないでしょうが、かっこを使ってマッチングしたテキストを
捕捉しているときには重要でしょう。)

=begin original

Also remember that "|" is interpreted as a literal within square brackets,
so if you write C<[fee|fie|foe]> you're really only matching C<[feio|]>.

=end original

また "|" は角かっこの中ではリテラルとして処理されるので、
C<[fee|fie|foe]> と書くとこれは実際には C<[feio|]> にのみマッチングします。

=begin original

Within a pattern, you may designate subpatterns for later reference
by enclosing them in parentheses, and you may refer back to the
I<n>th subpattern later in the pattern using the metacharacter
\I<n> or \gI<n>.  Subpatterns are numbered based on the left to right order
of their opening parenthesis.  A backreference matches whatever
actually matched the subpattern in the string being examined, not
the rules for that subpattern.  Therefore, C<(0|0x)\d*\s\g1\d*> will
match "0x1234 0x4321", but not "0x1234 01234", because subpattern
1 matched "0x", even though the rule C<0|0x> could potentially match
the leading 0 in the second number.

=end original

パターンにおいて、後で参照するためにかっこで括って部分パターンを指定できます;
してメタ文字 \I<n> または \gI<n> を使ってパターンの後の方で I<n> 番目の
部分パターンを参照することができます。
部分パターンはその開きかっこの左から右への順に番号づけられます。
後方参照は評価された文字列の中でその部分パターンに実際にマッチングしたものに
マッチングします。
従って、C<(0|0x)\d*\s\g1\d*> は "0x1234 0x4321" にはマッチングしますが、
"0x1234 01234" にはマッチングしません; なぜなら、C<0|0x> は二つめ数字の
先頭にある 0 にマッチングすることができるのですが、
部分パターン 1 は "0x" にマッチングするためです。

=head2 Warning on \1 Instead of $1

($1 ではなく \1 だったときの警告)

=begin original

Some people get too used to writing things like:

=end original

次のように書くことになれている人も中にはいるでしょう:

    $pattern =~ s/(\W)/\\\1/g;

=begin original

This is grandfathered (for \1 to \9) for the RHS of a substitute to avoid
shocking the
B<sed> addicts, but it's a dirty habit to get into.  That's because in
PerlThink, the righthand side of an C<s///> is a double-quoted string.  C<\1> in
the usual double-quoted string means a control-A.  The customary Unix
meaning of C<\1> is kludged in for C<s///>.  However, if you get into the habit
of doing that, you get yourself into trouble if you then add an C</e>
modifier.

=end original

(\1 から \9 については) B<sed> 中毒な人をびっくりさせないための RHS 置換の
祖先ですが、しかしこれは汚らしい癖です。
Perl においては、C<s///> の右側はダブルクォートされた文字列と
考えられるためです。
通常のダブルクォートされた文字列の中では C<\1> は control-A を意味します。
C<\1> の Unix での習慣的な意味は  C<s///> だけのその場しのぎです。
しかしながら、この癖に漬かっていると C</e> 修飾子を使ったときに
トラブルとなるでしょう。

    s/(\d+)/ \1 + 1 /eg;            # causes warning under -w

=begin original

Or if you try to do

=end original

または次のようにするかもしれません

    s/(\d+)/\1000/;

=begin original

You can't disambiguate that by saying C<\{1}000>, whereas you can fix it with
C<${1}000>.  The operation of interpolation should not be confused
with the operation of matching a backreference.  Certainly they mean two
different things on the I<left> side of the C<s///>.

=end original

これを解消するために C<\{1}000> としないでください;
ここでは C<${1}000> とするべきです。
埋め込みの処理は後方参照にマッチングさせる操作より混乱は少ないでしょう。
特に C<s///> の I<左> 側では2つの異なった意味になります。

=head2 Repeated Patterns Matching a Zero-length Substring

(ゼロ幅の部分文字列にマッチングするパターンの繰り返し)

=begin original

B<WARNING>: Difficult material (and prose) ahead.  This section needs a rewrite.

=end original

B<警告>: この先には難しい(そして無味乾燥な)内容があります。
このセクションは書き直す必要があるでしょう。

=begin original

Regular expressions provide a terse and powerful programming language.  As
with most other power tools, power comes together with the ability
to wreak havoc.

=end original

正規表現は簡潔でパワフルなプログラミング言語を提供します。
他の多くの強力なツールとともに、力は破壊の源にもなります。

=begin original

A common abuse of this power stems from the ability to make infinite
loops using regular expressions, with something as innocuous as:

=end original

この力のよくある乱用は無害な何かとともに、正規表現使った
無限ループとなります。

    'foo' =~ m{ ( o? )* }x;

=begin original

The C<o?> matches at the beginning of C<'foo'>, and since the position
in the string is not moved by the match, C<o?> would match again and again
because of the C<*> quantifier.  Another common way to create a similar cycle
is with the looping modifier C<//g>:

=end original

C<o?> は C<'foo'> の始まりにマッチングし、文字列中での位置はこの
マッチングでは動かないので、C<o?> は C<*> 量指定子によって何回も
マッチングします。
同じような繰り返しを作るもう一つのよくある形として C<//g> 修飾子を使った
ループがあります:

    @matches = ( 'foo' =~ m{ o? }xg );

=begin original

or

=end original

または

    print "match: <$&>\n" while 'foo' =~ m{ o? }xg;

=begin original

or the loop implied by split().

=end original

または split() による暗黙のループ。

=begin original

However, long experience has shown that many programming tasks may
be significantly simplified by using repeated subexpressions that
may match zero-length substrings.  Here's a simple example being:

=end original

しかしながら、長きにわたる経験からいくつかのプログラミングタスクは
ゼロ幅の部分文字列に対するマッチングを行う部分式の繰り返しで大幅に
単純にできることがわかりました。
簡単な例を挙げてみます:

    @chars = split //, $string;                  # // is not magic in split
    ($whitewashed = $string) =~ s/()/ /g; # parens avoid magic s// /

=begin original

Thus Perl allows such constructs, by I<forcefully breaking
the infinite loop>.  The rules for this are different for lower-level
loops given by the greedy quantifiers C<*+{}>, and for higher-level
ones like the C</g> modifier or split() operator.

=end original

このように Perl は I<強制的に無限ループを砕く> ことによってこういった構築を
可能にしています。
このためのルールは貪欲な量指定子 C<*+{}> によって与えられる
低レベルなループとも、C</g> 修飾子や split() 演算子による
高レベルなループとも異なります。

=begin original

The lower-level loops are I<interrupted> (that is, the loop is
broken) when Perl detects that a repeated expression matched a
zero-length substring.   Thus

=end original

低レベルなループは Perl がゼロ幅の部分文字列に対してマッチングする式が
繰り返されたことを検出すると I<中断> されます (つまり、ループは壊されます)。
従って

   m{ (?: NON_ZERO_LENGTH | ZERO_LENGTH )* }x;

=begin original

is made equivalent to

=end original

は次と等価にされます

   m{ (?: NON_ZERO_LENGTH )* (?: ZERO_LENGTH )? }x;

=begin original

For example, this program

=end original

例えば、以下のプログラムは

   #!perl -l
   "aaaaab" =~ /
     (?:
        a                 # non-zero
        |                 # or
       (?{print "hello"}) # print hello whenever this
                          #    branch is tried
       (?=(b))            # zero-width assertion
     )*  # any number of times
    /x;
   print $&;
   print $1;

=begin original

prints

=end original

以下を表示します

   hello
   aaaaa
   b

=begin original

Notice that "hello" is only printed once, as when Perl sees that the sixth
iteration of the outermost C<(?:)*> matches a zero-length string, it stops
the C<*>.

=end original

"hello" は一度だけ表示されることに注目して下さい; Perl は
一番外側の C<(?:)*> の 6 回目の繰り返しがゼロ長文字列にマッチングするのを
見るので、C<*> を止めます。

=begin original

The higher-level loops preserve an additional state between iterations:
whether the last match was zero-length.  To break the loop, the following
match after a zero-length match is prohibited to have a length of zero.
This prohibition interacts with backtracking (see L<"Backtracking">),
and so the I<second best> match is chosen if the I<best> match is of
zero length.

=end original

高レベルのループは各繰り返しの間に最後のマッチングがゼロ幅だったかどうかを
追加で保持しています。
ループを終えるために、ゼロ幅のマッチングの後のマッチングはゼロ幅と
なることを拒否します。
この禁則処理はバックトラックと相互に動作し(L<"Backtracking"> 参照)、そして
I<ベストな> マッチングがゼロ幅だったのなら I<2 番目にベストな> 
マッチングが選択されます。

=begin original

For example:

=end original

例:

    $_ = 'bar';
    s/\w??/<$&>/g;

=begin original

results in C<< <><b><><a><><r><> >>.  At each position of the string the best
match given by non-greedy C<??> is the zero-length match, and the I<second
best> match is what is matched by C<\w>.  Thus zero-length matches
alternate with one-character-long matches.

=end original

これは C<< <><b><><a><><r><> >> となります。
文字列の各位置に於いて、貪欲でない C<??> によって得られるベストな
マッチングはゼロ幅のマッチングです、
そして I<2 番目にベストな>マッチングは C<\w> によってマッチングするものです。
従ってゼロ幅のマッチングは 1 文字幅のマッチングの代替となります。

=begin original

Similarly, for repeated C<m/()/g> the second-best match is the match at the
position one notch further in the string.

=end original

同じように、C<m/()/g> の繰り返しでは文字列中の境界一つ遠い位置に 2 番目に
ベストなマッチングがマッチングします。

=begin original

The additional state of being I<matched with zero-length> is associated with
the matched string, and is reset by each assignment to pos().
Zero-length matches at the end of the previous match are ignored
during C<split>.

=end original

I<ゼロ幅にマッチングしている> という追加の状態はマッチングした文字列に
関連づけられていて、pos() に対する割り当てによってリセットされます。
前のマッチングの終端でのゼロ幅のマッチングは C<split> の間は無視されます。

=head2 Combining RE Pieces

(RE の欠片の結合)

=begin original

Each of the elementary pieces of regular expressions which were described
before (such as C<ab> or C<\Z>) could match at most one substring
at the given position of the input string.  However, in a typical regular
expression these elementary pieces are combined into more complicated
patterns using combining operators C<ST>, C<S|T>, C<S*> etc.
(in these examples C<S> and C<T> are regular subexpressions).

=end original

これまでに説明された (C<ab> や C<\Z> といった) 正規表現の基本的な欠片
それぞれは、入力文字列上の与えられた位置で多くとも1つの部分文字列に
マッチングします。
しかしながら、典型的な正規表現ではこれらの基本的な欠片は結合演算
C<ST>、C<S|T>、C<S*> 等(ここで C<S> や C<T> は正規表現の部分式)を使って
より複雑なパターンへと合成することができます。

=begin original

Such combinations can include alternatives, leading to a problem of choice:
if we match a regular expression C<a|ab> against C<"abc">, will it match
substring C<"a"> or C<"ab">?  One way to describe which substring is
actually matched is the concept of backtracking (see L<"Backtracking">).
However, this description is too low-level and makes you think
in terms of a particular implementation.

=end original

このような合成には選択の問題を導くために代替を含めることができます:
正規表現 C<a|ab> を C<"abc"> に対してマッチングさせようとしたとき、これは
C<"a"> と C<"ab"> のどちらにマッチングするのか?
実際にどちらがマッチングするのかを説明する1つの方法として、
バックトラッキングのコンセプトがあります(L<"Backtracking"> 参照)。
しかしながら、この説明は低レベルすぎて特定の実装を考えなければなりません。

=begin original

Another description starts with notions of "better"/"worse".  All the
substrings which may be matched by the given regular expression can be
sorted from the "best" match to the "worst" match, and it is the "best"
match which is chosen.  This substitutes the question of "what is chosen?"
by the question of "which matches are better, and which are worse?".

=end original

もう一つの説明は"より良い"/"より悪い"の考え方で始めます。
与えられた正規表現にマッチングするすべての部分文字列は「最良の」
マッチングから「最悪の」マッチングへとソートすることができます; そして
「最良の」マッチングが選択されます。
これは「どれが選ばれるのか?」という問いかけを「どのマッチングがより良くて、
それがより悪いのか?」という問いかけに置き換えることができます。

=begin original

Again, for elementary pieces there is no such question, since at most
one match at a given position is possible.  This section describes the
notion of better/worse for combining operators.  In the description
below C<S> and C<T> are regular subexpressions.

=end original

そして、基本的な要素ではそういった問いかけはありません;
なぜならこれらは与えられた位置で可能なマッチングは多くとも1つだからです。
このセクションでは結合演算のより良い/より悪いの考え方で説明していきます。
以下の説明では C<S> 及び C<T> は正規表現の部分式です。

=over 4

=item C<ST>

=begin original

Consider two possible matches, C<AB> and C<A'B'>, C<A> and C<A'> are
substrings which can be matched by C<S>, C<B> and C<B'> are substrings
which can be matched by C<T>.

=end original

2つの可能なマッチング、C<AB> 及び C<A'B'> を考えます;
ここで C<A> 及び C<A'> は C<S> にマッチングする部分文字列、
そして C<B> 及び C<B'> は C<T> にマッチングする部分文字列とします。

=begin original

If C<A> is a better match for C<S> than C<A'>, C<AB> is a better
match than C<A'B'>.

=end original

もし C<A> が C<S> に対して C<A'> よりも良いマッチングであれば、
C<AB> は C<A'B'> よりも良いマッチングです。

=begin original

If C<A> and C<A'> coincide: C<AB> is a better match than C<AB'> if
C<B> is a better match for C<T> than C<B'>.

=end original

もし C<A> と C<A'> が同じであれば: C<B> が C<T> に対して C<B'> よりも
良いマッチングであれば C<AB> は C<AB'> よりも良いマッチングです。

=item C<S|T>

=begin original

When C<S> can match, it is a better match than when only C<T> can match.

=end original

C<S> がマッチングできる時は C<T> のみがマッチングするよりも良い
マッチングです。

=begin original

Ordering of two matches for C<S> is the same as for C<S>.  Similar for
two matches for C<T>.

=end original

C<S> に対する2つのマッチングの順序は C<S> と同じです。
C<T> に対する2つのマッチングも同様です。

=item C<S{REPEAT_COUNT}>

=begin original

Matches as C<SSS...S> (repeated as many times as necessary).

=end original

C<SSS...S> (必要なだけ繰り返し)としてマッチングします。

=item C<S{min,max}>

=begin original

Matches as C<S{max}|S{max-1}|...|S{min+1}|S{min}>.

=end original

C<S{max}|S{max-1}|...|S{min+1}|S{min}> としてマッチングします。

=item C<S{min,max}?>

=begin original

Matches as C<S{min}|S{min+1}|...|S{max-1}|S{max}>.

=end original

C<S{min}|S{min+1}|...|S{max-1}|S{max}> としてマッチングします。

=item C<S?>, C<S*>, C<S+>

=begin original

Same as C<S{0,1}>, C<S{0,BIG_NUMBER}>, C<S{1,BIG_NUMBER}> respectively.

=end original

それぞれ C<S{0,1}>, C<S{0,BIG_NUMBER}>, C<S{1,BIG_NUMBER}> と同じです。

=item C<S??>, C<S*?>, C<S+?>

=begin original

Same as C<S{0,1}?>, C<S{0,BIG_NUMBER}?>, C<S{1,BIG_NUMBER}?> respectively.

=end original

それぞれ C<S{0,1}?>, C<S{0,BIG_NUMBER}?>, C<S{1,BIG_NUMBER}?> と同じです。

=item C<< (?>S) >>

=begin original

Matches the best match for C<S> and only that.

=end original

C<S> の最良のみマッチングします。

=item C<(?=S)>, C<(?<=S)>

=begin original

Only the best match for C<S> is considered.  (This is important only if
C<S> has capturing parentheses, and backreferences are used somewhere
else in the whole regular expression.)

=end original

C<S> の最良のマッチングのみが考慮されます。
(これは C<S> がキャプチャかっこを持っていて、そして正規表現全体の
どこかで後方参照が使われている時のみ重要です.)

=item C<(?!S)>, C<(?<!S)>

=begin original

For this grouping operator there is no need to describe the ordering, since
only whether or not C<S> can match is important.

=end original

このグループ演算子では、C<S> がマッチングできるかどうかのみが重要なので、
順序についての説明は必要ありません。

=item C<(??{ EXPR })>, C<(?PARNO)>

=begin original

The ordering is the same as for the regular expression which is
the result of EXPR, or the pattern contained by capture group PARNO.

=end original

順序は EXPR の結果の正規表現、または捕捉グループ PARNO に含まれている
パターンと同じです。

=item C<(?(condition)yes-pattern|no-pattern)>

=begin original

Recall that which of C<yes-pattern> or C<no-pattern> actually matches is
already determined.  The ordering of the matches is the same as for the
chosen subexpression.

=end original

既に決定している C<yes-pattern> または C<no-pattern> を実際に
マッチングさせます。
マッチングの順序は選択された部分式と同じです。

=back

=begin original

The above recipes describe the ordering of matches I<at a given position>.
One more rule is needed to understand how a match is determined for the
whole regular expression: a match at an earlier position is always better
than a match at a later position.

=end original

ここにあげたレシピはI<与えられた位置での>マッチングの順序について
説明しています。
正規表現全体でマッチングがどのように決定されるかを理解するためには
もう少しルールが必要です: 
より若い位置でのマッチングは後ろの方でのマッチングよりもより良いです。

=head2 Creating Custom RE Engines

(カスタム RE エンジンの作成)

=begin original

As of Perl 5.10.0, one can create custom regular expression engines.  This
is not for the faint of heart, as they have to plug in at the C level.  See
L<perlreapi> for more details.

=end original

Perl 5.10.0 から、誰でもカスタム正規表現エンジンを作成できます。
これは気弱な人向けではありません; C レベルでプラグインする必要があるからです。
さらなる詳細については L<perlreapi> を参照して下さい。

=begin original

As an alternative, overloaded constants (see L<overload>) provide a simple
way to extend the functionality of the RE engine, by substituting one
pattern for another.

=end original

代替案として、オーバーロードされた定数(L<overload> 参照)は
あるパターンを別のパターンに置き換えることで、RE エンジンの機能を
拡張する簡単な方法を提供します。

=begin original

Suppose that we want to enable a new RE escape-sequence C<\Y|> which
matches at a boundary between whitespace characters and non-whitespace
characters.  Note that C<(?=\S)(?<!\S)|(?!\S)(?<=\S)> matches exactly
at these positions, so we want to have each C<\Y|> in the place of the
more complicated version.  We can create a module C<customre> to do
this:

=end original

新しい正規表現エスケープシーケンス、空白文字と非空白文字との
境界にマッチングする C<\Y|> を作ってみることにします。
この位置には実際には C<(?=\S)(?<!\S)|(?!\S)(?<=\S)> がマッチングするので、
この複雑なバージョンを C<\Y|> で置き換えたいとします。
このために C<customre> モジュールを作ります:

    package customre;
    use overload;

    sub import {
      shift;
      die "No argument to customre::import allowed" if @_;
      overload::constant 'qr' => \&convert;
    }

    sub invalid { die "/$_[0]/: invalid escape '\\$_[1]'"}

    # We must also take care of not escaping the legitimate \\Y|
    # sequence, hence the presence of '\\' in the conversion rules.
    my %rules = ( '\\' => '\\\\',
                  'Y|' => qr/(?=\S)(?<!\S)|(?!\S)(?<=\S)/ );
    sub convert {
      my $re = shift;
      $re =~ s{
                \\ ( \\ | Y . )
              }
              { $rules{$1} or invalid($re,$1) }sgex;
      return $re;
    }

=begin original

Now C<use customre> enables the new escape in constant regular
expressions, i.e., those without any runtime variable interpolations.
As documented in L<overload>, this conversion will work only over
literal parts of regular expressions.  For C<\Y|$re\Y|> the variable
part of this regular expression needs to be converted explicitly
(but only if the special meaning of C<\Y|> should be enabled inside $re):

=end original

これで C<use customre> することで正規表現定数の中で新しいエスケープを
使うことが出来ます; すなわち、これには何の実行時変数の埋め込みもいりません。
L<overload> に書かれているように、この変換は正規表現のリテラル部分にのみ
動作します。
C<\Y|$re\Y|> であればこの正規表現の変数部分は明示的に変換する
必要があります(とはいえ $re の中でも C<\Y|> を有効にしたい時のみ)。

    use customre;
    $re = <>;
    chomp $re;
    $re = customre::convert $re;
    /\Y|$re\Y|/;

=head2 PCRE/Python Support

(PCRE/Python サポート)

=begin original

As of Perl 5.10.0, Perl supports several Python/PCRE-specific extensions
to the regex syntax. While Perl programmers are encouraged to use the
Perl-specific syntax, the following are also accepted:

=end original

Perl 5.10.0 時点では Perl は幾つかの Python/PCRE 的な正規表現構文拡張を
サポートします。
Perl プログラマはこれらの Perl としての構文を推奨しますが、以下のものも
受理されます:

=over 4

=item C<< (?PE<lt>NAMEE<gt>pattern) >>

=begin original

Define a named capture group. Equivalent to C<< (?<NAME>pattern) >>.

=end original

名前付の捕捉グループの定義。
C<< (?<NAME>pattern) >> と等価。

=item C<< (?P=NAME) >>

=begin original

Backreference to a named capture group. Equivalent to C<< \g{NAME} >>.

=end original

名前付捕捉グループへの後方参照。
C<< \g{NAME} >> と等価。

=item C<< (?P>NAME) >>

=begin original

Subroutine call to a named capture group. Equivalent to C<< (?&NAME) >>.

=end original

名前付き捕捉グループへの関数呼び出し。
C<< (?&NAME) >> と等価。

=back

=head1 BUGS

=begin original

Many regular expression constructs don't work on EBCDIC platforms.

=end original

多くの正規表現構文は EBCDIC プラットフォームでは動作しません。

=begin original

There are a number of issues with regard to case-insensitive matching
in Unicode rules.  See C<i> under L</Modifiers> above.

=end original

Unicode ルールでの大文字小文字を無視したマッチングには多くの問題が
あります。
上述の L</Modifiers> の C<i> を参照してください。

=begin original

This document varies from difficult to understand to completely
and utterly opaque.  The wandering prose riddled with jargon is
hard to fathom in several places.

=end original

この文書は、理解が困難なところから、完全かつ徹底的に不明瞭なところまで
さまざまです。
jargon に満ちたとりとめのない散文は幾つかの箇所で理解するのに
難儀ではあるでしょう。

=begin original

This document needs a rewrite that separates the tutorial content
from the reference content.

=end original

この文書はリファレンス的な内容からチュートリアル的な内容を分離して
書き直す必要があります。

=head1 SEE ALSO

L<perlrequick>.

L<perlretut>.

L<perlop/"Regexp Quote-Like Operators">.

L<perlop/"Gory details of parsing quoted constructs">.

L<perlfaq6>.

L<perlfunc/pos>.

L<perllocale>.

L<perlebcdic>.

=begin original

I<Mastering Regular Expressions> by Jeffrey Friedl, published
by O'Reilly and Associates.

=end original

O'Reilly and Associates から出版されている、Jeffrey Friedl による
I<Mastering Regular Expressions> (詳説 正規表現)

=begin meta

Translate: 山科 氷魚 (YAMASHINA Hio) <hio@hio.jp> (5.10.0)
Update: SHIRAKATA Kentaro <argrath@ub32.org> (5.10.1-)
Status: completed

=end meta

