=encoding utf8

=head1 NAME

=begin original

perlpolicy - Various and sundry policies and commitments related to the Perl core

=end original

perlpolicy - Perlコアにまつわるさまざまな方針、公約

=head1 DESCRIPTION

=begin original

This document is the master document which records all written
policies about how the Perl 5 Porters collectively develop and maintain
the Perl core.

=end original

この文書はPerl 5 Portersが共同でどうPerlのコアを開発、
維持していくかという方針をまとめたものです。
この文書(の原文)が原本であり、明文化された方針はすべてこの文書に
記録されます。

=head1 GOVERNANCE

=head2 Perl 5 Porters

=begin original

Subscribers to perl5-porters (the porters themselves) come in several flavours.
Some are quiet curious lurkers, who rarely pitch in and instead watch
the ongoing development to ensure they're forewarned of new changes or
features in Perl.  Some are representatives of vendors, who are there
to make sure that Perl continues to compile and work on their
platforms.  Some patch any reported bug that they know how to fix,
some are actively patching their pet area (threads, Win32, the regexp
-engine), while others seem to do nothing but complain.  In other
words, it's your usual mix of technical people.

=end original

perl5-porters メーリングリストの購読者(「porters」自身)にもさまざまな種類の
人がいます。
何かを知るために黙って投稿を読んでいるだけの人もいますし(彼らは、
開発に加わることはめったにないものの、開発の進捗をウオッチしてPerlの
最新の変更や機能を確実に先取りできるようにしているのです)、中にはベンダーを
代表して、Perlが自分たちのプラットフォームで確実にコンパイル・動作できるように
し続けている人もいます。
直し方を知っているバグレポートが来たらパッチをあてるという人もいますし、
自分の好きな分野(スレッド、Win32、正規表現エンジン)には積極的にパッチをあてる
という人もいます。
文句を言っているだけのように見える人もいます。
別の言い方をすれば、よくある技術者たちの集まりだということです。

=begin original

Over this group of porters presides Larry Wall.  He has the final word
in what does and does not change in any of the Perl programming languages.
These days, Larry spends most of his time on Perl 6, while Perl 5 is
shepherded by a "pumpking", a porter responsible for deciding what
goes into each release and ensuring that releases happen on a regular
basis.

=end original

このportersグループの頂点にいるのがLarry Wallです。
LarryはPerlというプログラミング言語のあらゆる部分について、変える、変えないの
最終決定権を持っています。
ただし、最近ではLarryがほとんどの時間をPerl 6に費やしているため、Perl 5の方は
「パンプキン(pumpking)」と呼ばれるporterが率いているようになっています。
パンプキンの仕事は、何をどのリリースに含めるかを決め、リリースが定期的に
行われるように手配することです。

=begin original

Larry sees Perl development along the lines of the US government:
there's the Legislature (the porters), the Executive branch (the
-pumpking), and the Supreme Court (Larry).  The legislature can
discuss and submit patches to the executive branch all they like, but
the executive branch is free to veto them.  Rarely, the Supreme Court
will side with the executive branch over the legislature, or the
legislature over the executive branch.  Mostly, however, the
legislature and the executive branch are supposed to get along and
work out their differences without impeachment or court cases.

=end original

LarryはPerlの開発をアメリカの行政機構になぞらえています。
つまり、議会(porters)が
あり、政府(パンプキン)があり、最高裁(Larry)があるというわけです。
議会は自分たちの好きなように議論し、パッチを政府に提出できますが、政府には
そのパッチを拒否する自由があります。
最高裁はよほどのことでもなければ議会より政府を
優先する立場をとったり、政府より議会を優先する立場をとったりしませんが、
ふつうは議会も政府も、訴追や裁判に訴えることなく、協力して意見の相違を
すりあわせるものとされています。

=begin original

You might sometimes see reference to Rule 1 and Rule 2.  Larry's power
as Supreme Court is expressed in The Rules:

=end original

ただし、ときにはルール1やルール2への言及を目にすることがあるかもしれません。
最高裁としてのLarryの権力を示すものとして、以下のようなルールがあります。

=over 4

=item 1

=begin original

Larry is always by definition right about how Perl should behave.
This means he has final veto power on the core functionality.

=end original

定義により、Perlがどう振る舞うべきかについては常にLarryが正しいことになって
います。
つまり、コア機能についてはLarryが最終的な拒否権を持っています。

=item 2

=begin original

Larry is allowed to change his mind about any matter at a later date,
regardless of whether he previously invoked Rule 1.

=end original

Larryはいかなることについても、あとから考えを変えることが許されています。
以前にルール1を発動させたかどうかにかかわらずです。

=back

=begin original

Got that?  Larry is always right, even when he was wrong.  It's rare
to see either Rule exercised, but they are often alluded to.

=end original

わかりましたね?
Larryは常に正しいのです。
たとえ過去の彼が間違っていたとしても。
どちらのルールも実際に発動されることはめったにありませんが、それとなく言われる
ことはままあるものです。

=head1 MAINTENANCE AND SUPPORT

(メンテナンスとサポート)

=begin original

Perl 5 is developed by a community, not a corporate entity. Every change
contributed to the Perl core is the result of a donation. Typically, these
donations are contributions of code or time by individual members of our
community. On occasion, these donations come in the form of corporate
or organizational sponsorship of a particular individual or project.

=end original

Perl 5の開発にあたっているのはコミュニティであり、企業体ではありません。
Perlコアに加えられる変更はすべからく寄付によるものです。
この寄付は、
典型的にはコミュニティに属する個人がコードや時間を提供するという形で
行われていますが、場合によっては企業、団体が特定個人ないしプロジェクトに
出資するという形をとることもあります。

=begin original

As a volunteer organization, the commitments we make are heavily dependent
on the goodwill and hard work of individuals who have no obligation to
contribute to Perl.

=end original

ボランティアの集団である私たちの活動は個人の厚意や努力に大きく依存しています。
私たちにはPerlに貢献しなければならない義務があるわけではありません。

=begin original

That being said, we value Perl's stability and security and have long
had an unwritten covenant with the broader Perl community to support
and maintain releases of Perl.

=end original

もっとも、私たちもPerlの安定性や安全性は大切に思っています。
そのため、昔から、
より広い意味でのPerlコミュニティに属するみなさんとの暗黙の了解事項として、
過去にリリースされたPerlのサポートやメンテナンスもしてきました。

=begin original

This document codifies the support and maintenance commitments that
the Perl community should expect from Perl's developers:

=end original

この文書はそのサポートやメンテナンスの約束を成文化するためのものです。
PerlコミュニティがPerlの開発陣に期待してもよいものは以下の通りです。

=over

=item *

=begin original

We "officially" support the two most recent stable release series.  5.12.x
and earlier are now out of support.  As of the release of 5.18.0, we will
"officially" end support for Perl 5.14.x, other than providing security
updates as described below.

=end original

私たちが「公式に」サポートするのは、最新の安定版とそのひとつ前の
安定版のみです。
5.12.x以前のバージョンはもうサポートの対象外です。
5.18.0がリリースされたら
「公式に」Perl 5.14.xのサポートを終了します。
ただし、後述するセキュリティ
アップデートの提供は例外とします。

=item *

=begin original

To the best of our ability, we will attempt to fix critical issues
in the two most recent stable 5.x release series.  Fixes for the
current release series take precedence over fixes for the previous
release series.

=end original

直近2つの安定版については、最善を尽くして致命的な問題の修正につとめます。
また、現行版に対する修正は過去のリリースに対する修正より優先されます。

=item *

=begin original

To the best of our ability, we will provide "critical" security patches
/ releases for any major version of Perl whose 5.x.0 release was within
the past three years.  We can only commit to providing these for the
most recent .y release in any 5.x.y series.

=end original

過去3年以内にバージョン5.x.0がリリースされたPerlに対する「致命的な」
セキュリティ問題については、最善を尽くしてパッチやリリースを提供します。
ただし、提供を約束できるのはそれぞれの5.x.yシリーズの
最新リリースについてのみです。

=item *

=begin original

We will not provide security updates or bug fixes for development
releases of Perl.

=end original

開発版のPerlに対するセキュリティアップデートやバグ修正は行いません。

=item *

=begin original

We encourage vendors to ship the most recent supported release of
Perl at the time of their code freeze.

=end original

ベンダー各位にはベンダー各位のコードフリーズ時点でサポートされている
最新のPerlを同梱してくださるようお願いします。

=item *

=begin original

As a vendor, you may have a requirement to backport security fixes
beyond our 3 year support commitment.  We can provide limited support and
advice to you as you do so and, where possible will try to apply
those patches to the relevant -maint branches in git, though we may or
may not choose to make numbered releases or "official" patches
available.  Contact us at E<lt>perl5-security-report@perl.orgE<gt>
to begin that process.

=end original

ベンダー各位には、Perlの開発陣が約束する3年間というサポート期間よりも古い
バージョンにセキュリティフィックスをあてる必要があるかもしれません。
その場合、
限定的なサポートや助言であれば提供できますし、可能ならばそのようなパッチを
関係する-maintブランチにもあてる努力はします。
ただし、バージョンをあげて
リリースをしたり「公式」パッチを提供する選択を行うかどうかはわかりません。
ご希望の方はE<lt>perl5-security-report@perl.orgE<gt>までお知らせください。

=back

=head1 BACKWARD COMPATIBILITY AND DEPRECATION

(後方互換性と廃止予定)

=begin original

Our community has a long-held belief that backward-compatibility is a
virtue, even when the functionality in question is a design flaw.

=end original

Perlコミュニティは昔から後方互換性を美徳としてきました。
たとえ問題の機能が設計上の欠陥だったとしてもです。

=begin original

We would all love to unmake some mistakes we've made over the past
decades.  Living with every design error we've ever made can lead
to painful stagnation.  Unwinding our mistakes is very, very
difficult.  Doing so without actively harming our users is
nearly impossible.

=end original

過去何十年かのうちにしでかした失敗のいくつかをなかったものにしたいとは
誰しも願うことです。
過去にしでかしたあらゆる設計ミスを甘受していては
つらい停滞期にもつながりかねません。
ただし、失敗をなかったことにするのは
本当に本当にむずかしいことですし、わざわざユーザを傷つけるようなことを
せずにすますのはほとんど不可能です。

=begin original

Lately, ignoring or actively opposing compatibility with earlier versions
of Perl has come into vogue.  Sometimes, a change is proposed which
wants to usurp syntax which previously had another meaning.  Sometimes,
a change wants to improve previously-crazy semantics.

=end original

最近は過去のバージョンとの互換性を無視したり、わざわざ互換性をなくすような
動きが流行しています。
以前は別の意味を持っていたシンタックスを無理矢理別の意味で使うような
変更が提案されることもありますし、以前のとんでもないセマンティクスを
改善しようとする変更もあります。

=begin original

Down this road lies madness.

=end original

この道の先にあるのは、狂気です。

=begin original

Requiring end-user programmers to change just a few language constructs,
even language constructs which no well-educated developer would ever
intentionally use is tantamount to saying "you should not upgrade to
a new release of Perl unless you have 100% test coverage and can do a
full manual audit of your codebase."  If we were to have tools capable of
reliably upgrading Perl source code from one version of Perl to another,
this concern could be significantly mitigated.

=end original

エンドユーザのプログラマに多少であっても言語の構築要素を変更するよう
強制するのは、たとえそれが十分な教育を受けた開発者ならわざわざ
使ったりはしないような要素であってもひどいことですし、
「コードベースのテストカバレッジ率が100%で、十分な手動チェックを
行えるのでもなければ、Perlを最新版にアップグレードすべきではない」と
言うようなものです。
特定バージョンのPerlから別のバージョンのPerlへと確実にソースコードを
アップグレードできるツールでもあればこの懸念はかなり緩和されるでしょうが、
そのようなものはまだありません。

=begin original

We want to ensure that Perl continues to grow and flourish in the coming
years and decades, but not at the expense of our user community.

=end original

私たちはこの先何年、何十年とPerlが成長、繁栄し続けるようにしたいと
思っていますが、
そのためにユーザコミュニティを犠牲にするようなことはしたくありません。

=begin original

Existing syntax and semantics should only be marked for destruction in
very limited circumstances.  If a given language feature's continued
inclusion in the language will cause significant harm to the language
or prevent us from making needed changes to the runtime, then it may
be considered for deprecation.

=end original

既存のシンタックスやセマンティクスを破壊するのはごく限られた場合のみで
あるべきです。
特定の言語機能を残し続けることで将来その言語に著しい害を及ぼす、あるいは
ランタイムに必要な変更を加えることができなくなるような場合は廃止予定の
対象になるかもしれません。

=begin original

Any language change which breaks backward-compatibility should be able to
be enabled or disabled lexically.  Unless code at a given scope declares
that it wants the new behavior, that new behavior should be disabled.
Which backward-incompatible changes are controlled implicitly by a
'use v5.x.y' is a decision which should be made by the pumpking in
consultation with the community.

=end original

後方互換性を破壊するような言語の変更はレキシカルに有効、無効を
切り替えられるようにすべきですし、特定のスコープ内で新しい挙動を
使いたいと宣言するコードがない限り、
その新しい挙動は無効にしておくべきです。
また、後方非互換な変更のうち、
'use v5.x.y'によって暗黙のうちに管理されるものをどれにするかはパンプキンが
コミュニティと相談して決めるべきことです。

=begin original

When a backward-incompatible change can't be toggled lexically, the decision
to change the language must be considered very, very carefully.  If it's
possible to move the old syntax or semantics out of the core language
and into XS-land, that XS module should be enabled by default unless
the user declares that they want a newer revision of Perl.

=end original

後方非互換な変更をレキシカルに切り替えられない場合、言語を変更する決断は
慎重に、慎重に検討しなければなりません。
古いシンタックスやセマンティクスを
言語のコアから外してXSの世界に移すことができるとしても、そのXSモジュールは、
ユーザが新しいリビジョンのPerlがほしいと宣言しない限り、デフォルトで有効に
すべきです。

=begin original

Historically, we've held ourselves to a far higher standard than
backward-compatibility -- bugward-compatibility.  Any accident of
implementation or unintentional side-effect of running some bit of code
has been considered to be a feature of the language to be defended with
the same zeal as any other feature or functionality.  No matter how
frustrating these unintentional features may be to us as we continue
to improve Perl, these unintentional features often deserve our
protection.  It is very important that existing software written in
Perl continue to work correctly.  If end-user developers have adopted a
bug as a feature, we need to treat it as such.

=end original

歴史的には、私たちは後方互換性よりもはるかに高い基準――後方バグ互換性――を
守ってきました。
実装上のどんな事故も、コードの小片を実行したときの意図せぬ
副作用も、言語の一機能として、ほかのあらゆる機能と同じ熱意を持って守るべき
ものとみなしてきたのです。
このような意図せぬ機能がPerlの改善を続けていく
うちにどんなにいらだたしいものになったとしても、多くの場合は残しておくだけの
価値はあります。
Perlで書かれた既存のソフトウェアが正しく動作し続けることは
非常に大切なことであり、エンドユーザ側の開発者がバグを一機能として認めて
しまったのであれば、私たちもそれをそのように扱う必要があるのです。

=begin original

New syntax and semantics which don't break existing language constructs
and syntax have a much lower bar.  They merely need to prove themselves
to be useful, elegant, well designed, and well tested.

=end original

新しいシンタックスやセマンティクスであっても、既存の言語要素やシンタックスを
破壊しないものについてははるかに障壁が低くなります。
役に立ち、エレガントで、
しっかり設計され、よくテストされていることを証明しさえすればよいのです。

=head2 Terminology

(用語)

=begin original

To make sure we're talking about the same thing when we discuss the removal
of features or functionality from the Perl core, we have specific definitions
for a few words and phrases.

=end original

Perlのコアから機能を削除する話をする際の認識あわせを確実にするため、
特定の意味で使っている語句がいくつかあります。

=over

=item experimental

(実験的(experimental))

=begin original

If something in the Perl core is marked as B<experimental>, we may change
its behaviour, deprecate or remove it without notice. While we'll always
do our best to smooth the transition path for users of experimental
features, you should contact the perl5-porters mailinglist if you find
an experimental feature useful and want to help shape its future.

=end original

Perlコアに入っているものでB<実験的(experimental)>と銘打たれている
ものについては、
予告なく動作を変更したり、廃止予定にしたり、削除したりすることがあります。
実験的な機能を
使っているユーザがスムーズに移行できるよういつでも最大限の努力はしますが、
もし何らかの実験的な機能について便利なので将来的にも残したいと思ったら
perl5-porters メーリングリストに投稿してください。

=item deprecated

(廃止予定(deprecated))

=begin original

If something in the Perl core is marked as B<deprecated>, we may remove it
from the core in the future, though we might not.  Generally, backward
incompatible changes will have deprecation warnings for two release
cycles before being removed, but may be removed after just one cycle if
the risk seems quite low or the benefits quite high.

=end original

Perlコアに入っているものでB<廃止予定(deprecated)>と銘打たれているものに
ついては、将来コアから削除するかもしれません(しないかもしれません)。
一般的に、後方互換性を失う変更は、削除される前に二つのリリースサイクルの間
廃止予定警告を出しますが、リスクが非常に低いか効果が非常に高い場合は、
一つのサイクルの後で削除されることがあります。

=begin original

As of
Perl 5.12, deprecated features and modules warn the user as they're used.
When a module is deprecated, it will also be made available on CPAN.
Installing it from CPAN will silence deprecation warnings for that module.

=end original

Perl 5.12以降、
廃止予定の機能やモジュールを使った場合は警告が出るようになりました。
モジュールを廃止予定にする場合、
そのモジュールはCPANから入手できるようにします。
CPANからモジュールをインストールすると
そのモジュールについての廃止予定の警告は出なくなります。

=begin original

If you use a deprecated feature or module and believe that its removal from
the Perl core would be a mistake, please contact the perl5-porters
mailinglist and plead your case.  We don't deprecate things without a good
reason, but sometimes there's a counterargument we haven't considered.
Historically, we did not distinguish between "deprecated" and "discouraged"
features.

=end original

廃止予定の機能やモジュールを使っていて、Perlコアから削除してしまうのは
間違いだと思う方は
perl5-portersのメーリングリストに投稿してください。
私たちは十分な理由がなければ廃止予定にはしませんが、
私たちが考慮しなかった反論が出てくる場合もあります。
歴史的には「廃止予定(deprecated)」の機能と
「非推奨(discouraged)」の機能の区別はありませんでした。

=item discouraged

(非推奨(discouraged))

=begin original

From time to time, we may mark language constructs and features which we
consider to have been mistakes as B<discouraged>.  Discouraged features
aren't currently candidates for removal, but
we may later deprecate them if they're found to stand in the way of a
significant improvement to the Perl core.

=end original

私たちはときどき失敗だったと思われる言語要素や機能をB<非推奨(discouraged)>と
銘打つことがあります。
非推奨の機能は現在の所削除対象にはなりませんが、
その後、Perlコアを大きく改善しようとする際に障害となることが判明した場合は
廃止予定にすることはあります。

=item removed

=begin original

Once a feature, construct or module has been marked as deprecated, we
may remove it from the Perl core.  Unsurprisingly,
we say we've B<removed> these things.  When a module is removed, it will
no longer ship with Perl, but will continue to be available on CPAN.

=end original

安定版リリースの際に一度廃止予定と銘打たれた機能や言語要素、モジュールに
ついては、Perlコアから削除することがあります。
当然ながら、そのようなものについては
B<削除(removed)>したと言います。
モジュールを削除した場合、そのモジュールは以後
Perlに同梱されることはなくなりますが、CPANからは引き続き入手できます。

=back

=head1 MAINTENANCE BRANCHES

(メンテナンスブランチ)

=over

=item *

=begin original

New releases of maint should contain as few changes as possible.
If there is any question about whether a given patch might merit
inclusion in a maint release, then it almost certainly should not
be included.

=end original

新たなメンテナンスリリースをする場合、変更はなるべく少なくすべきです。
メンテナンスリリースに含める価値があるか疑問が残るパッチについては、ほぼ
確実に含めるべきではありません。

=item *

=begin original

Portability fixes, such as changes to Configure and the files in
hints/ are acceptable. Ports of Perl to a new platform, architecture
or OS release that involve changes to the implementation are NOT
acceptable.

=end original

Configureやhintsディレクトリ内のファイルに対する修正など、移植性の問題
に対する修正は受け入れられます。
ただし、新しいプラットフォームやアーキテクチャ、
OSリリースへの移植など、実装の変更が含まれる場合は受け入れられません。

=item *

=begin original

Acceptable documentation updates are those that correct factual errors,
explain significant bugs or deficiencies in the current implementation,
or fix broken markup.

=end original

文書の更新については、事実関係の誤りを正すもの、現在の実装の
重大なバグや欠陥を説明するもの、マークアップの崩れを訂正するものは
受け入れられます。

=item *

=begin original

Patches that add new warnings or errors or deprecate features
are not acceptable.

=end original

新しい警告やエラーを追加したり、機能を廃止予定にするパッチは
受け入れられません。

=item *

=begin original

Patches that fix crashing bugs that do not otherwise change Perl's
functionality or negatively impact performance are acceptable.

=end original

クラッシュするバグを修正するパッチについては、ほかの機能を変更せず、性能を
劣化させないものは受け入れられます。

=item *

=begin original

Patches that fix CVEs or security issues are acceptable, but should
be run through the perl5-security-report@perl.org mailing list
rather than applied directly.

=end original

CVEやセキュリティの問題を修正するパッチは受け入れられますが、パッチを直接
適用するのではなく、perl5-security-report@perl.orgメーリングリストを
通してください。

=item *

=begin original

Patches that fix regressions in perl's behavior relative to previous
releases are acceptable.

=end original

過去のリリースに比べてPerlの挙動が退行した場合、それを修正するパッチは
受け入れられます。

=item *

=begin original

Updates to dual-life modules should consist of minimal patches to
fix crashing or security issues (as above).

=end original

デュアルライフモジュールの更新については、(上述の通り)クラッシュの修正や
セキュリティ問題の修正を行う最小限のパッチのみ含むようにすべきです。

=item *

=begin original

Minimal patches that fix platform-specific test failures or build or
installation issues are acceptable. When these changes are made
to dual-life modules for which CPAN is canonical, any changes
should be coordinated with the upstream author.

=end original

特定のプラットフォームに固有のテストの失敗および、
ビルドやインストールの問題を修正する最小限のパッチは受け入れられます。
ただし、CPAN版が正統とされるデュアルライフ
モジュールの場合は、どんな変更であっても上流の作者と調整しながら行うべきです。

=item *

=begin original

New versions of dual-life modules should NOT be imported into maint.
Those belong in the next stable series.

=end original

デュアルライフモジュールの新版はメンテナンスブランチにインポートすべきでは
ありません。
デュアルライフモジュールの新版は次の安定版に属するものです。

=item *

=begin original

Patches that add or remove features are not acceptable.

=end original

機能を追加、削除するパッチは受け入れられません。

=item *

=begin original

Patches that break binary compatibility are not acceptable.  (Please
talk to a pumpking.)

=end original

バイナリ互換性を破壊するパッチは受け入れられません(パンプキンに
相談してください)。

=back

=head2 Getting changes into a maint branch

(maint ブランチに変更を加える)

=begin original

Historically, only the pumpking cherry-picked changes from bleadperl
into maintperl.  This has scaling problems.  At the same time,
maintenance branches of stable versions of Perl need to be treated with
great care. To that end, as of Perl 5.12, we have a new process for
maint branches.

=end original

歴史的に、bleadperlからmaintperlへ更新のチェリーピッキングを行っていたのは
パンプキンだけでした。
これは、スケールしないという問題があります。
また、
安定版のメンテナンスブランチは細心の注意を払って取り扱う必要もあります。
そのため、Perl 5.12以降、maintブランチについては新しいやり方をとっています。

=begin original

Any committer may cherry-pick any commit from blead to a maint branch if
they send mail to perl5-porters announcing their intent to cherry-pick
a specific commit along with a rationale for doing so and at least two
other committers respond to the list giving their assent. (This policy
applies to current and former pumpkings, as well as other committers.)

=end original

bleadからmaintブランチには、コミッタなら誰でも、どのコミットでも
チェリーピックできることとしました。
ただし、コミットする人はperl5-portersにメールを送って、
特定のコミットをチェリーピックする旨と、そうする根拠を宣言し、最低でもほかに
2人のコミッタからメーリングリストに賛成の反応が寄せられることを
条件としました(この方針は
一般のコミッタだけでなく、過去、現在のパンプキンにも適用されています)。

=head1 CONTRIBUTED MODULES

(寄贈されたモジュール)

=head2 A Social Contract about Artistic Control

=begin original

What follows is a statement about artistic control, defined as the ability
of authors of packages to guide the future of their code and maintain
control over their work.  It is a recognition that authors should have
control over their work, and that it is a responsibility of the rest of
the Perl community to ensure that they retain this control.  It is an
attempt to document the standards to which we, as Perl developers, intend
to hold ourselves.  It is an attempt to write down rough guidelines about
the respect we owe each other as Perl developers.

=end original

以下はアーティスティックコントロールについての声明です。
アーティスティックコントロールは
パッケージの作者がそのコードの命運を握り、作品の管理権を維持できるように
することと定義されます。
これは、作品を管理するのは作者であるべきであり、Perlコミュニティに
属する人々には、作者がその管理権を確実に保持できるようにする責任がある、と
認めるものです。
Perl開発者が遵守すべき規範を文書化しようという試みであり、Perl開発者同士
尊重しあおうという
大まかなガイドラインを書き下ろす試みでもあります。

=begin original

This statement is not a legal contract.  This statement is not a legal
document in any way, shape, or form.  Perl is distributed under the GNU
Public License and under the Artistic License; those are the precise legal
terms.  This statement isn't about the law or licenses.  It's about
community, mutual respect, trust, and good-faith cooperation.

=end original

この声明は法的な契約ではありませんし、いかなる意味、形式でも
法律文書ではありません。
PerlはGNU Public LicenseとArtistic Licenseのもとで配布されています――
これこそが法律用語です。
この声明は法律やライセンスに関するものではありません。
この声明はコミュニティや相互尊重、信頼、誠実な協力についてのものです。

=begin original

We recognize that the Perl core, defined as the software distributed with
the heart of Perl itself, is a joint project on the part of all of us.
From time to time, a script, module, or set of modules (hereafter referred
to simply as a "module") will prove so widely useful and/or so integral to
the correct functioning of Perl itself that it should be distributed with
the Perl core.  This should never be done without the author's explicit
consent, and a clear recognition on all parts that this means the module
is being distributed under the same terms as Perl itself.  A module author
should realize that inclusion of a module into the Perl core will
necessarily mean some loss of control over it, since changes may
occasionally have to be made on short notice or for consistency with the
rest of Perl.

=end original

私たちは、Perlコア(Perl自身の本体として配布されているソフトウェアと
定義されます)は
私たち全員が関与しているジョイントプロジェクトであると認識しています。
ときどき、あるスクリプトなりモジュールなりモジュール群なり(以降は単に
「モジュール」と呼称します)が
非常に便利である、あるいはPerl自身の正しい動作に不可欠であると実証されて、
Perlコアと
ともに配布すべきだとされることもありますが、そのモジュールの作者が明示的に
同意し、
そのモジュールがPerl自身と同じライセンスで配布されることになることも明確に
認識
していない限り、そのようなことはすべきではありません。
モジュールの作者は、モジュールを
Perlのコアに含めることで必然的に支配権の一部を失うことになることは
理解すべきです。
ときには、急な通告とともに、あるいはPerlのほかの部分と一貫性を保つために、
変更が加えられることもありうるためです。

=begin original

Once a module has been included in the Perl core, however, everyone
involved in maintaining Perl should be aware that the module is still the
property of the original author unless the original author explicitly
gives up their ownership of it.  In particular:

=end original

ただし、モジュールがPerlコアに入ったからといって、原作者が明示的に所有権を
放棄しない限り、そのモジュールはまだ原作者の所有物である、ということを、
Perlのメンテナンスに関わっている人は皆、頭に入れておくべきです。
具体的に言うと、

=over

=item *

=begin original

The version of the module in the Perl core should still be considered the
work of the original author.  All patches, bug reports, and so
forth should be fed back to them.  Their development directions
should be respected whenever possible.

=end original

Perlコアに入っているバージョンもまだ原作者の作品であるとみなすべきであり、
パッチやバグレポートなどはすべて原作者にフィードバックすべきです。
原作者の
開発方針は可能な限り尊重されるべきです。

=item *

=begin original

Patches may be applied by the pumpkin holder without the explicit
cooperation of the module author if and only if they are very minor,
time-critical in some fashion (such as urgent security fixes), or if
the module author cannot be reached.  Those patches must still be
given back to the author when possible, and if the author decides on
an alternate fix in their version, that fix should be strongly
preferred unless there is a serious problem with it.  Any changes not
endorsed by the author should be marked as such, and the contributor
of the change acknowledged.

=end original

パンプキンがモジュール作者の明示的な協力なしにパッチを適用してもよいのは、
そのパッチが非常に小さなもので、（緊急のセキュリティパッチなど）何らかの事情で
最優先で処理する必要がある場合、あるいはモジュール作者と連絡がつかない
場合のみです。
このような場合も、パッチは可能ならばかならず作者に還元しなければなりません。
また、作者が自分のバージョンで別のやり方で修正を加える決断をした場合、
その修正に深刻な問題がない限り、作者側の修正を積極的に優先すべきです。
作者の承認を得ていない変更はすべからくそのように銘打つべきですし、
その変更に貢献した人を明記すべきです。

=item *

=begin original

The version of the module distributed with Perl should, whenever
possible, be the latest version of the module as distributed by the
author (the latest non-beta version in the case of public Perl
releases), although the pumpkin holder may hold off on upgrading the
version of the module distributed with Perl to the latest version
until the latest version has had sufficient testing.

=end original

Perlに同梱されているバージョンは、可能ならば常に原作者が配布している
モジュールの
最新版(Perlの公開版の場合は最新の非ベータ版)であるべきです。
ただし、最新版が十分にテストされるまでパンプキンがPerlに同梱されている
モジュールのアップグレードを先送りにすることはあります。

=back

=begin original

In other words, the author of a module should be considered to have final
say on modifications to their module whenever possible (bearing in mind
that it's expected that everyone involved will work together and arrive at
reasonable compromises when there are disagreements).

=end original

言い換えると、モジュールの修正に対する最終決定権は可能な限り常にモジュールの
作者が持っているとみなすべきです(ただし、意見の相違がある場合、関係者全員が
協力して合理的な
妥協を行うことが期待されていることは念頭に入れておいてください)。

=begin original

As a last resort, however:

=end original

ただし、最後の手段として、

=begin original

If the author's vision of the future of their module is sufficiently
different from the vision of the pumpkin holder and perl5-porters as a
whole so as to cause serious problems for Perl, the pumpkin holder may
choose to formally fork the version of the module in the Perl core from the
one maintained by the author.  This should not be done lightly and
should B<always> if at all possible be done only after direct input
from Larry.  If this is done, it must then be made explicit in the
module as distributed with the Perl core that it is a forked version and
that while it is based on the original author's work, it is no longer
maintained by them.  This must be noted in both the documentation and
in the comments in the source of the module.

=end original

作者がそのモジュールを将来どうしたいかという展望と、パンプキンやperl5-porters
全体の展望とが著しく異なり、Perlに深刻な問題を引き起こす場合、パンプキンは、
作者がメンテナンスしているバージョンからPerlコアに入れるバージョンを公式に
枝分かれさせる選択をすることもあります。
この選択は軽々しく行うべきでは
ありませんし、可能な限りB<かならず>Larryに直接指示をあおいだうえで
行うべきです。
また、そうしてしまった場合は、Perlコアに同梱するモジュールには、もとの
モジュールから分岐したバージョンであること、また原作者の作品に
基づいているものの、もう原作者がメンテナンスしているわけではないことを
明記しなければなりません。
これは文書だけでなく、モジュールのソースコードにもコメントとして
記載しなければなりません。

=begin original

Again, this should be a last resort only.  Ideally, this should never
happen, and every possible effort at cooperation and compromise should be
made before doing this.  If it does prove necessary to fork a module for
the overall health of Perl, proper credit must be given to the original
author in perpetuity and the decision should be constantly re-evaluated to
see if a remerging of the two branches is possible down the road.

=end original

繰り返しますが、これは最後の手段としてのみ使うべきです。
理想的にはこのようなことは
決して起こるべきではありませんし、こうなる前にあらゆる努力を払って協力・妥協
すべきです。
Perl全体の健全性を保つためにはどうしてもモジュールをフォークする
必要があると証明された場合も、原作者に対する適切なクレジット表示は永遠に残して
おかなければなりませんし、その決断が正しかったかを定期的に再評価し、将来的に
2つのブランチをマージしなおすことができるか確認すべきです。

=begin original

In all dealings with contributed modules, everyone maintaining Perl should
keep in mind that the code belongs to the original author, that they may
not be on perl5-porters at any given time, and that a patch is not
official unless it has been integrated into the author's copy of the
module.  To aid with this, and with points #1, #2, and #3 above, contact
information for the authors of all contributed modules should be kept with
the Perl distribution.

=end original

提供されたモジュールの扱いについて、Perlをメンテナンスするすべての人が
念頭に入れて
おくべきことは、そのコードは原作者に属するものであり、いついかなるときも
perl5-porters
のものではないこと、パッチは作者側のモジュールに取り込まれるまで
公式のものとは
みなされないことです。
そのためにも、また上記#1、#2、#3のためにも、提供されたすべての
モジュールの作者の連絡先をPerlのディストリビューション内に
保存しておくべきです。

=begin original

Finally, the Perl community as a whole recognizes that respect for
ownership of code, respect for artistic control, proper credit, and active
effort to prevent unintentional code skew or communication gaps is vital
to the health of the community and Perl itself.  Members of a community
should not normally have to resort to rules and laws to deal with each
other, and this document, although it contains rules so as to be clear, is
about an attitude and general approach.  The first step in any dispute
should be open communication, respect for opposing views, and an attempt
at a compromise.  In nearly every circumstance nothing more will be
necessary, and certainly no more drastic measure should be used until
every avenue of communication and discussion has failed.

=end original

最後になりますが、Perlコミュニティは、全体としては、コードの所有権を
尊重することや、
アーティスティックコントロールを尊重すること、適切なクレジット表示、
意図せぬひずみや
コミュニケーションギャップを防ぐ積極的な努力をすることがコミュニティと
Perl自身の
健全性を保つ重要な鍵であることを認識していますし、コミュニティのメンバーも、
ふつうはルールや法律に訴えずともお互いに付き合っていけるはずです。
意図を明確にするために
ルールが書いてありますが、この文書自体、姿勢や一般的なアプローチについての
ものです。
論争解決の第一歩はオープンなコミュニケーションであり、対立する視点に対する
敬意であり、
妥協の試みであるべきです。
ほとんどどんな場合でもそれ以上のものは必要ないでしょうし、
あらゆるコミュニケーションや議論が失敗に終わるまで、それ以上の思い切った手段は
とるべきではありません。

=head1 DOCUMENTATION

(文書)

=begin original

Perl's documentation is an important resource for our users. It's
incredibly important for Perl's documentation to be reasonably coherent
and to accurately reflect the current implementation.

=end original

Perlの文書はユーザにとって重要なリソースであり、無理のない範囲で
首尾一貫していることや、現在の実装を正確に反映していることは本当に
大切なことです。

=begin original

Just as P5P collectively maintains the codebase, we collectively
maintain the documentation.  Writing a particular bit of documentation
doesn't give an author control of the future of that documentation.
At the same time, just as source code changes should match the style
of their surrounding blocks, so should documentation changes.

=end original

P5Pが共同でコードベースをメンテナンスしているのと同様に、私たちは文書の
メンテナンスも共同で行っています。
文書の特定の一部を執筆したからといって、
著者としてその文書の将来を管理する権利が与えられるわけではありません。
また、ソースコードを変更するときは周辺ブロックのスタイルに
あわせるべきであるのと
同様に、文書を変更するときも周辺文書のスタイルにあわせるべきです。

=begin original

Examples in documentation should be illustrative of the concept
they're explaining.  Sometimes, the best way to show how a
language feature works is with a small program the reader can
run without modification.  More often, examples will consist
of a snippet of code containing only the "important" bits.
The definition of "important" varies from snippet to snippet.
Sometimes it's important to declare C<use strict> and C<use warnings>,
initialize all variables and fully catch every error condition.
More often than not, though, those things obscure the lesson
the example was intended to teach.

=end original

文書中の例は、そこで説明している概念を例証するものであるべきです。
言語機能の働きを示す最適なやり方として、読者が何の修正もなく実行できる小さな
プログラムを用いる場合もありますが、それよりも、「重要な」部分のみを含む
コード片を例とする方が多いです。
何がどう「重要」かはコード片によって
異なります。
C<use strict>やC<use warnings>を宣言し、すべての変数を初期化
して、あらゆる例外を完璧に捕捉することが重要な場合もありますが、たいていの
場合、これらは例示しようとしているレッスンの内容をわかりにくくしてしまいます。

=begin original

As Perl is developed by a global team of volunteers, our
documentation often contains spellings which look funny
to I<somebody>.  Choice of American/British/Other spellings
is left as an exercise for the author of each bit of
documentation.  When patching documentation, try to emulate
the documentation around you, rather than changing the existing
prose.

=end original

Perlはグローバルなボランティアチームによって開発されているため、私たちの
文書にはI<誰かにとっては>おかしく見えるスペルが含まれていることも
多々ありますが、アメリカ式/イギリス式/その他の綴り方の選択はその文書
の著者に任されています。
文書にパッチをあてる際には、既存の書き方を
改めるのではなく、周囲の文書のやり方にあわせるようにしてください。

=begin original

In general, documentation should describe what Perl does "now" rather
than what it used to do.  It's perfectly reasonable to include notes
in documentation about how behaviour has changed from previous releases,
but, with very few exceptions, documentation isn't "dual-life" --
it doesn't need to fully describe how all old versions used to work.

=end original

一般論として、文書にはPerlが昔どう動作したかではなく、「今」どう動作するか
書くべきです。
注意書きとして、過去のリリースからどう動作が変わったかを書くのは
完全に合理的なことですが、ごく一部の例外を除いて、文書は「デュアルライフ」
ではありませんので、過去のすべてのバージョンについてどう動いていたかを
詳細に記述する必要はありません。

=head1 STANDARDS OF CONDUCT

(行動規範)

=begin original

The official forum for the development of perl is the perl5-porters mailing
list, mentioned above, and its bugtracker at rt.perl.org.  All participants in
discussion there are expected to adhere to a standard of conduct.

=end original

perl の開発のための公式フォーラムは、前述の通り、
perl5-porters メーリングリストと、rt.perl.org にあるバグトラッカーです。
議論に参加する全ての人は行動規範を遵守することが想定されています。

=over 4

=item *

=begin original

Always be civil.

=end original

いつも礼儀正しく。

=item * 

=begin original

Heed the moderators.

=end original

モデレータに注意を傾ける。

=back

=begin original

Civility is simple:  stick to the facts while avoiding demeaning remarks and
sarcasm.  It is not enough to be factual.  You must also be civil.  Responding
in kind to incivility is not acceptable.

=end original

礼儀正しさは単純です: 事実を基にし、品位を下げる発言や皮肉はやめましょう。
事実に基づくだけでは十分ではありません。
礼儀正しくもなければなりません。
無作法に対して同じように対応することは受け入れられません。

=begin original

If the list moderators tell you that you are not being civil, carefully
consider how your words have appeared before responding in any way.  You may
protest, but repeated protest in the face of a repeatedly reaffirmed decision
is not acceptable.

=end original

もしリストのモデレータがあなたに礼儀正しくないと伝えた場合、
どのような形でも対応する前に、あなたの言葉がどのように現れたかを
慎重に考えてみてください。
抗議することはできますが、繰り返し再確認された決定に直面して
抗議を繰り返すことは受け入れられません。

=begin original

Unacceptable behavior will result in a public and clearly identified warning.
Repeated unacceptable behavior will result in removal from the mailing list.
The first removal is for one month.  Subsequent removals will double in length.
After six months with no warning, a user's ban length is reset.  Removals, like
warnings, are public.

=end original

受け入れられない振る舞いに対しては、公の場で明確に識別できる警告が
行われます。
受け入れられない振る舞いが繰り返された場合はメーリングリストから除去されます。
最初の除去は 1 ヶ月です。
引き続く除去は期間が 2 倍になります。
警告なしに 6 ヶ月経過すると、そのユーザーのバンの長さはリセットされます。
除去は、警告と同様、公の場で行われます。

=begin original

The list of moderators will be public knowledge.  At present, it is:
Aaron Crane, Andy Dougherty, Ricardo Signes, Steffen Müller.

=end original

モデレータの一覧は公開情報です。
現在の所は:
Aaron Crane, Andy Dougherty, Ricardo Signes, Steffen Müller.

=head1 CREDITS

=begin original

"Social Contract about Contributed Modules" originally by Russ Allbery E<lt>rra@stanford.eduE<gt> and the perl5-porters.

=end original

"Social Contract about Contributed Modules" originally by Russ Allbery E<lt>rra@stanford.eduE<gt> and the perl5-porters.

=begin meta

Translate: Kenichi Ishigaki
Update: SHIRAKATA Kentaro <argrath@ub32.org> (5.20.1-)
Status: completed

=end meta

