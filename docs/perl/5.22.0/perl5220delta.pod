
=encoding euc-jp

=head1 NAME

=begin original

perldelta - what is new for perl v5.22.0

=end original

perl5220delta - perl v5.22.0 での変更点

=head1 DESCRIPTION

=begin original

This document describes differences between the 5.20.0 release and the 5.22.0
release.

=end original

この文書は 5.20.0 リリースと 5.22.0 リリースの変更点を記述しています。

=begin original

If you are upgrading from an earlier release such as 5.18.0, first read
L<perl5200delta>, which describes differences between 5.18.0 and 5.20.0.

=end original

5.18.0 のような以前のリリースから更新する場合は、まず 5.18.0 と
5.20.0 の違いについて記述している L<perl5200delta> を読んでください。

=head1 Core Enhancements

(コアの拡張)

=head2 New bitwise operators

(新しいビット単位演算子)

=begin original

A new experimental facility has been added that makes the four standard
bitwise operators (C<& | ^ ~>) treat their operands consistently as
numbers, and introduces four new dotted operators (C<&. |. ^. ~.>) that
treat their operands consistently as strings.  The same applies to the
assignment variants (C<&= |= ^= &.= |.= ^.=>).

=end original

四つの標準ビット単位演算子 (C<& | ^ ~>) について、そのオペランドを
一貫して数値として扱い、これらのオペランドを一貫して文字列として扱うための
四つのドット付き演算子 (C<&. |. ^. ~.>) を導入するという、
新しい実験的機能が追加されました。
同じものは代入のバリエーション (C<&= |= ^= &.= |.= ^.=>) にも適用されます。

=begin original

To use this, enable the "bitwise" feature and disable the
"experimental::bitwise" warnings category.  See L<perlop/Bitwise String
Operators> for details.
L<[perl #123466]|https://rt.perl.org/Ticket/Display.html?id=123466>.

=end original

これを使うには、"bitwise" 機能を有効にして "experimental::bitwise"
警告カテゴリを無効にしてください。
詳しくは L<perlop/Bitwise String Operators> を参照してください。
L<[perl #123466]|https://rt.perl.org/Ticket/Display.html?id=123466>.

=head2 New double-diamond operator

(新しい二重ダイアモンド演算子)

=begin original

C<<< <<>> >>> is like C<< <> >> but uses three-argument C<open> to open
each file in C<@ARGV>.  This means that each element of C<@ARGV> will be treated
as an actual file name, and C<"|foo"> won't be treated as a pipe open.

=end original

C<<< <<>> >>> は C<< <> >> と同様ですが、C<@ARGV> のそれぞれのファイルを
開くのに 3 引数の C<open> を使います。
これは、C<@ARGV> のそれぞれの要素は実際のファイル名として扱われ、C<"|foo"> は
パイプとして扱われないということです。

=head2 New C<\b> boundaries in regular expressions

(正規表現中の新しい C<\b> 境界)

=head3 C<qr/\b{gcb}/>

=begin original

C<gcb> stands for Grapheme Cluster Boundary.  It is a Unicode property
that finds the boundary between sequences of characters that look like a
single character to a native speaker of a language.  Perl has long had
the ability to deal with these through the C<\X> regular escape
sequence.  Now, there is an alternative way of handling these.  See
L<perlrebackslash/\b{}, \b, \B{}, \B> for details.

=end original

C<gcb> は「書記素クラスタ境界」(Grapheme Cluster Boundary) のことです。
これは、その言語のネイティブな話者にとって、単一文字に見えるような
文字の並びの間の境界を見つけるための Unicode 特性です。
Perl は長い間、C<\X> エスケープシーケンスを通してこれらを扱う能力が
ありました。
これらを扱うためのもう一つの方法ができました。
詳しくは L<perlrebackslash/\b{}, \b, \B{}, \B> を参照してください。

=head3 C<qr/\b{wb}/>

=begin original

C<wb> stands for Word Boundary.  It is a Unicode property
that finds the boundary between words.  This is similar to the plain
C<\b> (without braces) but is more suitable for natural language
processing.  It knows, for example, that apostrophes can occur in the
middle of words.  See L<perlrebackslash/\b{}, \b, \B{}, \B> for details.

=end original

C<wb> は「単語境界」(Word Boundary) のことです。
これは単語の境界を探す Unicode 特性です。
これは普通の C<\b> (中かっこなし) と似ていますが、自然言語処理に
より適しています。
これは、例えばアポストロフィが単語の中に現れることがあるということを
知っています。
詳しくは L<perlrebackslash/\b{}, \b, \B{}, \B> を参照してください。

=head3 C<qr/\b{sb}/>

=begin original

C<sb> stands for Sentence Boundary.  It is a Unicode property
to aid in parsing natural language sentences.
See L<perlrebackslash/\b{}, \b, \B{}, \B> for details.

=end original

C<sb> は「文境界」(Sentence Boundary) のことです。
これは自然言語の文のパースを助ける Unicode 特性です。
詳しくは L<perlrebackslash/\b{}, \b, \B{}, \B> を参照してください。

=head2 Non-Capturing Regular Expression Flag

(非捕捉正規表現フラグ)

=begin original

Regular expressions now support a C</n> flag that disables capturing
and filling in C<$1>, C<$2>, etc inside of groups:

=end original

正規表現は、捕捉してグループ内で C<$1>, C<$2> などを埋める機能を無効にする
C</n> フラグに対応しました:

  "hello" =~ /(hi|hello)/n; # $1 is not set

=begin original

This is equivalent to putting C<?:> at the beginning of every capturing group.

=end original

これは全ての捕捉グループの前に C<?:> を置くのと等価です。

=begin original

See L<perlre/"n"> for more information.

=end original

さらなる情報については L<perlre/"n"> を参照してください。

=head2 C<use re 'strict'>

=begin original

This applies stricter syntax rules to regular expression patterns
compiled within its scope. This will hopefully alert you to typos and
other unintentional behavior that backwards-compatibility issues prevent
us from reporting in normal regular expression compilations.  Because the
behavior of this is subject to change in future Perl releases as we gain
experience, using this pragma will raise a warning of category
C<experimental::re_strict>.
See L<'strict' in re|re/'strict' mode>.

=end original

これは、このスコープ内でコンパイルされる正規表現パターンに対してより厳密な
文法規則を適用します。
これは、うまくいけば、過去互換性問題により通常の正規表現コンパイルでは
報告しないタイプミスやその他の意図しない振る舞いを警告します。
この振る舞いは、私たちが経験を積むにつれて将来の Perl リリースでは
変更されるかもしれないので、このプラグマの使用は
C<experimental::re_strict> カテゴリの警告を引き起こします。
L<'strict' in re|re/'strict' mode> を参照してください。

=head2 Unicode 7.0 (with correction) is now supported

((修正付き) Unicode 7.0 に対応しました)

=begin original

For details on what is in this release, see
L<http://www.unicode.org/versions/Unicode7.0.0/>.
The version of Unicode 7.0 that comes with Perl includes
a correction dealing with glyph shaping in Arabic
(see L<http://www.unicode.org/errata/#current_errata>).

=end original

このリリースが何かの詳細については、
L<http://www.unicode.org/versions/Unicode7.0.0/> を参照してください。
Perl に同梱されるバージョンの Unicode 7.0 はアラビア語のグリフの形の
扱いに関する修正を含んでいます
(L<http://www.unicode.org/errata/#current_errata> 参照)。

=head2 S<C<use locale>> can restrict which locale categories are affected

(S<C<use locale>> でどのロケールカテゴリが影響を受けるかを制限できます)

=begin original

It is now possible to pass a parameter to S<C<use locale>> to specify
a subset of locale categories to be locale-aware, with the remaining
ones unaffected.  See L<perllocale/The "use locale" pragma> for details.

=end original

ロケールカテゴリの一部にだけロケールを識別させ、他のものに影響を
与えないようにするために、S<C<use locale>> に引数を渡せるようになりました。
詳しくは L<perllocale/The "use locale" pragma> を参照してください。

=head2 Perl now supports POSIX 2008 locale currency additions

(Perl は POSIX 2008 ロケール通貨追加に対応しました)

=begin original

On platforms that are able to handle POSIX.1-2008, the
hash returned by
L<C<POSIX::localeconv()>|perllocale/The localeconv function>
includes the international currency fields added by that version of the
POSIX standard.  These are
C<int_n_cs_precedes>,
C<int_n_sep_by_space>,
C<int_n_sign_posn>,
C<int_p_cs_precedes>,
C<int_p_sep_by_space>,
and
C<int_p_sign_posn>.

=end original

POSIX.1-2008 を扱えるプラットフォームでは、
L<C<POSIX::localeconv()>|perllocale/The localeconv function> が返す
ハッシュにはこのバージョンの POSIX 標準で追加された国際通貨フィールドを
含んでいます。
それは
C<int_n_cs_precedes>,
C<int_n_sep_by_space>,
C<int_n_sign_posn>,
C<int_p_cs_precedes>,
C<int_p_sep_by_space>,
C<int_p_sign_posn> です。

=head2 Better heuristics on older platforms for determining locale UTF-8ness

(ロケールの UTF-8 性を決定するための古いプラットフォームでのよりよい経験則)

=begin original

On platforms that implement neither the C99 standard nor the POSIX 2001
standard, determining if the current locale is UTF-8 or not depends on
heuristics.  These are improved in this release.

=end original

C99 標準も POSIX 2001 標準も実装していないプラットフォームでは、現在の
ロケールが UTF-8 かどうかの決定は経験則に依っていませんでした。
これらはこのリリースで改善されました。

=head2 Aliasing via reference

(リファレンス経由の別名)

=begin original

Variables and subroutines can now be aliased by assigning to a reference:

=end original

変数とサブルーチンは、リファレンスに代入することで別名を
作れるようになりました:

    \$c = \$d;
    \&x = \&y;

=begin original

Aliasing can also be accomplished
by using a backslash before a C<foreach> iterator variable; this is
perhaps the most useful idiom this feature provides:

=end original

別名化は、C<foreach> 反復子変数の前にバックスラッシュを使うことでも
行えます; これはおそらくこの機能が提供する最も有用な慣用句です:

    foreach \%hash (@array_of_hash_refs) { ... }

=begin original

This feature is experimental and must be enabled via S<C<use feature
'refaliasing'>>.  It will warn unless the C<experimental::refaliasing>
warnings category is disabled.

=end original

この機能は実験的で、S<C<use feature 'refaliasing'>> で
有効にしなければなりません。
これは C<experimental::refaliasing> 警告が無効にされない限り警告されます。

=begin original

See L<perlref/Assigning to References>

=end original

L<perlref/Assigning to References> を参照してください。

=head2 C<prototype> with no arguments

(引数なしの C<prototype>)

=begin original

C<prototype()> with no arguments now infers C<$_>.
L<[perl #123514]|https://rt.perl.org/Ticket/Display.html?id=123514>.

=end original

引数なしの C<prototype()> は C<$_> を仮定するようになりました。
L<[perl #123514]|https://rt.perl.org/Ticket/Display.html?id=123514>.

=head2 New C<:const> subroutine attribute

(新しい C<:const> サブルーチン属性)

=begin original

The C<const> attribute can be applied to an anonymous subroutine.  It
causes the new sub to be executed immediately whenever one is created
(I<i.e.> when the C<sub> expression is evaluated).  Its value is captured
and used to create a new constant subroutine that is returned.  This
feature is experimental.  See L<perlsub/Constant Functions>.

=end original

C<const> 属性を無名サブルーチンに適用できるようになりました。
これは、新しいサブルーチンが作られると (つまり、C<sub> 式が評価されると)
直ちに実行されるようになります。
その値は捕捉され、新しい定数サブルーチンで使われます。
この機能は実験的です。
L<perlsub/Constant Functions> を参照してください。

=head2 C<fileno> now works on directory handles

(C<fileno> はディレクトリハンドルに対して動作するようになりました)

=begin original

When the relevant support is available in the operating system, the
C<fileno> builtin now works on directory handles, yielding the
underlying file descriptor in the same way as for filehandles. On
operating systems without such support, C<fileno> on a directory handle
continues to return the undefined value, as before, but also sets C<$!> to
indicate that the operation is not supported.

=end original

関連するサポートがオペレーティングシステムで利用可能なら、
C<fileno> 組み込み関数はディレクトリハンドルに対して直接動作するようになり、
ファイルハンドルが元となるファイル記述子を同じようになります。
このようなサポートのないオペレーティングシステムでは、ディレクトリハンドルに
対する C<fileno> は以前通り未定義値を返し続けますが、この操作に
対応していないことを示すために C<$!> を設定します。

=begin original

Currently, this uses either a C<dd_fd> member in the OS C<DIR>
structure, or a C<dirfd(3)> function as specified by POSIX.1-2008.

=end original

現在のところ、これは OS の C<DIR> 構造体の C<dd_fd> メンバと、
POSIX.1-2008 で定義されている C<dirfd(3)> 関数で使っています。

=head2 List form of pipe open implemented for Win32

(Win32 でリスト形式のパイプが実装されました)

=begin original

The list form of pipe:

=end original

リスト形式のパイプ:

  open my $fh, "-|", "program", @arguments;

=begin original

is now implemented on Win32.  It has the same limitations as C<system
LIST> on Win32, since the Win32 API doesn't accept program arguments
as a list.

=end original

が Win32 で実装されました。
これは Win32 での C<system LIST> と同じ制限があります; Win32 API は
プログラム引数をリストとして受け付けないからです。

=head2 Assignment to list repetition

(リスト繰り返しへの代入)

=begin original

C<(...) x ...> can now be used within a list that is assigned to, as long
as the left-hand side is a valid lvalue.  This allows S<C<(undef,undef,$foo)
= that_function()>> to be written as S<C<((undef)x2, $foo) = that_function()>>.

=end original

C<(...) x ...> は、左側が妥当な左辺値である限り、代入されるリストの内側で
使われるようになりました。
これにより、S<C<(undef,undef,$foo) = that_function()>> は
S<C<((undef)x2, $foo) = that_function()>> と書けるようになりました。

=head2 Infinity and NaN (not-a-number) handling improved

(無限と NaN (非数) の扱いが改良されました)

=begin original

Floating point values are able to hold the special values infinity, negative
infinity, and NaN (not-a-number).  Now we more robustly recognize and
propagate the value in computations, and on output normalize them to the strings
C<Inf>, C<-Inf>, and C<NaN>.

=end original

浮動小数点数は特別な値である無限、負の無限、NaN (非数) を
保持できるようになりました。
計算中により確実にこれらの値を認識および伝達して、出力時にはこれらを
文字列 C<Inf>, C<-Inf>, C<NaN> に正規化するようになりました。

=begin original

See also the L<POSIX> enhancements.

=end original

L<POSIX> 拡張も参照してください。

=head2 Floating point parsing has been improved

(浮動小数点のパースが改善されました)

=begin original

Parsing and printing of floating point values has been improved.

=end original

浮動小数点値のパースと表示が改善されました。

=begin original

As a completely new feature, hexadecimal floating point literals
(like C<0x1.23p-4>)  are now supported, and they can be output with
S<C<printf "%a">>. See L<perldata/Scalar value constructors> for more
details.

=end original

完全に新しい機能として、(C<0x1.23p-4> のような) 16 進小数点リテラルに対応し、
S<C<printf %a>> で表示できるようになりました。
さらなる詳細については L<perldata/Scalar value constructors> を
参照してください。

=head2 Packing infinity or not-a-number into a character is now fatal

(無限や非数を文字に pack しようとすると致命的エラーになるようになりました)

=begin original

Before, when trying to pack infinity or not-a-number into a
(signed) character, Perl would warn, and assumed you tried to
pack C<< 0xFF >>; if you gave it as an argument to C<< chr >>,
C<< U+FFFD >> was returned.

=end original

以前は、無限や非数を(符号付きの)文字に pack しようとすると、Perl は警告し、
C<< 0xFF >> を pack しようとしたかのように振る舞っていました; これを
C<< chr >> の引数に渡すと、C<< U+FFFD >> が返されました。

=begin original

But now, all such actions (C<< pack >>, C<< chr >>, and C<< print '%c' >>)
result in a fatal error.

=end original

しかし、このような操作全て (C<< pack >>, C<< chr >>, C<< print '%c' >>) は
致命的エラーになりました。

=head2 Experimental C Backtrace API

(実験的な C バックトレース API)

=begin original

Perl now supports (via a C level API) retrieving
the C level backtrace (similar to what symbolic debuggers like gdb do).

=end original

Perl は (gdb のようなシンボリックデバッガが行うのと似た) C レベルの
バックトレースの取得に (C レベルの API 経由で) 対応しました。

=begin original

The backtrace returns the stack trace of the C call frames,
with the symbol names (function names), the object names (like "perl"),
and if it can, also the source code locations (file:line).

=end original

バックトレースは、シンボル名 (関数名)、("perl" のような) オブジェクト名、
および可能ならソースコードの位置 (ファイル:行) 付きで、C 呼び出しフレームの
スタックトレースを返します。

=begin original

The supported platforms are Linux and OS X (some *BSD might work at
least partly, but they have not yet been tested).

=end original

対応しているプラットフォームは Linux と OSX です (一部の *BSD も
少なくとも部分的には動作するかも知れませんが、テストされていません)。

=begin original

The feature needs to be enabled with C<Configure -Dusecbacktrace>.

=end original

この機能は C<Configure -Dusecbacktrace> で有効にする必要があります。

=begin original

See L<perlhacktips/"C backtrace"> for more information.

=end original

さらなる情報については L<perlhacktips/"C backtrace"> を参照してください。

=head1 Security

(セキュリティ)

=head2 Perl is now compiled with C<-fstack-protector-strong> if available

(Perl は、利用可能なら C<-fstack-protector-strong> 付きでコンパイルされるようになりました)

=begin original

Perl has been compiled with the anti-stack-smashing option
C<-fstack-protector> since 5.10.1.  Now Perl uses the newer variant
called C<-fstack-protector-strong>, if available.

=end original

Perl は 5.10.1 から対スタック破壊オプション C<-fstack-protector> 付きで
コンパイルされています。
今回から、もし利用可能なら、より新しいバージョンである
C<-fstack-protector-strong> を使います。

=head2 The L<Safe> module could allow outside packages to be replaced

(L<Safe> モジュールは置き換えるための外部パッケージを許すようになりました)

=begin original

Critical bugfix: outside packages could be replaced.  L<Safe> has
been patched to 2.38 to address this.

=end original

致命的バグ修正: 外側のパッケージを置き換えることが出来ました。
L<Safe> はこれを修正するために 2.38 にパッチされました。

=head2 Perl is now always compiled with C<-D_FORTIFY_SOURCE=2> if available

(Perl は、利用可能なら常に C<-D_FORTIFY_SOURCE=2> 付きでコンパイルされるようになりました)

=begin original

The 'code hardening' option called C<_FORTIFY_SOURCE>, available in
gcc 4.*, is now always used for compiling Perl, if available.

=end original

gcc 4.* で利用可能な、C<_FORTIFY_SOURCE> と呼ばれる「コード強化」オプションは、
利用可能なら、Perl をコンパイルするのに常に使われるようになりました。

=begin original

Note that this isn't necessarily a huge step since in many platforms
the step had already been taken several years ago: many Linux
distributions (like Fedora) have been using this option for Perl,
and OS X has enforced the same for many years.

=end original

これは必ずしも大きなステップではないことに注意してください; 多くの
プラットフォームではこれは既に数年前から行われていたからです:
(Fedora のような)多くの Linux ディストリビューションは Perl に
このオプションを使っていますし、OS X は何年も前から同じことを
実施していました。

=head1 Incompatible Changes

(互換性のない変更)

=head2 Subroutine signatures moved before attributes

(サブルーチンシグネチャは属性の前に移動しました)

=begin original

The experimental sub signatures feature, as introduced in 5.20, parsed
signatures after attributes. In this release, following feedback from users
of the experimental feature, the positioning has been moved such that
signatures occur after the subroutine name (if any) and before the attribute
list (if any).

=end original

5.20 で導入された、実験的なサブルーチンシグネチャ機能は、属性の後の
シグネチャをパースしていました。
このリリースでは、実験的機能のユーザからのフィードバックに従って、
シグネチャは(あれば)サブルーチン名の後で、(あれば)属性リストの前になるように
場所が移動しました。

=head2 C<&> and C<\&> prototypes accepts only subs

(C<&> と C<\&> のプロトタイプはサブルーチンのみを受け付けます)

=begin original

The C<&> prototype character now accepts only anonymous subs (C<sub
{...}>), things beginning with C<\&>, or an explicit C<undef>.  Formerly
it erroneously also allowed references to arrays, hashes, and lists.
L<[perl #4539]|https://rt.perl.org/Ticket/Display.html?id=4539>.
L<[perl #123062]|https://rt.perl.org/Ticket/Display.html?id=123062>.
L<[perl #123062]|https://rt.perl.org/Ticket/Display.html?id=123475>.

=end original

C<&> プロトタイプ文字は、無名サブルーチン (C<sub {...}>)、C<\&> で
始まるもの、明示的な C<undef> のみを受け付けるようになりました。
以前は間違って C<undef> 及び、配列、ハッシュ、リストへのリファレンスを
受け付けていました。
L<[perl #4539]|https://rt.perl.org/Ticket/Display.html?id=4539>.
L<[perl #123062]|https://rt.perl.org/Ticket/Display.html?id=123062>.
L<[perl #123062]|https://rt.perl.org/Ticket/Display.html?id=123475>.

=begin original

In addition, the C<\&> prototype was allowing subroutine calls, whereas
now it only allows subroutines: C<&foo> is still permitted as an argument,
while C<&foo()> and C<foo()> no longer are.
L<[perl #77860]|https://rt.perl.org/Ticket/Display.html?id=77860>.

=end original

さらに、C<\&> プロトタイプはサブルーチン呼び出しを受け付けていましたが、
サブルーチンのみを受け付けるようになりました。
C<&foo> はまだ引数として認められますが、C<&foo()> と C<foo()> はもはやｓ
認められません。
L<[perl #77860]|https://rt.perl.org/Ticket/Display.html?id=77860>.

=head2 C<use encoding> is now lexical

(C<use encoding> はレキシカルになりました)

=begin original

The L<encoding> pragma's effect is now limited to lexical scope.  This
pragma is deprecated, but in the meantime, it could adversely affect
unrelated modules that are included in the same program; this change
fixes that.

=end original

L<encoding> プラグマの効果はレキシカルスコープに制限されました。
このプラグマは廃止予定ですが、それまでの間、今のところ、同じプログラムで
インクルードしている無関係のモジュールに悪影響を与えることがありました;
この変更はこれを修正します。

=head2 List slices returning empty lists

(空リストを返すリストスライス)

=begin original

List slices now return an empty list only if the original list was empty
(or if there are no indices).  Formerly, a list slice would return an empty
list if all indices fell outside the original list; now it returns a list
of C<undef> values in that case.
L<[perl #114498]|https://rt.perl.org/Ticket/Display.html?id=114498>.

=end original

空リストを返すリストスライスは、元のリストが空(またはインデックスがない)の
場合のみになりました。
以前は、全てのインデックスが元のリストの外側の時に空リストを返していました;
このような場合は C<undef> 値のリストを返すようになりました。
L<[perl #114498]|https://rt.perl.org/Ticket/Display.html?id=114498>.

=head2 C<\N{}> with a sequence of multiple spaces is now a fatal error

(複数の空白を含む C<\N{}> は致命的エラーになりました)

=begin original

E.g. S<C<\N{TOOE<nbsp>E<nbsp>MANY SPACES}>> or S<C<\N{TRAILING SPACE }>>.
This has been deprecated since v5.18.

=end original

S<C<\N{TOOE<nbsp>E<nbsp>MANY SPACES}>> や S<C<\N{TRAILING SPACE }>> などです。
これは v5.18 から廃止予定でした。

=head2 S<C<use UNIVERSAL '...'>> is now a fatal error

(S<C<use UNIVERSAL '...'>> は致命的エラーになりました)

=begin original

Importing functions from C<UNIVERSAL> has been deprecated since v5.12, and
is now a fatal error.  S<C<use UNIVERSAL>> without any arguments is still
allowed.

=end original

C<UNIVERSAL> からの関数のインポートは v5.12 から廃止予定で、今回
致命的エラーとなりました。
引数なしの S<C<use UNIVERSAL>> は許されたままです。

=head2 In double-quotish C<\cI<X>>, I<X> must now be a printable ASCII character

(ダブルクォート風の C<\cI<X>> で、I<X> は表示可能な ASCII 文字でなければならなくなりました)

=begin original

In prior releases, failure to do this raised a deprecation warning.

=end original

以前のリリースでは、これに失敗すると廃止予定警告が発生していました。

=head2 Splitting the tokens C<(?> and C<(*> in regular expressions is now a fatal compilation error.

(正規表現中の C<(?> と C<(*> の分割は致命的コンパイルエラーになりました)

=begin original

These had been deprecated since v5.18.

=end original

これは v5.18 から廃止予定でした。

=head2 C<qr/foo/x> now ignores all Unicode pattern white space

(C<qr/foo/x> は、全ての Unicode パターン空白を無視するようになりました)

=begin original

The C</x> regular expression modifier allows the pattern to contain
white space and comments (both of which are ignored) for improved
readability.  Until now, not all the white space characters that Unicode
designates for this purpose were handled.  The additional ones now
recognized are:

=end original

The C</x> 正規表現修飾子は、可読性を上げるために、パターンにスペースとコメント
(どちらも無視されます)を含むことが出来るようにします。
今まで、Unicode がこの目的のために指定した空白文字を全ては
扱っていませんでした。
追加して認識されるようになったものは:

    U+0085 NEXT LINE
    U+200E LEFT-TO-RIGHT MARK
    U+200F RIGHT-TO-LEFT MARK
    U+2028 LINE SEPARATOR
    U+2029 PARAGRAPH SEPARATOR

=begin original

The use of these characters with C</x> outside bracketed character
classes and when not preceded by a backslash has raised a deprecation
warning since v5.18.  Now they will be ignored.

=end original

これらの文字を、C</x> 付きで、大かっこ文字クラスの外側で使って、
前にバックスラッシュを置いていない場合、v5.18 から廃止予定警告が
発生していました。
これらは無視されるようになりました。

=head2 Comment lines within S<C<(?[ ])>> are now ended only by a C<\n>

(S<C<(?[ ])>> の中のコメント行は C<\n> でのみ終わるようになりました)

=begin original

S<C<(?[ ])>>  is an experimental feature, introduced in v5.18.  It operates
as if C</x> is always enabled.  But there was a difference: comment
lines (following a C<#> character) were terminated by anything matching
C<\R> which includes all vertical whitespace, such as form feeds.  For
consistency, this is now changed to match what terminates comment lines
outside S<C<(?[ ])>>, namely a C<\n> (even if escaped), which is the
same as what terminates a heredoc string and formats.

=end original

S<C<(?[ ])>> は v5.18 で導入された実験的機能です。
これは C</x> が常に有効であるかのように動作します。
しかし違いがありました: (C<#> 文字に引き続く) コメント行は、改行のような
全ての垂直空白を含む、C<\R> にマッチングするなんでもで終端されていました。
一貫性のために、S<C<(?[ ])>> の外側でコメント行を終端するものと
一致するように変更されました。
すなわち C<\n> (エスケープされていても) で、これはヒヤドキュメントと
フォーマットを終端するものと同じです。

=head2 C<(?[...])> operators now follow standard Perl precedence

(C<(?[...])> 演算子は標準 Perl の優先順位に従うようになりました)

=begin original

This experimental feature allows set operations in regular expression patterns.
Prior to this, the intersection operator had the same precedence as the other
binary operators.  Now it has higher precedence.  This could lead to different
outcomes than existing code expects (though the documentation has always noted
that this change might happen, recommending fully parenthesizing the
expressions).  See L<perlrecharclass/Extended Bracketed Character Classes>.

=end original

この実験的機能により、正規表現パターンの中で操作を設定できるようになります。
これ以前では、共通集合演算子は他の 2 項演算子と同じ優先順位を持っていました。
これはより高い優先順位を持つようになりました。
これは、既にあるコードが想定しているものと違う結果を引き起こすことがあります
(しかし文書は常にこの変更が起こるかも知れないので、式を完全にかっこで
囲むことを推奨していました)。
L<perlrecharclass/Extended Bracketed Character Classes> を参照してください。

=head2 Omitting C<%> and C<@> on hash and array names is no longer permitted

(ハッシュと配列の名前から C<%> と C<@> を省略するのはもはや許されません)

=begin original

Really old Perl let you omit the C<@> on array names and the C<%> on hash
names in some spots.  This has issued a deprecation warning since Perl
5.000, and is no longer permitted.

=end original

とても古い Perl では、一部の場所で配列名の C<@> とハッシュ名の C<%> を
省略できました。
これは Perl 5.000 から廃止予定警告が出力されていて、もはや
許されなくなりました。

=head2 C<"$!"> text is now in English outside the scope of C<use locale>

(C<"$!"> の文章は、C<"use locale"> スコープの外側では英語になりました)

=begin original

Previously, the text, unlike almost everything else, always came out
based on the current underlying locale of the program.  (Also affected
on some systems is C<"$^E">.)  For programs that are unprepared to
handle locale differences, this can cause garbage text to be displayed.
It's better to display text that is translatable via some tool than
garbage text which is much harder to figure out.

=end original

以前は、他のほとんどのものと違って、このテキストは常にプログラムの現在の
ロケールを基にして出力されていました。
(また一部のシステムで影響していたのは C<"$^E"> です)
ロケールの違いを扱う準備の出来ていないプログラムにとって、
これはごみテキストを表示することになることがありました。
何らかのツールで翻訳可能なテキストを表示する方が、何が起きているのかを
知るのが遥かに難しいごみテキストを表示するよりましです。

=head2 C<"$!"> text will be returned in UTF-8 when appropriate

(C<"$!"> の文章は、適切な場合は UTF-8 で返します)

=begin original

The stringification of C<$!> and C<$^E> will have the UTF-8 flag set
when the text is actually non-ASCII UTF-8.  This will enable programs
that are set up to be locale-aware to properly output messages in the
user's native language.  Code that needs to continue the 5.20 and
earlier behavior can do the stringification within the scopes of both
S<C<use bytes>> and S<C<use locale ":messages">>.  Within these two
scopes, no other Perl operations will
be affected by locale; only C<$!> and C<$^E> stringification.  The
C<bytes> pragma causes the UTF-8 flag to not be set, just as in previous
Perl releases.  This resolves
L<[perl #112208]|https://rt.perl.org/Ticket/Display.html?id=112208>.

=end original

C<$!> と C<$^E> の文字列化は、テキストが実際に非 ASCII UTF-8 の場合は
UTF-8 フラグを持つようになりました。
これにより、ロケールを認識して設定されるプログラムがユーザーのネイティブな
言語で適切にメッセージを出力できるようになります。
5.20 以前の振る舞いを続ける必要のあるコードは、
S<C<use bytes>> と S<C<use locale ":messages">> の両方のスコープ内で
文字列化を行えます。
これら二つのスコープの中では、その他の Perl の操作はロケールに影響を
受けません; C<$!> と C<$^E> の文字列化のみです。
C<bytes> プラグマは、以前の Perl リリースと同様、UTF-8 フラグを
設定しないようになりました。
これは L<[perl #112208]|https://rt.perl.org/Ticket/Display.html?id=112208> を
解決します。

=head2 Support for C<?PATTERN?> without explicit operator has been removed

(明示的な演算子なしの C<?PATTERN?> の対応は削除されました)

=begin original

The C<m?PATTERN?> construct, which allows matching a regex only once,
previously had an alternative form that was written directly with a question
mark delimiter, omitting the explicit C<m> operator.  This usage has produced
a deprecation warning since 5.14.0.  It is now a syntax error, so that the
question mark can be available for use in new operators.

=end original

正規表現に一回だけマッチングする C<m?PATTERN?> 構文は、以前は
疑問符デリミタで直接書かれて、明示的な C<m> 演算子を省略した
もう一つの形式がありました。
この使い方は 5.14.0 から廃止予定警告が出力されていました。
疑問符を新しい演算子のために利用可能にするために、今回これは
文法エラーになりました。

=head2 C<defined(@array)> and C<defined(%hash)> are now fatal errors

(C<defined(@array)> と C<defined(%hash)> は致命的エラーになりました)

=begin original

These have been deprecated since v5.6.1 and have raised deprecation
warnings since v5.16.

=end original

これは v5.6.1 から廃止予定で、v5.16 から廃止予定警告が出力されていました。

=head2 Using a hash or an array as a reference are now fatal errors

(ハッシュや配列をリファレンスとして使うのは致命的エラーになりました)

=begin original

For example, C<< %foo->{"bar"} >> now causes a fatal compilation
error.  These have been deprecated since before v5.8, and have raised
deprecation warnings since then.

=end original

例えば、C<< %foo->{"bar"} >> は致命的コンパイルエラーが
発生するようになりました。
これは v5.8 以前から廃止予定で、それから廃止予定警告が発生していました。

=head2 Changes to the C<*> prototype

(C<*> プロトタイプの変更)

=begin original

The C<*> character in a subroutine's prototype used to allow barewords to take
precedence over most, but not all, subroutine names.  It was never
consistent and exhibited buggy behavior.

=end original

サブルーチンプロトタイプ中の C<*> 文字は、ほとんどの(しかし全てではない)
サブルーチン名に対して優先して裸の単語を使えるようにしていました。
これは決して一貫性がなく、バグっぽい振る舞いを見せていました。

=begin original

Now it has been changed, so subroutines always take precedence over barewords,
which brings it into conformity with similarly prototyped built-in functions:

=end original

これは変更され、サブルーチンは常に裸の単語より優先されるようになりました;
これにより、似たような形のプロトタイプの組み込み関数に従った形になります。

    sub splat(*) { ... }
    sub foo { ... }
    splat(foo); # now always splat(foo())
    splat(bar); # still splat('bar') as before
    close(foo); # close(foo())
    close(bar); # close('bar')

=head1 Deprecations

(廃止予定)

=head2 Setting C<${^ENCODING}> to anything but C<undef>

(C<${^ENCODING}> の C<undef> 以外への変更)

=begin original

This variable allows Perl scripts to be written in an encoding other than
ASCII or UTF-8.  However, it affects all modules globally, leading
to wrong answers and segmentation faults.  New scripts should be written
in UTF-8; old scripts should be converted to UTF-8, which is easily done
with the L<piconv> utility.

=end original

この変数は、ASCII と UTF-8 以外の文字列で Perl スクリプトを
書けるようにしていました。
しかし、これは全てのモジュールにグローバルに影響し、間違った答えや
セグメンテーションフォルトを引き起こしていました。
新しいスクリプトは UTF-8 で書かれるべきです; 古いスクリプトは UTF-8 に
変換するべきです; これは L<piconv> ユーティリティで簡単に行えます。

=head2 Use of non-graphic characters in single-character variable names

(単一文字変数名としての非図形文字の使用)

=begin original

The syntax for single-character variable names is more lenient than
for longer variable names, allowing the one-character name to be a
punctuation character or even invisible (a non-graphic).  Perl v5.20
deprecated the ASCII-range controls as such a name.  Now, all
non-graphic characters that formerly were allowed are deprecated.
The practical effect of this occurs only when not under C<S<use
utf8>>, and affects just the C1 controls (code points 0x80 through
0xFF), NO-BREAK SPACE, and SOFT HYPHEN.

=end original

単一文字変数名の文法は、より長い変数名よりも大目に見られていて、句読点文字や
見えない(非図形)文字ですら 1 文字名として許されていました。
Perl v5.20 ではこのような名前として ASCII の範囲の制御文字を
廃止予定にしました。
今回、以前は許されていた全ての非図形文字も廃止予定となりました。
これによる実質的な影響は、C<S<use utf8>> でない場合のみで、
C1 制御文字 (符号位置 0x80 から 0xFF), NO-BREAK SPACE, SOFT HYPHEN のみに
影響します。

=head2 Inlining of C<sub () { $var }> with observable side-effects

(観測可能な副作用を持つ C<sub () { $var }> のインライン化)

=begin original

In many cases Perl makes S<C<sub () { $var }>> into an inlinable constant
subroutine, capturing the value of C<$var> at the time the C<sub> expression
is evaluated.  This can break the closure behavior in those cases where
C<$var> is subsequently modified, since the subroutine won't return the
changed value. (Note that this all only applies to anonymous subroutines
with an empty prototype (S<C<sub ()>>).)

=end original

多くの場合 Perl は S<C<sub () { $var }>> をインライン化可能な定数
サブルーチンにして、C<sub> 式が評価された時点での C<$var> の値を捕捉します。
これは、C<$var> が引き続いて変更された場合にクロージャの振る舞いを
壊すことがあります; このサブルーチンは変更された値を返さないからです。
(これは全て空プロトタイプを持つ無名サブルーチン (S<C<sub ()>>) のみに
適用されることに注意してください。)

=begin original

This usage is now deprecated in those cases where the variable could be
modified elsewhere.  Perl detects those cases and emits a deprecation
warning.  Such code will likely change in the future and stop producing a
constant.

=end original

この使い方は、変数が他の場所で変更されるかも知れないようなケースは
廃止予定です。
Perl はこのようなケースを検出して廃止予定警告を出力します。
このようなコードは将来変更されて、定数を作成しなくなります。

=begin original

If your variable is only modified in the place where it is declared, then
Perl will continue to make the sub inlinable with no warnings.

=end original

もし変数が宣言された場所でのみ変更されるなら、Perl は警告なしでサブルーチンを
インライン可能なままにします。

    sub make_constant {
        my $var = shift;
        return sub () { $var }; # fine
    }

    sub make_constant_deprecated {
        my $var;
        $var = shift;
        return sub () { $var }; # deprecated
    }

    sub make_constant_deprecated2 {
        my $var = shift;
        log_that_value($var); # could modify $var
        return sub () { $var }; # deprecated
    }

=begin original

In the second example above, detecting that C<$var> is assigned to only once
is too hard to detect.  That it happens in a spot other than the C<my>
declaration is enough for Perl to find it suspicious.

=end original

前述の 2 番目の例で、C<$var> が 1 回だけ代入されているということは検出が
とても困難です。
これが C<my> 宣言以外のところにあれば、Perl が疑わしいところを見つけるには
十分です。

=begin original

This deprecation warning happens only for a simple variable for the body of
the sub.  (A C<BEGIN> block or C<use> statement inside the sub is ignored,
because it does not become part of the sub's body.)  For more complex
cases, such as S<C<sub () { do_something() if 0; $var }>> the behavior has
changed such that inlining does not happen if the variable is modifiable
elsewhere.  Such cases should be rare.

=end original

この廃止予定警告は、サブルーチンのhんたいで単純な変数に対してのみ
発生します。
(サブルーチンの中の C<BEGIN> ブロックや C<use> 文は無視されます; これは
サブルーチンの本体ではないからです。)
S<C<sub () { do_something() if 0; $var }>> のようなより複雑なケースでは、
変数が他の場所で変更可能な場合はインライン化は起こらないように
変更されました。
このようなケースは稀のはずです。

=head2 Use of multiple C</x> regexp modifiers

(複数の C</x> 正規表現修飾子の使用)

=begin original

It is now deprecated to say something like any of the following:

=end original

次のどれかのようなものは廃止予定になりました:

    qr/foo/xx;
    /(?xax:foo)/;
    use re qw(/amxx);

=begin original

That is, now C<x> should only occur once in any string of contiguous
regular expression pattern modifiers.  We do not believe there are any
occurrences of this in all of CPAN.  This is in preparation for a future
Perl release having C</xx> permit white-space for readability in
bracketed character classes (those enclosed in square brackets:
C<[...]>).

=end original

つまり、C<x> は一つの正規表現パターン修飾子の文字列に一度だけ
現れるようになったということです。
これは CPAN のどこにも現れていないと信じています。
これは、将来の Perl リリースで C</xx> が大かっこ文字クラス
(大かっこで囲まれたもの: C<[...]>) の中で
可読性のために空白を許すようにするための準備です。

=head2 Using a NO-BREAK space in a character alias for C<\N{...}> is now deprecated

(C<\N{...}> の文字別名での NO-BREAK スペースの使用は廃止予定になりました)

=begin original

This non-graphic character is essentially indistinguishable from a
regular space, and so should not be allowed.  See
L<charnames/CUSTOM ALIASES>.

=end original

この非図形文字は本質的に通常のスペースと区別できないので、これは
認められるべきではありません。
L<charnames/CUSTOM ALIASES> を参照してください。

=head2 A literal C<"{"> should now be escaped in a pattern

(パターン中のリテラルな C<"{"> はエスケープすることになりました)

=begin original

If you want a literal left curly bracket (also called a left brace) in a
regular expression pattern, you should now escape it by either
preceding it with a backslash (C<"\{">) or enclosing it within square
brackets C<"[{]">, or by using C<\Q>; otherwise a deprecation warning
will be raised.  This was first announced as forthcoming in the v5.16
release; it will allow future extensions to the language to happen.

=end original

正規表現内でリテラルな左中かっこを使いたい場合、
バックスラッシュを前に置く (C<"\{">) か、大かっこで囲む C<"[{]"> か、
C<\Q> を使ってエスケープする必要があるようになりました; さもなければ
廃止予定警告が発生します。
これは v5.16 リリースで最初にアナウンスされていました; これにより言語の
将来の拡張が可能になります。

=head2 Making all warnings fatal is discouraged

(全ての警告を致命的にするのは非推奨です)

=begin original

The documentation for L<fatal warnings|warnings/Fatal Warnings> notes that
C<< use warnings FATAL => 'all' >> is discouraged, and provides stronger
language about the risks of fatal warnings in general.

=end original

L<fatal warnings|warnings/Fatal Warnings> の文書は、
C<< use warnings FATAL => 'all' >> が非推奨であると注意するようになり、
一般的に致命的エラーのリスクについてより強い言葉で記述されました。

=head1 Performance Enhancements

(性能改善)

=over 4

=item *

=begin original

If a method or class name is known at compile time, a hash is precomputed
to speed up run-time method lookup.  Also, compound method names like
C<SUPER::new> are parsed at compile time, to save having to parse them at
run time.

=end original

メソッドとクラスの名前がコンパイル時に分かっている場合、実行時のメソッド
検索を高速化するためにハッシュは事前計算されます。
C<SUPER::new> のようは複合メソッド名は、実行時にパースするのを避けるために、
コンパイル時にパースされます。

=item *

=begin original

Array and hash lookups (especially nested ones) that use only constants
or simple variables as keys, are now considerably faster. See
L</Internal Changes> for more details.

=end original

キーとして定数や単純な変数のみを使う配列とハッシュの検索 (特に
ネストしたもの) は、かなり高速になりました。
さらなる詳細については L</Internal Changes> を参照してください。

=item *

=begin original

C<(...)x1>, C<("constant")x0> and C<($scalar)x0> are now optimised in list
context.  If the right-hand argument is a constant 1, the repetition
operator disappears.  If the right-hand argument is a constant 0, the whole
expression is optimised to the empty list, so long as the left-hand
argument is a simple scalar or constant.  (That is, C<(foo())x0> is not
subject to this optimisation.)

=end original

C<(...)x1>, C<("constant")x0>, C<($scalar)x0> はリストコンテキストで
最適されるようになりました。
右側の引数が定数 1 なら、繰り返し演算子は削除されます。
右側の引数が定数 0 で、左側の引数が単純なスカラか定数なら、式全体が空リストに
最適化されます。
(つまり、C<(foo())x0> はこの最適化の対象ではありません。)

=item *

=begin original

C<substr> assignment is now optimised into 4-argument C<substr> at the end
of a subroutine (or as the argument to C<return>).  Previously, this
optimisation only happened in void context.

=end original

サブルーチンの末尾での (または C<return> の引数としての) C<substr> 代入は
4 引数の C<substr> に最適化されるようになりました。
以前は、この最適化は無効コンテキストでのみ起きていました。

=item *

=begin original

In C<"\L...">, C<"\Q...">, etc., the extra "stringify" op is now optimised
away, making these just as fast as C<lcfirst>, C<quotemeta>, etc.

=end original

C<"\L...">, C<"\Q...">, などで、余分な「文字列化」op は最適化で削除され、
C<lcfirst>, C<quotemeta> などと同じぐらい高速になりました。

=item *

=begin original

Assignment to an empty list is now sometimes faster.  In particular, it
never calls C<FETCH> on tied arguments on the right-hand side, whereas it
used to sometimes.

=end original

空リストへの代入は時々高速になりました。
特に、右側の tie 引数への C<FETCH> は、以前は時々行っていましたが、
全く行わなくなりました。

=item *

=begin original

There is a performance improvement of up to 20% when C<length> is applied to
a non-magical, non-tied string, and either C<use bytes> is in scope or the
string doesn't use UTF-8 internally.

=end original

C<length> が非マジカル非 tie 文字列に適用され、
C<use bytes> スコープ内か、文字列が内部で UTF-8 を使っていないとき、
最大 20% 性能が改善しました。

=item *

=begin original

On most perl builds with 64-bit integers, memory usage for non-magical,
non-tied scalars containing only a floating point value has been reduced
by between 8 and 32 bytes, depending on OS.

=end original

64-bit 整数でビルドされた perl のほとんどで、浮動小数点数のみを保持する
非マジカル非 tie スカラのメモリ使用量は、OS に依存して、8 から 32 バイト
削減されました。

=item *

=begin original

In C<@array = split>, the assignment can be optimized away, so that C<split>
writes directly to the array.  This optimisation was happening only for
package arrays other than C<@_>, and only sometimes.  Now this
optimisation happens almost all the time.

=end original

C<@array = split> では、代入は最適化されて省略され、C<split> は直接配列に
書き込みます。
この最適化は C<@_> 以外のパッケージ変数のみで起こり、時々にだけ
起こっていました。
この最適化はほとんどいつも起きるようになりました。

=item *

=begin original

C<join> is now subject to constant folding.  So for example
S<C<join "-", "a", "b">> is converted at compile-time to C<"a-b">.
Moreover, C<join> with a scalar or constant for the separator and a
single-item list to join is simplified to a stringification, and the
separator doesn't even get evaluated.

=end original

C<join> は定数畳み込みをしようとするようになりました。
それで、例えば S<C<join "-", "a", "b">> はコンパイル時に C<"a-b"> に
変換されます。
さらに、セパレータがスカラまたは定数で、単一アイテムのリストに対する
C<join> は文字列化に単純化され、
セパレータは評価すらされません。

=item *

=begin original

C<qq(@array)> is implemented using two ops: a stringify op and a join op.
If the C<qq> contains nothing but a single array, the stringification is
optimized away.

=end original

C<qq(@array)> は二つの op を使って実装されています: 文字列化 op と
join op です。
C<qq> に単一の配列以外のものが含まれていない場合、文字列化は最適化されて
省略されるようになりました。

=item *

=begin original

S<C<our $var>> and S<C<our($s,@a,%h)>> in void context are no longer evaluated at
run time.  Even a whole sequence of S<C<our $foo;>> statements will simply be
skipped over.  The same applies to C<state> variables.

=end original

無効コンテキストでの S<C<our $var>> と S<C<our($s,@a,%h)>> はもはや実行時に
評価されなくなりました。
S<C<our $foo;>> 文の並び全体が単に読み飛ばされます。
これは C<state> 変数にも適用されます。

=item *

=begin original

Many internal functions have been refactored to improve performance and reduce
their memory footprints.
L<[perl #121436]|https://rt.perl.org/Ticket/Display.html?id=121436>
L<[perl #121906]|https://rt.perl.org/Ticket/Display.html?id=121906>
L<[perl #121969]|https://rt.perl.org/Ticket/Display.html?id=121969>

=end original

多くの内部変数が、性能向上とメモリフットプリントの削減のために
リファクタリングされました。
L<[perl #121436]|https://rt.perl.org/Ticket/Display.html?id=121436>
L<[perl #121906]|https://rt.perl.org/Ticket/Display.html?id=121906>
L<[perl #121969]|https://rt.perl.org/Ticket/Display.html?id=121969>

=item *

=begin original

C<-T> and C<-B> filetests will return sooner when an empty file is detected.
L<[perl #121489]|https://rt.perl.org/Ticket/Display.html?id=121489>

=end original

ファイルテスト C<-T> と C<-B> は、空ファイルを検出したときにより早く
返るようになりました。
L<[perl #121489]|https://rt.perl.org/Ticket/Display.html?id=121489>

=item *

=begin original

Hash lookups where the key is a constant are faster.

=end original

キーが定数であるハッシュ検索が高速化されました。

=item *

=begin original

Subroutines with an empty prototype and a body containing just C<undef> are now
eligible for inlining.
L<[perl #122728]|https://rt.perl.org/Ticket/Display.html?id=122728>

=end original

空のプロトタイプを持ち、内容として C<undef> のみを含むサブルーチンは
インライン化の対象になりました。
L<[perl #122728]|https://rt.perl.org/Ticket/Display.html?id=122728>

=item *

=begin original

Subroutines in packages no longer need to be stored in typeglobs:
declaring a subroutine will now put a simple sub reference directly in the
stash if possible, saving memory.  The typeglob still notionally exists,
so accessing it will cause the stash entry to be upgraded to a typeglob
(I<i.e.> this is just an internal implementation detail).
This optimization does not currently apply to XSUBs or exported
subroutines, and method calls will undo it, since they cache things in
typeglobs.
L<[perl #120441]|https://rt.perl.org/Ticket/Display.html?id=120441>

=end original

パッケージ内のサブルーチンは、もはや型グロブに保管される必要はなくなりました:
サブルーチンの宣言は、可能なら単純なサブルーチンリファレンスを直接
スタッシュに入れることで、メモリを節約します。
型グロブは概念上はまだ存在しているので、これにアクセスするとスタッシュ
エントリは型グロブに昇格します(つまりこれは単に内部実装の詳細です)。
この最適化は今のところ XSUB やエクスポートされたサブルーチンには
適用されず、メソッド呼び出しはこれを取り消します; これらは型グロブに
キャッシュするからです。
L<[perl #120441]|https://rt.perl.org/Ticket/Display.html?id=120441>

=item *

=begin original

The functions C<utf8::native_to_unicode()> and C<utf8::unicode_to_native()>
(see L<utf8>) are now optimized out on ASCII platforms.  There is now not even
a minimal performance hit in writing code portable between ASCII and EBCDIC
platforms.

=end original

C<utf8::native_to_unicode()> と C<utf8::unicode_to_native()> 関数
(L<utf8> 参照) は ASCII プラットフォームでは最適化されるようになりました。
これにより、ASCII と EBCDIC のプラットフォーム間で移植性のあるコードでも
最小限の性能の影響もなくなりました。

=item *

=begin original

Win32 Perl uses 8 KB less of per-process memory than before for every perl
process, because some data is now memory mapped from disk and shared
between processes from the same perl binary.

=end original

Win32 Perl は、このバージョンの全ての perl プロセスで、プロセス当たり 8KB
メモリ消費が減りました; 一部のデータはメモリをディスクからマッピングして
同じ perl バイナリからの perl プロセス間で共有されるようになったからです。

=back

=head1 Modules and Pragmata

(モジュールとプラグマ)

=head2 Updated Modules and Pragmata

(更新されたモジュールとプラグマ)

=begin original

Many of the libraries distributed with perl have been upgraded since v5.20.0.
For a complete list of changes, run:

=end original

perl と共に配布されているライブラリの多くが v5.20.0 から更新されました。
変更の完全な一覧を見るには、以下を実行してください:

  corelist --diff 5.20.0 5.22.0

=begin original

You can substitute your favorite version in place of 5.20.0, too.

=end original

5.20.0 の部分を好みのバージョンに置き換えることも出来ます。

=begin original

Some notable changes include:

=end original

注目するべき変更には次のようなものがあります:

=over 4

=item *

=begin original

L<Archive::Tar> has been upgraded to version 2.04.

=end original

L<Archive::Tar> はバージョン 2.04 に更新されました。

=begin original

Tests can now be run in parallel.

=end original

テストが並列に実行できるようになりました。

=item *

=begin original

L<attributes> has been upgraded to version 0.27.

=end original

L<attributes> はバージョン 0.27 に更新されました。

=begin original

The usage of C<memEQs> in the XS has been corrected.
L<[perl #122701]|https://rt.perl.org/Ticket/Display.html?id=122701>

=end original

XS での C<memEQs> の使用法が修正されました。
L<[perl #122701]|https://rt.perl.org/Ticket/Display.html?id=122701>

=begin original

Avoid reading beyond the end of a buffer. [perl #122629]

=end original

バッファの末尾を越えて読み込まなくなりました。
[perl #122629]

=item *

=begin original

L<B> has been upgraded to version 1.58.

=end original

L<B> はバージョン 1.58 に更新されました。

=begin original

It provides a new C<B::safename> function, based on the existing
C<< B::GV->SAFENAME >>, that converts C<\cOPEN> to C<^OPEN>.

=end original

既にある C<< B::GV->SAFENAME >> を基にした新しい C<B::safename> 関数が
提供されます; これは C<\cOPEN> を C<^OPEN> に変換します。

=begin original

Nulled COPs are now of class C<B::COP>, rather than C<B::OP>.

=end original

Null の COP は C<B::OP> ではなく C<B::COP> クラスになりました。

=begin original

C<B::REGEXP> objects now provide a C<qr_anoncv> method for accessing the
implicit CV associated with C<qr//> things containing code blocks, and a
C<compflags> method that returns the pertinent flags originating from the
C<qr//blahblah> op.

=end original

C<B::REGEXP> オブジェクトは、コードブロックを含む C<qr//> と関連する
暗黙の CV にアクセスするための C<qr_anoncv> メソッドと、
C<qr//blahblah> op を起源とする関連するフラグを返す C<compflags> メソッドを
提供するようになりました。

=begin original

C<B::PMOP> now provides a C<pmregexp> method returning a C<B::REGEXP> object.
Two new classes, C<B::PADNAME> and C<B::PADNAMELIST>, have been introduced.

=end original

C<B::PMOP> は C<B::REGEXP> オブジェクトを返す C<pmregexp> メソッドを
提供するようになりました。
二つの新しいクラス C<B::PADNAME> と C<B::PADNAMELIST> が導入されました。

=begin original

A bug where, after an ithread creation or psuedofork, special/immortal SVs in
the child ithread/psuedoprocess did not have the correct class of
C<B::SPECIAL>, has been fixed.
The C<id> and C<outid> PADLIST methods have been added.

=end original

ithread の作成や疑似 fork の後、子 ithread/疑似スレッドの
特殊/非揮発性 SV は C<B::SPECIAL> の正しいクラスを持っていなかったという
バグが修正されました。
C<id> と C<outid> の PADLIST メソッドが追加されました。

=item *

=begin original

L<B::Concise> has been upgraded to version 0.996.

=end original

L<B::Concise> はバージョン 0.996 に更新されました。

=begin original

Null ops that are part of the execution chain are now given sequence
numbers.

=end original

実行チェーンの一部の null op はシーケンス番号を与えられるようになりました。

=begin original

Private flags for nulled ops are now dumped with mnemonics as they would be
for the non-nulled counterparts.

=end original

null の op のためのプライベートフラグは、非 null の対応物と同様
ニーモニックにダンプされるようになりました。

=item *

=begin original

L<B::Deparse> has been upgraded to version 1.35.

=end original

L<B::Deparse> はバージョン 1.35 に更新されました。

=begin original

It now deparses C<+sub : attr { ... }> correctly at the start of a
statement.  Without the initial C<+>, C<sub> would be a statement label.

=end original

文の先頭での C<+sub : attr { ... }> を正しく
逆パースできるようになりました。
先頭の C<+> がない場合、C<sub> は文ラベルです。

=begin original

C<BEGIN> blocks are now emitted in the right place most of the time, but
the change unfortunately introduced a regression, in that C<BEGIN> blocks
occurring just before the end of the enclosing block may appear below it
instead.

=end original

C<BEGIN> ブロックはほとんどの場合正しい場所に出力されるようになりましたが、
残念ながらこの変更により退行が導入され、ブロックの終了の直前に
C<BEGIN> ブロックがあると、ブロックの後に現れることがあります。

=begin original

C<B::Deparse> no longer puts erroneous C<local> here and there, such as for
C<LIST = tr/a//d>.  [perl #119815]

=end original

C<B::Deparse> は C<LIST = tr/a//d> などで、もはや間違った C<local> を
出力しなくなりました。
[perl #119815]

=begin original

Adjacent C<use> statements are no longer accidentally nested if one
contains a C<do> block.  [perl #115066]

=end original

隣接した C<use> 文は、C<do> ブロックを含んでいても、もはや間違って
ネストされなくなりました。
[perl #115066]

=begin original

Parenthesised arrays in lists passed to C<\> are now correctly deparsed
with parentheses (I<e.g.>, C<\(@a, (@b), @c)> now retains the parentheses
around @b), thus preserving the flattening behavior of referenced
parenthesised arrays.  Formerly, it only worked for one array: C<\(@a)>.

=end original

C<\> に渡されたリスト中のかっこ付きの配列は、正しくかっこ付きで
逆パースされるようになり (つまり、C<\(@a, (@b), @c)> は @b の周りの
かっこを残したままになります)、かっこ付き配列のリファレンスのフラット化の
振る舞いが保存されるようになりました。
以前は、一つの配列だけで動作していました: C<\(@a)>。

=begin original

C<local our> is now deparsed correctly, with the C<our> included.

=end original

C<local our> は、C<our> を含んで正しく逆パース出来るようになりました。

=begin original

C<for($foo; !$bar; $baz) {...}> was deparsed without the C<!> (or C<not>).
This has been fixed.

=end original

C<for($foo; !$bar; $baz) {...}> は C<!> (または C<not>) なしで
逆パースされていました。
これは修正されました。

=begin original

Core keywords that conflict with lexical subroutines are now deparsed with
the C<CORE::> prefix.

=end original

レキシカルサブルーチンと競合するコアキーワードは C<CORE::> 接頭辞付きで
逆パースされるようになりました。

=begin original

C<foreach state $x (...) {...}> now deparses correctly with C<state> and
not C<my>.

=end original

C<foreach state $x (...) {...}> は C<my> ではなく C<state> に正しく
逆パースされるようになりました。

=begin original

C<our @array = split(...)> now deparses correctly with C<our> in those
cases where the assignment is optimized away.

=end original

C<our @array = split(...)> は、代入が最適化で消えてしまう場合でも
C<our> 付きで正しく逆パースされるようになりました。

=begin original

It now deparses C<our(I<LIST>)> and typed lexical (C<my Dog $spot>) correctly.

=end original

C<our(I<LIST>)> と型付きのレキシカル (C<my Dog $spot>) は正しく
逆パースされるようになりました。

=begin original

Deparse C<$#_> as that instead of as C<$#{_}>.
L<[perl #123947]|https://rt.perl.org/Ticket/Display.html?id=123947>

=end original

C<$#{_}> としてではなく C<$#_> を逆パースするようになりました。
L<[perl #123947]|https://rt.perl.org/Ticket/Display.html?id=123947>

=begin original

BEGIN blocks at the end of the enclosing scope are now deparsed in the
right place.  [perl #77452]

=end original

スコープの終わりにある BEGIN ブロックは正しい位置で
逆パースされるようになりました。
[perl #77452]

=begin original

BEGIN blocks were sometimes deparsed as __ANON__, but are now always called
BEGIN.

=end original

BEGIN は時々 __ANON__ として逆パースされていましたが、常に BEGIN を
呼び出すようになりました。

=begin original

Lexical subroutines are now fully deparsed.  [perl #116553]

=end original

レキシカルサブルーチンが完全に逆パース出来るようになりました。
[perl #116553]

=begin original

C<Anything =~ y///r> with C</r> no longer omits the left-hand operand.

=end original

C</r> 付きの C<Anything =~ y///r> はもはや左側のオペランドを
省略しなくなりました。

=begin original

The op trees that make up regexp code blocks are now deparsed for real.
Formerly, the original string that made up the regular expression was used.
That caused problems with C<qr/(?{E<lt>E<lt>heredoc})/> and multiline code blocks,
which were deparsed incorrectly.  [perl #123217] [perl #115256]

=end original

正規表現コードブロックを作る op 木は実際に逆パース出来るようになりました。
以前は、正規表現を作った元の文字列が使われていました。
これは C<qr/(?{E<lt>E<lt>heredoc})/> や複数行コードブロックで問題があり、
間違って逆パースされていました。
[perl #123217] [perl #115256]

=begin original

C<$;> at the end of a statement no longer loses its semicolon.
[perl #123357]

=end original

文末の C<$;> はもはやセミコロンを失わなくなりました。
[perl #123357]

=begin original

Some cases of subroutine declarations stored in the stash in shorthand form
were being omitted.

=end original

簡潔な形式でスタッシュに保管されたサブルーチン宣言の一部が
省略されていました。

=begin original

Non-ASCII characters are now consistently escaped in strings, instead of
some of the time.  (There are still outstanding problems with regular
expressions and identifiers that have not been fixed.)

=end original

文字列中の非 ASCII 文字は、時々ではなく一貫して
エスケープされるようになりました。
(正規表現と識別子に関してはまだ修正されていない問題があります。)

=begin original

When prototype sub calls are deparsed with C<&> (I<e.g.>, under the B<-P>
option), C<scalar> is now added where appropriate, to force the scalar
context implied by the prototype.

=end original

プロトタイプサブルーチン呼び出しが C<&> で逆パースされるとき (例えば、
B<-P> オプション)、プロトタイプによって暗示されているスカラコンテキストに
強制するために、適切な場所では C<scalar> が追加されるようになりました。

=begin original

C<require(foo())>, C<do(foo())>, C<goto(foo())> and similar constructs with
loop controls are now deparsed correctly.  The outer parentheses are not
optional.

=end original

ループ制御での C<require(foo())>, C<do(foo())>, C<goto(foo())> および
似たような構文は正しく逆パースされるようになりました。
外側のかっこはオプションではありません。

=begin original

Whitespace is no longer escaped in regular expressions, because it was
getting erroneously escaped within C<(?x:...)> sections.

=end original

空白は正規表現の中ではもはやエスケープされなくなりました; 
C<(?x:...)> 節の中で間違ってエスケープされていたからです。

=begin original

C<sub foo { foo() }> is now deparsed with those mandatory parentheses.

=end original

C<sub foo { foo() }> は必須のかっこ付きで逆パースするようになりました。

=begin original

C</@array/> is now deparsed as a regular expression, and not just
C<@array>.

=end original

C</@array/> は、C<@array> ではなく、正規表現として
逆パースするようになりました。

=begin original

C</@{-}/>, C</@{+}/> and C<$#{1}> are now deparsed with the braces, which
are mandatory in these cases.

=end original

C</@{-}/>, C</@{+}/>, C<$#{1}> は、必須の中かっこ付きで
逆パースされるようになりました。

=begin original

In deparsing feature bundles, C<B::Deparse> was emitting C<no feature;> first
instead of C<no feature ':all';>.  This has been fixed.

=end original

機能バンドルの逆パース時に、C<B::Deparse> は C<no feature ':all';> ではなく
C<no feature;> を最初に出力していました。
これは修正されました。

=begin original

C<chdir FH> is now deparsed without quotation marks.

=end original

C<chdir FH> は引用符なしで逆パースされるようになりました。

=begin original

C<\my @a> is now deparsed without parentheses.  (Parenthese would flatten
the array.)

=end original

C<\my @a> はかっこなしで逆パースされるようになりました。
(かっこは配列をフラット化します。)

=begin original

C<system> and C<exec> followed by a block are now deparsed correctly.
Formerly there was an erroneous C<do> before the block.

=end original

C<system> と C<exec> に引き続いたブロックは正しく
逆パースされるようになりました。
以前は間違った C<do> がブロックの前に付いていました。

=begin original

C<< use constant QR =E<gt> qr/.../flags >> followed by C<"" =~ QR> is no longer
without the flags.

=end original

C<< use constant QR =E<gt> qr/.../flags >> に C<"" =~ QR> が引き続いても、
もはやフラグなしにはならなくなりました。

=begin original

Deparsing C<BEGIN { undef &foo }> with the B<-w> switch enabled started to
emit 'uninitialized' warnings in Perl 5.14.  This has been fixed.

=end original

B<-w> オプションが有効の時に C<BEGIN { undef &foo }> を逆パースすると、
Perl 5.14 で 'uninitialized' 警告を出力していました。
これは修正されました。

=begin original

Deparsing calls to subs with a C<(;+)> prototype resulted in an infinite
loop.  The C<(;$>) C<(_)> and C<(;_)> prototypes were given the wrong
precedence, causing C<foo($aE<lt>$b)> to be deparsed without the parentheses.

=end original

C<(;+)> プロトタイプを持つサブルーチン呼び出しを逆パースすると
無限ループになっていました。
C<(;$>), C<(_)>, C<(;_)> プロトタイプは間違った優先順位を持っていたので、
C<foo($aE<lt>$b)> はかっこなしで逆パースされていました。

=begin original

Deparse now provides a defined state sub in inner subs.

=end original

Deparse は内側のサブルーチンで定義された state サブルーチンを
提供するようになりました。

=item *

=begin original

L<B::Op_private> has been added.

=end original

L<B::Op_private> が追加されました。

=begin original

L<B::Op_private> provides detailed information about the flags used in the
C<op_private> field of perl opcodes.

=end original

L<B::Op_private> は perl オペコードの C<op_private> フィールドで使われている
フラグに関する詳細な情報を提供します。

=item *

=begin original

L<bigint>, L<bignum>, L<bigrat> have been upgraded to version 0.39.

=end original

L<bigint>, L<bignum>, L<bigrat> はバージョン 0.39 に更新されました。

=begin original

Document in CAVEATS that using strings as numbers won't always invoke
the big number overloading, and how to invoke it.  [rt.perl.org #123064]

=end original

数値として文字列を使うのは常に大きい数値のオーバーロードを
起動するわけではないことと、起動する方法が CAVEATS に文書化されました。
[rt.perl.org #123064]

=item *

=begin original

L<Carp> has been upgraded to version 1.36.

=end original

L<Carp> はバージョン 1.36 に更新されました。

=begin original

C<Carp::Heavy> now ignores version mismatches with Carp if Carp is newer
than 1.12, since C<Carp::Heavy>'s guts were merged into Carp at that
point.
L<[perl #121574]|https://rt.perl.org/Ticket/Display.html?id=121574>

=end original

C<Carp::Heavy> は、Carp が 1.12 より新しい場合は、Carp との
バージョンの不整合を無視するようになりました; この時点から
C<Carp::Heavy> の中身は Carp にマージされたからです。
L<[perl #121574]|https://rt.perl.org/Ticket/Display.html?id=121574>

=begin original

Carp now handles non-ASCII platforms better.

=end original

Carp は非 ASCII プラットフォームをよりよく扱えるようになりました。

=begin original

Off-by-one error fix for Perl E<lt> 5.14.

=end original

Perl E<lt> 5.14 での off-by-one エラーが修正されました。

=item *

=begin original

L<constant> has been upgraded to version 1.33.

=end original

L<constant> はバージョン 1.33 に更新されました。

=begin original

It now accepts fully-qualified constant names, allowing constants to be defined
in packages other than the caller.

=end original

完全修飾定数名を受け付けるようになり、呼び出し元以外のパッケージで定義された
定数を使えるようになりました。

=item *

=begin original

L<CPAN> has been upgraded to version 2.11.

=end original

L<CPAN> はバージョン 2.11 に更新されました。

=begin original

Add support for C<Cwd::getdcwd()> and introduce workaround for a misbehavior
seen on Strawberry Perl 5.20.1.

=end original

C<Cwd::getdcwd()> の対応が追加され、Strawberry Perl 5.20.1 で見られた
間違った振る舞いの回避策が導入されました。

=begin original

Fix C<chdir()> after building dependencies bug.

=end original

ビルド後の C<chdir()> の依存性バグが修正されました。

=begin original

Introduce experimental support for plugins/hooks.

=end original

プラグイン/フックのための実験的対応が導入されました。

=begin original

Integrate the C<App::Cpan> sources.

=end original

C<App::Cpan> のソースが統合されました。

=begin original

Do not check recursion on optional dependencies.

=end original

オプションの依存に関する再帰チェックをしなくなりました。

=begin original

Sanity check F<META.yml> to contain a hash.
L<[cpan #95271]|https://rt.cpan.org/Ticket/Display.html?id=95271>

=end original

F<META.yml> がハッシュを含んでいるかの正気チェック。
L<[cpan #95271]|https://rt.cpan.org/Ticket/Display.html?id=95271>

=item *

=begin original

L<CPAN::Meta::Requirements> has been upgraded to version 2.132.

=end original

L<CPAN::Meta::Requirements> はバージョン 2.132 に更新されました。

=begin original

Works around limitations in C<version::vpp> detecting v-string magic and adds
support for forthcoming L<ExtUtils::MakeMaker> bootstrap F<version.pm> for
Perls older than 5.10.0.

=end original

C<version::vpp> が v-文字列を検出するときの回避策が追加され、
来るべき L<ExtUtils::MakeMaker> ブートストラップ F<version.pm> の
5.10.0 より古い Perl への対応が追加されました。

=item *

=begin original

L<Data::Dumper> has been upgraded to version 2.158.

=end original

L<Data::Dumper> はバージョン 2.158 に更新されました。

=begin original

Fixes CVE-2014-4330 by adding a configuration variable/option to limit
recursion when dumping deep data structures.

=end original

深いデータ構造をダンプするときに再帰を制限する設定変数/オプションを
追加することによって CVE-2014-4330 が修正されました。

=begin original

Changes to resolve Coverity issues.
XS dumps incorrectly stored the name of code references stored in a
GLOB.
L<[perl #122070]|https://rt.perl.org/Ticket/Display.html?id=122070>

=end original

Coverity 問題を解決するための変更。
XS のダンプは GLOB に保管されたコードリファレンスの名前を間違って
保管していました。
L<[perl #122070]|https://rt.perl.org/Ticket/Display.html?id=122070>

=item *

=begin original

L<DynaLoader> has been upgraded to version 1.32.

=end original

L<DynaLoader> はバージョン 1.32 に更新されました。

=begin original

Remove C<dl_nonlazy> global if unused in Dynaloader. [perl #122926]

=end original

Dynaloader を使っていない場合は C<dl_nonlazy> グローバルを削除します。
[perl #122926]

=item *

=begin original

L<Encode> has been upgraded to version 2.72.

=end original

L<Encode> はバージョン 2.72 に更新されました。

=begin original

C<piconv> now has better error handling when the encoding name is nonexistent,
and a build breakage when upgrading L<Encode> in perl-5.8.2 and earlier has
been fixed.

=end original

C<piconv> は、エンコーディング名が存在しなかったときによりよい
エラーハンドリングを行うようになり、perl-5.8.2 以前から L<Encode> を
更新したときにビルドが壊れる問題が修正されました。

=begin original

Building in C++ mode on Windows now works.

=end original

Windows で C++ モードでのビルドが動作するようになりました。

=item *

=begin original

L<Errno> has been upgraded to version 1.23.

=end original

L<Errno> はバージョン 1.23 に更新されました。

=begin original

Add C<-P> to the preprocessor command-line on GCC 5.  GCC added extra
line directives, breaking parsing of error code definitions.  [rt.perl.org
#123784]

=end original

GCC 5 では、プリプロセッサのコマンドラインに C<-P> が追加されました。
GCC は追加の行指示子が追加されていて、エラーコード定義のパースを
壊していました。
[rt.perl.org #123784]

=item *

=begin original

L<experimental> has been upgraded to version 0.013.

=end original

L<experimental> はバージョン 0.013 に更新されました。

=begin original

Hardcodes features for Perls older than 5.15.7.

=end original

5.15.7 以前の Perl の機能をハードコーディングしました。

=item *

=begin original

L<ExtUtils::CBuilder> has been upgraded to version 0.280221.

=end original

L<ExtUtils::CBuilder> はバージョン 0.280221 に更新されました。

=begin original

Fixes a regression on Android.
L<[perl #122675]|https://rt.perl.org/Ticket/Display.html?id=122675>

=end original

Android での退行を修正しました。
L<[perl #122675]|https://rt.perl.org/Ticket/Display.html?id=122675>

=item *

=begin original

L<ExtUtils::Manifest> has been upgraded to version 1.70.

=end original

L<ExtUtils::Manifest> はバージョン 1.70 に更新されました。

=begin original

Fixes a bug with C<maniread()>'s handling of quoted filenames and improves
C<manifind()> to follow symlinks.
L<[perl #122415]|https://rt.perl.org/Ticket/Display.html?id=122415>

=end original

クォートされたファイル名の扱いに関する C<maniread()> のバグが修正され、
C<manifind()> がシンボリックリンクをたどるように改善されました。
L<[perl #122415]|https://rt.perl.org/Ticket/Display.html?id=122415>

=item *

=begin original

L<ExtUtils::ParseXS> has been upgraded to version 3.28.

=end original

L<ExtUtils::ParseXS> はバージョン 3.28 に更新されました。

=begin original

Only declare C<file> unused if we actually define it.
Improve generated C<RETVAL> code generation to avoid repeated
references to C<ST(0)>.  [perl #123278]
Broaden and document the C</OBJ$/> to C</REF$/> typemap optimization
for the C<DESTROY> method.  [perl #123418]

=end original

使われていない C<file> は実際に定義されたときにのみ
宣言されるようになりました。
C<ST(0)> への繰り返しの参照を避けるために、生成された C<RETVAL>
コード生成が改良されました。
[perl #123278]
C<DESTROY> メソッドの C</OBJ$/> から C</REF$/> typemap 最適化が
広げられ、文書化されました。
[perl #123418]

=item *

=begin original

L<Fcntl> has been upgraded to version 1.13.

=end original

L<Fcntl> はバージョン 1.13 に更新されました。

=begin original

Add support for the Linux pipe buffer size C<fcntl()> commands.

=end original

Linux のパイプバッファサイズ C<fcntl()> コマンド対応が追加されました。

=item *

=begin original

L<File::Find> has been upgraded to version 1.29.

=end original

L<File::Find> はバージョン 1.29 に更新されました。

=begin original

C<find()> and C<finddepth()> will now warn if passed inappropriate or
misspelled options.

=end original

C<find()> と C<finddepth()> は、不適切なオプションやスペルミスのオプションを
渡すと警告されるようになりました。

=item *

=begin original

L<File::Glob> has been upgraded to version 1.24.

=end original

L<File::Glob> はバージョン 1.24 に更新されました。

=begin original

Avoid C<SvIV()> expanding to call C<get_sv()> three times in a few
places. [perl #123606]

=end original

いくつかの場所で C<get_sv()> を 3 回呼び出していた C<SvIV()> の拡張を
しないようになりました。
[perl #123606]

=item *

=begin original

L<HTTP::Tiny> has been upgraded to version 0.054.

=end original

L<HTTP::Tiny> はバージョン 0.054 に更新されました。

=begin original

C<keep_alive> is now fork-safe and thread-safe.

=end original

C<keep_alive> は fork セーフでスレッドセーフになりました。

=item *

=begin original

L<IO> has been upgraded to version 1.35.

=end original

L<IO> はバージョン 1.35 に更新されました。

=begin original

The XS implementation has been fixed for the sake of older Perls.

=end original

XS 実装は、より古い Perl のために修正されました。

=item *

=begin original

L<IO::Socket> has been upgraded to version 1.38.

=end original

L<IO::Socket> はバージョン 1.38 に更新されました。

=begin original

Document the limitations of the C<connected()> method.  [perl #123096]

=end original

C<connected()> メソッドの制限が文書化されました。
[perl #123096]

=item *

=begin original

L<IO::Socket::IP> has been upgraded to version 0.37.

=end original

L<IO::Socket::IP> はバージョン 0.37 に更新されました。

=begin original

A better fix for subclassing C<connect()>.
L<[cpan #95983]|https://rt.cpan.org/Ticket/Display.html?id=95983>
L<[cpan #97050]|https://rt.cpan.org/Ticket/Display.html?id=97050>

=end original

C<connect()> をサブクラス化するためによりよく修正されました。
L<[cpan #95983]|https://rt.cpan.org/Ticket/Display.html?id=95983>
L<[cpan #97050]|https://rt.cpan.org/Ticket/Display.html?id=97050>

=begin original

Implements Timeout for C<connect()>.
L<[cpan #92075]|https://rt.cpan.org/Ticket/Display.html?id=92075>

=end original

C<connect()> のタイムアウトが実装されました。
L<[cpan #92075]|https://rt.cpan.org/Ticket/Display.html?id=92075>

=item *

=begin original

The libnet collection of modules has been upgraded to version 3.05.

=end original

modules はバージョン 3.05 に更新されました。

=begin original

Support for IPv6 and SSL to C<Net::FTP>, C<Net::NNTP>, C<Net::POP3> and C<Net::SMTP>.
Improvements in C<Net::SMTP> authentication.

=end original

C<Net::FTP>, C<Net::NNTP>, C<Net::POP3>, C<Net::SMTP> で IPv6 と SSL に
対応しました。
C<Net::SMTP> の認証が改良されました。

=item *

=begin original

L<Locale::Codes> has been upgraded to version 3.34.

=end original

L<Locale::Codes> はバージョン 3.34 に更新されました。

=begin original

Fixed a bug in the scripts used to extract data from spreadsheets that
prevented the SHP currency code from being found.
L<[cpan #94229]|https://rt.cpan.org/Ticket/Display.html?id=94229>

=end original

スプレッドシートからデータを展開するために使われているスクリプトが
SHP 通貨コードを見つけるのを妨げていたバグが修正されました。
L<[cpan #94229]|https://rt.cpan.org/Ticket/Display.html?id=94229>

=begin original

New codes have been added.

=end original

新しいコードが追加されました。

=item *

=begin original

L<Math::BigInt> has been upgraded to version 1.9997.

=end original

L<Math::BigInt> はバージョン 1.9997 に更新されました。

=begin original

Synchronize POD changes from the CPAN release.
C<< Math::BigFloat->blog(x) >> would sometimes return C<blog(2*x)> when
the accuracy was greater than 70 digits.
The result of C<< Math::BigFloat->bdiv() >> in list context now
satisfies C<< x = quotient * divisor + remainder >>.

=end original

POD の変更を CPAN リリースと同期しました。
C<< Math::BigFloat->blog(x) >> は、精度が 70 桁以上のとき、時々
C<blog(2*x)> を返していました。
リストコンテキストでの C<< Math::BigFloat->bdiv() >> の結果は
C<< x = quotient * divisor + remainder >> を満たすようになりました。

=begin original

Correct handling of subclasses.
L<[cpan #96254]|https://rt.cpan.org/Ticket/Display.html?id=96254>
L<[cpan #96329]|https://rt.cpan.org/Ticket/Display.html?id=96329>

=end original

サブクラスの扱いが修正されました。
L<[cpan #96254]|https://rt.cpan.org/Ticket/Display.html?id=96254>
L<[cpan #96329]|https://rt.cpan.org/Ticket/Display.html?id=96329>

=item *

=begin original

L<Module::Metadata> has been upgraded to version 1.000026.

=end original

L<Module::Metadata> はバージョン 1.000026 に更新されました。

=begin original

Support installations on older perls with an L<ExtUtils::MakeMaker> earlier
than 6.63_03

=end original

L<ExtUtils::MakeMaker> が 6.63_03 以前の古い perl でのインストールに
対応しました。

=item *

=begin original

L<overload> has been upgraded to version 1.26.

=end original

L<overload> はバージョン 1.26 に更新されました。

=begin original

A redundant C<ref $sub> check has been removed.

=end original

冗長な C<ref $sub> チェックが削除されました。

=item *

=begin original

The PathTools module collection has been upgraded to version 3.56.

=end original

collection はバージョン 3.56 に更新されました。

=begin original

A warning from the B<gcc> compiler is now avoided when building the XS.

=end original

XS をビルドするときの、B<gcc> コンパイラからの警告は回避されました。

=begin original

Don't turn leading C<//> into C</> on Cygwin. [perl #122635]

=end original

Cygwin で先頭の C<//> を C</> に変換しなくなりました。
[perl #122635]

=item *

=begin original

L<perl5db.pl> has been upgraded to version 1.49.

=end original

L<perl5db.pl> はバージョン 1.49 に更新されました。

=begin original

The debugger would cause an assertion failure.
L<[perl #124127]|https://rt.perl.org/Ticket/Display.html?id=124127>

=end original

デバッガはアサート失敗を引き起こしていました。
L<[perl #124127]|https://rt.perl.org/Ticket/Display.html?id=124127>

=begin original

C<fork()> in the debugger under C<tmux> will now create a new window for
the forked process. L<[perl
#121333]|https://rt.perl.org/Ticket/Display.html?id=121333>

=end original

C<tmux> の基でのデバッガでの C<fork()> では、fork されたプロセスのための
新しいウィンドウを作成するようになりました。
L<[perl #121333]|https://rt.perl.org/Ticket/Display.html?id=121333>

=begin original

The debugger now saves the current working directory on startup and
restores it when you restart your program with C<R> or C<rerun>. L<[perl
#121509]|https://rt.perl.org/Ticket/Display.html?id=121509>

=end original

デバッガは起動時の現在の作業ディレクトリを保存して、C<R> や C<rerun> で
プログラムを再実行するときにそれを復元するようになりました。
L<[perl #121509]|https://rt.perl.org/Ticket/Display.html?id=121509>

=item *

=begin original

L<PerlIO::scalar> has been upgraded to version 0.22.

=end original

L<PerlIO::scalar> はバージョン 0.22 に更新されました。

=begin original

Reading from a position well past the end of the scalar now correctly
returns end of file.  [perl #123443]

=end original

スカラの末尾よりも後の位置からの読み込みは正しくファイル終端を
返すようになりました。
[perl #123443]

=begin original

Seeking to a negative position still fails, but no longer leaves the
file position set to a negation location.

=end original

負の位置へのシークは失敗するままですが、ファイル位置を負の位置のままに
しなくなりました。

=begin original

C<eof()> on a C<PerlIO::scalar> handle now properly returns true when
the file position is past the 2GB mark on 32-bit systems.

=end original

C<PerlIO::scalar> での C<eof()> は、32 ビットシステムでの 2GB のマークより
後のファイル位置でも正しく真を返すようになりました。

=begin original

Attempting to write at file positions impossible for the platform now
fail early rather than wrapping at 4GB.

=end original

プラットフォームによって不可能なファイル位置に書き込もうとした場合、
4GB でラップするのではなく早めに失敗するようになりました。

=item *

=begin original

L<Pod::Perldoc> has been upgraded to version 3.25.

=end original

L<Pod::Perldoc> はバージョン 3.25 に更新されました。

=begin original

Filehandles opened for reading or writing now have C<:encoding(UTF-8)> set.
L<[cpan #98019]|https://rt.cpan.org/Ticket/Display.html?id=98019>

=end original

読み込みや書き込みのために開かれたファイルハンドルは C<:encoding(UTF-8)> を
設定するようになりました。
L<[cpan #98019]|https://rt.cpan.org/Ticket/Display.html?id=98019>

=item *

=begin original

L<POSIX> has been upgraded to version 1.53.

=end original

L<POSIX> はバージョン 1.53 に更新されました。

=begin original

The C99 math functions and constants (for example C<acosh>, C<isinf>, C<isnan>, C<round>,
C<trunc>; C<M_E>, C<M_SQRT2>, C<M_PI>) have been added.

=end original

C99 数学関数と定数 (例えば C<acosh>, C<isinf>, C<isnan>, C<round>,
C<trunc>; C<M_E>, C<M_SQRT2>, C<M_PI>) が追加されました。

=begin original

C<POSIX::tmpnam()> now produces a deprecation warning.  [perl #122005]

=end original

C<POSIX::tmpnam()> は廃止予定警告を出力するようになりました。
[perl #122005]

=item *

=begin original

L<Safe> has been upgraded to version 2.39.

=end original

L<Safe> はバージョン 2.39 に更新されました。

=begin original

C<reval> was not propagating void context properly.

=end original

C<reval> は無効コンテキストを適切に伝搬していませんでした。

=item *

=begin original

Scalar-List-Utils has been upgraded to version 1.41.

=end original

Scalar-List-Utils はバージョン 1.41 に更新されました。

=begin original

A new module, L<Sub::Util>, has been added, containing functions related to
CODE refs, including C<subname> (inspired by C<Sub::Identity>) and C<set_subname>
(copied and renamed from C<Sub::Name>).
The use of C<GetMagic> in C<List::Util::reduce()> has also been fixed.
L<[cpan #63211]|https://rt.cpan.org/Ticket/Display.html?id=63211>

=end original

新しいモジュールである L<Sub::Util> が追加されました;
コードリファレンスに関する関数を含んでいます;
C<subname> (C<Sub::Identity> に影響されました)、C<set_subname>
(C<Sub::Name> からコピーされてリネームされました)。
C<List::Util::reduce()> での C<GetMagic> の使用法も修正されました。
L<[cpan #63211]|https://rt.cpan.org/Ticket/Display.html?id=63211>

=item *

=begin original

L<SDBM_File> has been upgraded to version 1.13.

=end original

L<SDBM_File> はバージョン 1.13 に更新されました。

=begin original

Simplified the build process.  [perl #123413]

=end original

ビルドプロセスが単純化されました。
[perl #123413]

=item *

=begin original

L<Time::Piece> has been upgraded to version 1.29.

=end original

L<Time::Piece> はバージョン 1.29 に更新されました。

=begin original

When pretty printing negative C<Time::Seconds>, the "minus" is no longer lost.

=end original

負数の C<Time::Seconds> を整形表示するとき、「マイナス」を
落とさなくなりました。

=item *

=begin original

L<Unicode::Collate> has been upgraded to version 1.12.

=end original

L<Unicode::Collate> はバージョン 1.12 に更新されました。

=begin original

Version 0.67's improved discontiguous contractions is invalidated by default
and is supported as a parameter C<long_contraction>.

=end original

バージョン 0.67 での改良された非継続縮小(discontiguous contraction)は
デフォルトでは無効化され、C<long_contraction> 引数で対応するようになりました。

=item *

=begin original

L<Unicode::Normalize> has been upgraded to version 1.18.

=end original

L<Unicode::Normalize> はバージョン 1.18 に更新されました。

=begin original

The XSUB implementation has been removed in favor of pure Perl.

=end original

ピュア Perl を支持して、XSUB 実装は削除されました。

=item *

=begin original

L<Unicode::UCD> has been upgraded to version 0.61.

=end original

L<Unicode::UCD> はバージョン 0.61 に更新されました。

=begin original

A new function L<property_values()|Unicode::UCD/prop_values()>
has been added to return a given property's possible values.

=end original

特性の取り得る値を返す、新しい関数
L<property_values()|Unicode::UCD/prop_values()> が追加されました。

=begin original

A new function L<charprop()|Unicode::UCD/charprop()>
has been added to return the value of a given property for a given code
point.

=end original

指定された符号位置のための指定された特性の値を返す新しい関数
L<charprop()|Unicode::UCD/charprop()> が追加されました。

=begin original

A new function L<charprops_all()|Unicode::UCD/charprops_all()>
has been added to return the values of all Unicode properties for a
given code point.

=end original

指定された符号位置のための全ての Unicode 特性を返す新しい関数
L<charprops_all()|Unicode::UCD/charprops_all()> が追加されました。

=begin original

A bug has been fixed so that L<propaliases()|Unicode::UCD/prop_aliases()>
returns the correct short and long names for the Perl extensions where
it was incorrect.

=end original

バグが修正され、L<propaliases()|Unicode::UCD/prop_aliases()> は、
以前は間違っていた、Perl エクステンションのための正しい短い名前と長い名前を
返すようになりました。

=begin original

A bug has been fixed so that
L<prop_value_aliases()|Unicode::UCD/prop_value_aliases()>
returns C<undef> instead of a wrong result for properties that are Perl
extensions.

=end original

バグが修正され、L<prop_value_aliases()|Unicode::UCD/prop_value_aliases()> は
Perl エクステンションの特性で間違った結果ではなく C<undef> を
返すようになりました。

=begin original

This module now works on EBCDIC platforms.

=end original

このモジュールは EBCDIC プラットフォームで動作するようになりました。

=item *

=begin original

L<utf8> has been upgraded to version 1.17

=end original

L<utf8> はバージョン 1.1 に更新されました。

=begin original

A mismatch between the documentation and the code in C<utf8::downgrade()>
was fixed in favor of the documentation. The optional second argument
is now correctly treated as a perl boolean (true/false semantics) and
not as an integer.

=end original

C<utf8::downgrade()> での文書とコードの不一致は、文書に合わせることで
修正されました。
オプションの 2 番目の引数は正しく整数ではなく perl の真偽値として
扱われるようになりました。

=item *

=begin original

L<version> has been upgraded to version 0.9909.

=end original

L<version> はバージョン 0.9909 に更新されました。

=begin original

Numerous changes.  See the F<Changes> file in the CPAN distribution for
details.

=end original

多くの変更が行われました。
詳しくは CPAN 配布の F<Changes> ファイルを参照してください。

=item *

=begin original

L<Win32> has been upgraded to version 0.51.

=end original

L<Win32> はバージョン 0.51 に更新されました。

=begin original

C<GetOSName()> now supports Windows 8.1, and building in C++ mode now works.

=end original

C<GetOSName()> は Windows 8.1 に対応し、C++ モードでのビルドは
動作するようになりました。

=item *

=begin original

L<Win32API::File> has been upgraded to version 0.1202

=end original

L<Win32API::File> はバージョン 0.120 に更新されました。

=begin original

Building in C++ mode now works.

=end original

C++ モードでのビルドは動作するようになりました。

=item *

=begin original

L<XSLoader> has been upgraded to version 0.20.

=end original

L<XSLoader> はバージョン 0.20 に更新されました。

=begin original

Allow XSLoader to load modules from a different namespace.
[perl #122455]

=end original

XSLoader が異なった名前空間からモジュールを読み込めるようになりました。
[perl #122455]

=back

=head2 Removed Modules and Pragmata

(削除されたモジュールとプラグマ)

=begin original

The following modules (and associated modules) have been removed from the core
perl distribution:

=end original

以下のモジュール (および関連するモジュール) はコア perl 配布から
削除されました:

=over 4

=item *

L<CGI>

=item *

L<Module::Build>

=back

=head1 Documentation

(文書)

=head2 New Documentation

(新しい文書)

=head3 L<perlunicook>

=begin original

This document, by Tom Christiansen, provides examples of handling Unicode in
Perl.

=end original

この文書は Tom Christiansen によるもので、Perl での Unicode の扱い方の例を
提供します。

=head2 Changes to Existing Documentation

(既存の文書の変更)

=head3 L<perlaix>

=over 4

=item *

=begin original

A note on long doubles has been added.

=end original

long double に関する注意が追加されました。

=back

=head3 L<perlapi>

=over 4

=item *

=begin original

Note that C<SvSetSV> doesn't do set magic.

=end original

C<SvSetSV> はマジックを設定しません。

=item *

=begin original

C<sv_usepvn_flags> - fix documentation to mention the use of C<Newx> instead of
C<malloc>.

=end original

C<sv_usepvn_flags> - C<malloc> ではなく C<Newx> を使うと言及している文書を
修正しました。

L<[perl #121869]|https://rt.perl.org/Ticket/Display.html?id=121869>

=item *

=begin original

Clarify where C<NUL> may be embedded or is required to terminate a string.

=end original

C<NUL> が組み込まれていたり文字列の終端に必要な場合を明確化しました。

=item *

=begin original

Some documentation that was previously missing due to formatting errors is
now included.

=end original

以前はフォーマッティングエラーのために含まれていなかった一部の文書が
含まれるようになりました。

=item *

=begin original

Entries are now organized into groups rather than by the file where they
are found.

=end original

エントリは見つかったファイル毎ではなくグループでまとめられるようになりました。

=item *

=begin original

Alphabetical sorting of entries is now done consistently (automatically
by the POD generator) to make entries easier to find when scanning.

=end original

エントリのアルファベット順ソートは、スキャン時にエントリをより簡単に
探せるように、(POD ジェネレータによって自動的に) 一貫して
行われるようになりました。

=back

=head3 L<perldata>

=over 4

=item *

=begin original

The syntax of single-character variable names has been brought
up-to-date and more fully explained.

=end original

単一文字変数名の文法が更新され、より完全に説明されるようになりました。

=item *

=begin original

Hexadecimal floating point numbers are described, as are infinity and
NaN.

=end original

16 進浮動小数点数が、無限や非数と同様記述されました。

=back

=head3 L<perlebcdic>

=over 4

=item *

=begin original

This document has been significantly updated in the light of recent
improvements to EBCDIC support.

=end original

この文書は、最近の EBCDIC 対応の改善に関してかなり更新されました。

=back

=head3 L<perlfilter>

=over 4

=item *

=begin original

Added a L<LIMITATIONS|perlfilter/LIMITATIONS> section.

=end original

L<LIMITATIONS|perlfilter/LIMITATIONS> の章が追加されました。

=back

=head3 L<perlfunc>

=over 4

=item *

=begin original

Mention that C<study()> is currently a no-op.

=end original

C<study()> は現在のところ何もしないことに言及しました。

=item *

=begin original

Calling C<delete> or C<exists> on array values is now described as "strongly
discouraged" rather than "deprecated".

=end original

配列の値に対して C<delete> や C<exists> を呼び出すのは、「廃止予定」ではなく
「強く非推奨」と記述されるようになりました。

=item *

=begin original

Improve documentation of C<< our >>.

=end original

C<< our >> の文書が改善されました。

=item *

=begin original

C<-l> now notes that it will return false if symlinks aren't supported by the
file system.

=end original

C<-l> は、ファイルシステムがシンボリックリンクに対応していないときには
偽を返すことを記述しました。

L<[perl #121523]|https://rt.perl.org/Ticket/Display.html?id=121523>

=item *

=begin original

Note that C<exec LIST> and C<system LIST> may fall back to the shell on
Win32. Only the indirect-object syntax C<exec PROGRAM LIST> and
C<system PROGRAM LIST> will reliably avoid using the shell.

=end original

Win32 では C<exec LIST> と C<system LIST> はシェルに
フォールバックするかも知れないことに注意してください。
間接オブジェクト文法 C<exec PROGRAM LIST> と C<system PROGRAM LIST> のみが
確実にシェルを使うことを回避します。

=begin original

This has also been noted in L<perlport>.

=end original

これは L<perlport> にも記述されました。

L<[perl #122046]|https://rt.perl.org/Ticket/Display.html?id=122046>

=back

=head3 L<perlguts>

=over 4

=item *

=begin original

The OOK example has been updated to account for COW changes and a change in the
storage of the offset.

=end original

OOK の例は、COW の変更とストレージのオフセットの変更を考慮して更新されました。

=item *

=begin original

Details on C level symbols and libperl.t added.

=end original

C レベルのシンボルと libperl.t の詳細が追加されました。

=item *

=begin original

Information on Unicode handling has been added

=end original

Unicode の扱いに関する情報が追加されました。

=item *

=begin original

Information on EBCDIC handling has been added

=end original

EBCDIC の扱いに関する情報が追加されました。

=back

=head3 L<perlhack>

=over 4

=item *

=begin original

A note has been added about running on platforms with non-ASCII
character sets

=end original

非 ASCII 文字集合のプラットフォームでの実行に関する注意が追加されました。

=item *

=begin original

A note has been added about performance testing

=end original

性能テストに関する注意が追加されました。

=back

=head3 L<perlhacktips>

=over 4

=item *

=begin original

Documentation has been added illustrating the perils of assuming that
there is no change to the contents of static memory pointed to by the
return values of Perl's wrappers for C library functions.

=end original

C ライブラリ関数のための Perl のラッパの返り値によって示されている静的メモリの
内容が変更されないと仮定することの危険を図示した文書が追加されました。

=item *

=begin original

Replacements for C<tmpfile>, C<atoi>, C<strtol>, and C<strtoul> are now
recommended.

=end original

C<tmpfile>, C<atoi>, C<strtol>, C<strtoul> に関して推奨する代替品を
追加しました。

=item *

=begin original

Updated documentation for the C<test.valgrind> C<make> target.

=end original

C<test.valgrind> C<make> ターゲットの文書を更新しました。

L<[perl #121431]|https://rt.perl.org/Ticket/Display.html?id=121431>

=item *

=begin original

Information is given about writing test files portably to non-ASCII
platforms.

=end original

非 ASCII プラットフォームで移植性のあるテストファイルの書き方に関する
情報が追加されました。

=item *

=begin original

A note has been added about how to get a C language stack backtrace.

=end original

C 言語スタックバックトレースを得る方法が追加されました。

=back

=head3 L<perlhpux>

=over 4

=item *

=begin original

Note that the message "Redeclaration of "sendpath" with a different
storage class specifier" is harmless.

=end original

"Redeclaration of "sendpath" with a different storage class specifier" という
メッセージは無害であることが記述されました。

=back

=head3 L<perllocale>

=over 4

=item *

=begin original

Updated for the enhancements in v5.22, along with some clarifications.

=end original

v5.22 での拡張と、いくつかの明確化のために更新されました。

=back

=head3 L<perlmodstyle>

=over 4

=item *

=begin original

Instead of pointing to the module list, we are now pointing to
L<PrePAN|http://prepan.org/>.

=end original

モジュールメーリングリストを示すのではなく、L<PrePAN|http://prepan.org/> を
示すようにしました。

=back

=head3 L<perlop>

=over 4

=item *

=begin original

Updated for the enhancements in v5.22, along with some clarifications.

=end original

v5.22 での拡張と、いくつかの明確化のために更新されました。

=back

=head3 L<perlpodspec>

=over 4

=item *

=begin original

The specification of the pod language is changing so that the default
encoding of pods that aren't in UTF-8 (unless otherwise indicated) is
CP1252 instead of ISO 8859-1 (Latin1).

=end original

UTF-8 でない場合の pod の(特に示されていない限り)デフォルト
エンコーディングは ISO 8859-1 (Latin1) ではなく CP1252 であるというように
pod 言語の仕様が変更されました。

=back

=head3 L<perlpolicy>

=over 4

=item *

=begin original

We now have a code of conduct for the I<< p5p >> mailing list, as documented
in L<< perlpolicy/STANDARDS OF CONDUCT >>.

=end original

I<< p5p >> メーリングリストでの行動規範が作成され、
L<< perlpolicy/STANDARDS OF CONDUCT >> に文書化されました。

=item *

=begin original

The conditions for marking an experimental feature as non-experimental are now
set out.

=end original

実験的機能を非実験的にする条件が設定されました。

=item *

=begin original

Clarification has been made as to what sorts of changes are permissible in
maintenance releases.

=end original

保守リリースでどの種類の変更が許されるのかについて明確されました。

=back

=head3 L<perlport>

=over 4

=item *

=begin original

Out-of-date VMS-specific information has been fixed and/or simplified.

=end original

期限切れの VMS 固有の情報は修正および単純化されました。

=item *

=begin original

Notes about EBCDIC have been added.

=end original

EBCDIC に関する注意が追加されました。

=back

=head3 L<perlre>

=over 4

=item *

=begin original

The description of the C</x> modifier has been clarified to note that
comments cannot be continued onto the next line by escaping them; and
there is now a list of all the characters that are considered whitespace
by this modifier.

=end original

C</x> 修飾子の記述は明確化され、コメントはエスケープすることで次の行に
続かないということが記述されました; また、この修飾子で空白といて扱われる
全ての文字の一覧が記述されました。

=item *

=begin original

The new C</n> modifier is described.

=end original

新しい C</n> 修飾子が記述されました。

=item *

=begin original

A note has been added on how to make bracketed character class ranges
portable to non-ASCII machines.

=end original

大かっこ文字クラスを非 ASCII マシンで移植性があるようにする方法について
追加されました。

=back

=head3 L<perlrebackslash>

=over 4

=item *

=begin original

Added documentation of C<\b{sb}>, C<\b{wb}>, C<\b{gcb}>, and C<\b{g}>.

=end original

C<\b{sb}>, C<\b{wb}>, C<\b{gcb}>, C<\b{g}> の文書が追加されました。

=back

=head3 L<perlrecharclass>

=over 4

=item *

=begin original

Clarifications have been added to L<perlrecharclass/Character Ranges>
to the effect C<[A-Z]>, C<[a-z]>, C<[0-9]> and
any subranges thereof in regular expression bracketed character classes
are guaranteed to match exactly what a naive English speaker would
expect them to match, even on platforms (such as EBCDIC) where perl
has to do extra work to accomplish this.

=end original

L<perlrecharclass/Character Ranges> に、正規表現大かっこ文字クラスの
C<[A-Z]>, C<[a-z]>, C<[0-9]> およびその部分クラスは、例え perl がこれを
達成するために追加の作業が必要な (EBCDIC のような) プラットフォームでも、
英語話者がマッチングすると想定しているものに正確にマッチングすることが
保証されるということを明確化する文章が追加されました。

=item *

=begin original

The documentation of Bracketed Character Classes has been expanded to cover the
improvements in C<qr/[\N{named sequence}]/> (see under L</Selected Bug Fixes>).

=end original

大かっこ文字クラスの文書は、C<qr/[\N{named sequence}]/> の実装に
対応するように拡張されました (後述する L</Selected Bug Fixes> を参照)。

=back

=head3 L<perlref>

=over 4

=item *

=begin original

A new section has been added
L<Assigning to References|perlref/Assigning to References>

=end original

新しい章 L<Assigning to References|perlref/Assigning to References> が
追加されました。

=back

=head3 L<perlsec>

=over 4

=item *

=begin original

Comments added on algorithmic complexity and tied hashes.

=end original

アルゴリズム的複雑性と tie されたハッシュに関してコメントが追加されました。

=back

=head3 L<perlsyn>

=over 4

=item *

=begin original

An ambiguity in the documentation of the C<...> statement has been corrected.
L<[perl #122661]|https://rt.perl.org/Ticket/Display.html?id=122661>

=end original

C<...> 文の曖昧さが修正されました。
L<[perl #122661]|https://rt.perl.org/Ticket/Display.html?id=122661>

=item *

=begin original

The empty conditional in C<< for >> and C<< while >> is now documented
in L<< perlsyn >>.

=end original

C<< for >> と C<< while >> の空条件が L<< perlsyn >> に文書化されました。

=back

=head3 L<perlunicode>

=over 4

=item *

=begin original

This has had extensive revisions to bring it up-to-date with current
Unicode support and to make it more readable.  Notable is that Unicode
7.0 changed what it should do with non-characters.  Perl retains the old
way of handling for reasons of backward compatibility.  See
L<perlunicode/Noncharacter code points>.

=end original

現在の Unicode 対応に追随し、より読みやすくするために、広範囲に
改訂されました。
注目点は、Unicode 7.0 では非文字に対して何をするべきかが
変更されていることです。
Perl は後方互換性のために古い扱い方を維持しています。
L<perlunicode/Noncharacter code points> を参照してください。

=back

=head3 L<perluniintro>

=over 4

=item *

=begin original

Advice for how to make sure your strings and regular expression patterns are
interpreted as Unicode has been updated.

=end original

文字列と正規表現パターンが確実に Unicode として解釈されるための方法に関する
助言が更新されました。

=back

=head3 L<perlvar>

=over 4

=item *

=begin original

C<$]> is no longer listed as being deprecated.  Instead, discussion has
been added on the advantages and disadvantages of using it versus
C<$^V>.

=end original

C<$]> はもはや廃止予定の一覧の一部ではなくなりました。
代わりに、これと C<$^V> の仕様に関する利点と欠点に関する議論が追加されました。

=item *

=begin original

C<${^ENCODING}> is now marked as deprecated.

=end original

C<${^ENCODING}> は廃止予定としてマークされました。

=item *

=begin original

The entry for C<%^H> has been clarified to indicate it can only handle
simple values.

=end original

C<%^H> のエントリは、単純な値のみを扱えることを示すように明確化されました。

=back

=head3 L<perlvms>

=over 4

=item *

=begin original

Out-of-date and/or incorrect material has been removed.

=end original

期限切れだったり正しくない要素が削除されました。

=item *

=begin original

Updated documentation on environment and shell interaction in VMS.

=end original

VMS での環境とシェルの相互作用に関する文書が更新されました。

=back

=head3 L<perlxs>

=over 4

=item *

=begin original

Added a discussion of locale issues in XS code.

=end original

XS コードでのロケール問題に関する議論が追加されました。

=back

=head1 Diagnostics

(診断メッセージ)

=begin original

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=end original

以下の追加や変更が、警告や致命的エラーメッセージ含む診断出力に行われました。
完全な診断メッセージの一覧については、L<perldiag> を参照してください。

=head2 New Diagnostics

(新しい診断メッセージ)

=head3 New Errors

(新しいエラー)

=over 4

=item *

L<Bad symbol for scalar|perldiag/"Bad symbol for scalar">

=begin original

(P) An internal request asked to add a scalar entry to something that
wasn't a symbol table entry.

=end original

(P) シンボルテーブルエントリにない何かにスカラエントリを追加する要求が
内部でありました。

=item *

L<Can't use a hash as a reference|perldiag/"Can't use a hash as a reference">

=begin original

(F) You tried to use a hash as a reference, as in
C<< %foo->{"bar"} >> or C<< %$ref->{"hello"} >>.  Versions of perl E<lt>= 5.6.1
used to allow this syntax, but shouldn't have.

=end original

(F) C<< %foo->{"bar"} >> や C<< %$ref->{"hello"} >> のように、ハッシュを
リファレンスとして使おうとしました。
E<lt>= 5.6.1 のバージョンの perl はこの構文を許していましたが、
そうするべきではありません。

=item *

L<Can't use an array as a reference|perldiag/"Can't use an array as a reference">

=begin original

(F) You tried to use an array as a reference, as in
C<< @foo->[23] >> or C<< @$ref->[99] >>.  Versions of perl E<lt>= 5.6.1 used to
allow this syntax, but shouldn't have.

=end original

(F) C<< @foo->[23] >> や C<< @$ref->[99] >> のように、配列をリファレンスとして
使おうとしました。
E<lt>= 5.6.1 のバージョンの perl はこの構文を許していましたが、
そうするべきではありません。

=item *

L<Can't use 'defined(@array)' (Maybe you should just omit the defined()?)|perldiag/"Can't use 'defined(@array)' (Maybe you should just omit the defined()?)">

=begin original

(F) C<defined()> is not useful on arrays because it
checks for an undefined I<scalar> value.  If you want to see if the
array is empty, just use S<C<if (@array) { # not empty }>> for example.

=end original

(F) C<defined()> は配列に使っても有用ではありません; 未定義の I<スカラ> 値を
チェックするからです。
配列が空かどうかを知りたい場合は、例えば単に
S<C<if (@array) { # not empty }>> を 使ってください。

=item *

L<Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)|perldiag/"Can't use 'defined(%hash)' (Maybe you should just omit the defined()?)">

=begin original

(F) C<defined()> is not usually right on hashes.

=end original

(F) C<defined()> は普通ハッシュには正しくありません。

=begin original

Although S<C<defined %hash>> is false on a plain not-yet-used hash, it
becomes true in several non-obvious circumstances, including iterators,
weak references, stash names, even remaining true after S<C<undef %hash>>.
These things make S<C<defined %hash>> fairly useless in practice, so it now
generates a fatal error.

=end original

S<C<defined %hash>> は、プレーンなまだ使われていないハッシュでは偽ですが、
反復子、弱い参照、スタッシュ名のような一般的ではない状況では真になり、
S<C<undef %hash>> の後でも真のままになっていました。
これらにより S<C<defined %hash>> は実際にはかなり無用なものになっていたので、
致命的エラーを出すようになりました。

=begin original

If a check for non-empty is what you wanted then just put it in boolean
context (see L<perldata/Scalar values>):

=end original

したいことが空でないことをチェックすることなら、単に真偽値コンテキストに
おいてください (L<perldata/Scalar values> 参照):

    if (%hash) {
       # not empty
    }

=begin original

If you had S<C<defined %Foo::Bar::QUUX>> to check whether such a package
variable exists then that's never really been reliable, and isn't
a good way to enquire about the features of a package, or whether
it's loaded, etc.

=end original

あるパッケージ変数が存在するかどうかを調べるのに
S<C<defined %Foo::Bar::QUUX>> を使っているなら、これは決して本当に
信頼性のあるものにはならず、パッケージの機能や、
読み込まれているかどうかなどを調べるいい方法ではありません。

=item *

L<Cannot chr %f|perldiag/"Cannot chr %f">

=begin original

(F) You passed an invalid number (like an infinity or not-a-number) to
C<chr>.

=end original

(F) (無限や非数のような)不正な数値を C<chr> に渡しました。

=item *

L<Cannot compress %f in pack|perldiag/"Cannot compress %f in pack">

=begin original

(F) You tried converting an infinity or not-a-number to an unsigned
character, which makes no sense.

=end original

(F) 無限や非数を符号なし文字に変換しようとしました; これは無意味です。

=item *

L<Cannot pack %f with '%c'|perldiag/"Cannot pack %f with '%c'">

=begin original

(F) You tried converting an infinity or not-a-number to a character,
which makes no sense.

=end original

(F) 無限や負数を文字に変換しようとしました; これは無意味です。

=item *

L<Cannot print %f with '%c'|perldiag/"Cannot printf %f with '%c'">

=begin original

(F) You tried printing an infinity or not-a-number as a character (C<%c>),
which makes no sense.  Maybe you meant C<'%s'>, or just stringifying it?

=end original

(F) 無限や負数を文字として表示しようとしました (C<%c>); これは無意味です。
おそらく C<'%s'> のつもりか、あるいは単に文字列化したかったのでは?

=item *

L<charnames alias definitions may not contain a sequence of multiple spaces|perldiag/"charnames alias definitions may not contain a sequence of multiple spaces">

=begin original

(F) You defined a character name which had multiple space
characters in a row.  Change them to single spaces.  Usually these
names are defined in the C<:alias> import argument to C<use charnames>, but
they could be defined by a translator installed into C<$^H{charnames}>.
See L<charnames/CUSTOM ALIASES>.

=end original

(F) 連続した複数のスペース文字を持つ文字名を定義しました。
これらは単一のスペースに変更します。
普通はこれらの名前は C<use charnames> の C<:alias> インポート引数で
定義されますが、C<$^H{charnames}> でインストールされた変換器によって
定義されることもあります。
L<charnames/CUSTOM ALIASES> を参照してください。

=item *

L<charnames alias definitions may not contain trailing white-space|perldiag/"charnames alias definitions may not contain trailing white-space">

=begin original

(F) You defined a character name which ended in a space
character.  Remove the trailing space(s).  Usually these names are
defined in the C<:alias> import argument to C<use charnames>, but they
could be defined by a translator installed into C<$^H{charnames}>.
See L<charnames/CUSTOM ALIASES>.

=end original

(F) スペース文字で終わっている文字名を定義しました。
末尾のスペースは削除します。
普通はこれらの名前は C<use charnames> の C<:alias> インポート引数で
定義されますが、C<$^H{charnames}> でインストールされた変換器によって
定義されることもあります。
L<charnames/CUSTOM ALIASES> を参照してください。

=item *

L<:const is not permitted on named subroutines|perldiag/":const is not permitted on named subroutines">

=begin original

(F) The C<const> attribute causes an anonymous subroutine to be run and
its value captured at the time that it is cloned.  Named subroutines are
not cloned like this, so the attribute does not make sense on them.

=end original

(F) C<const> 属性は、無名サブルーチンを実行させ、その値はクローンされた時点で
捕捉されます。
名前付きサブルーチンはこのようにはクローンされないので、これらに対しては
属性は無意味です。

=item *

L<Hexadecimal float: internal error|perldiag/"Hexadecimal float: internal error">

=begin original

(F) Something went horribly bad in hexadecimal float handling.

=end original

(F) 16 進浮動小数点の扱いで何かものすごく悪いことが起こりました。

=item *

L<Hexadecimal float: unsupported long double format|perldiag/"Hexadecimal float: unsupported long double format">

=begin original

(F) You have configured Perl to use long doubles but
the internals of the long double format are unknown,
therefore the hexadecimal float output is impossible.

=end original

(F) long double を使うように Perl を設定しましたが、long double 形式の
内部が不明なので、16 進浮動小数点出力は不可能です。

=item *

L<Illegal suidscript|perldiag/"Illegal suidscript">

=begin original

(F) The script run under suidperl was somehow illegal.

=end original

(F) suidperl の基で実行されたスクリプトが何か不正です。

=item *

L<In '(?...)', the '(' and '?' must be adjacent in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"In '(?...)', the '(' and '?' must be adjacent in regex; marked by <-- HERE in m/%s/">

=begin original

(F) The two-character sequence C<"(?"> in
this context in a regular expression pattern should be an
indivisible token, with nothing intervening between the C<"(">
and the C<"?">, but you separated them.

=end original

(F) 正規表現パターンのこのコンテキストでの 2 文字並び C<"(?"> は分割できない
トークンで、C<"("> と C<"?"> の間に何も入れられませんが、分割しました。

=item *

L<In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"In '(*VERB...)', the '(' and '*' must be adjacent in regex; marked by <-- HERE in m/%s/">

=begin original

(F) The two-character sequence C<"(*"> in
this context in a regular expression pattern should be an
indivisible token, with nothing intervening between the C<"(">
and the C<"*">, but you separated them.

=end original

(F) 正規表現パターンのこのコンテキストでの 2 文字並び C<"(*"> は分割できない
トークンで、C<"("> と C<"*"> の間に何も入れられませんが、分割しました。

=item *

L<Invalid quantifier in {,} in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Invalid quantifier in {,} in regex; marked by <-- HERE in m/%s/">

=begin original

(F) The pattern looks like a {min,max} quantifier, but the min or max could not
be parsed as a valid number: either it has leading zeroes, or it represents
too big a number to cope with.  The S<<-- HERE> shows where in the regular
expression the problem was discovered.  See L<perlre>.

=end original

(F) パターンは {min,max} 量指定子のように見えますが、min または max は
有効な数値としてパースできませんでした: 先頭に 0 があるか、扱うには
大きすぎる値です。
S<<-- HERE> で正規表現のどこに問題が発見されたかを示しています。
L<perlre> を参照してください。

=item *

L<'%s' is an unknown bound type in regex|perldiag/"'%s' is an unknown bound type in regex; marked by <-- HERE in m/%s/">

=begin original

(F) You used C<\b{...}> or C<\B{...}> and the C<...> is not known to
Perl.  The current valid ones are given in
L<perlrebackslash/\b{}, \b, \B{}, \B>.

=end original

(F) C<\b{...}> や C<\B{...}> を使いましたが、C<...> は Perl が
知らないものでした。
現在有効なものは L<perlrebackslash/\b{}, \b, \B{}, \B> にあります。

=item *

L<Missing or undefined argument to require|perldiag/Missing or undefined argument to require>

=begin original

(F) You tried to call C<require> with no argument or with an undefined
value as an argument.  C<require> expects either a package name or a
file-specification as an argument.  See L<perlfunc/require>.

=end original

(F) 引数なしや、引数として未定義を指定して C<require> を呼び出そうとしました。
C<require> は引数としてパッケージ名かファイル指定を想定しています。
L<perlfunc/require> を参照してください。

=begin original

Formerly, C<require> with no argument or C<undef> warned about a Null filename.

=end original

以前は、引数なしや C<undef> 引数の C<require> はヌルファイル名に関する警告が
出ていました。

=back

=head3 New Warnings

(新しい警告)

=over 4

=item *

L<\C is deprecated in regex|perldiag/"\C is deprecated in regex; marked by <-- HERE in m/%s/">

=begin original

(D deprecated) The C<< /\C/ >> character class was deprecated in v5.20, and
now emits a warning. It is intended that it will become an error in v5.24.
This character class matches a single byte even if it appears within a
multi-byte character, breaks encapsulation, and can corrupt UTF-8
strings.

=end original

(D deprecated) C<< /\C/ >> 文字クラスは v5.20 で廃止予定になり、今回
警告が出るようになりました。
これは v5.24 ではエラーになることを意図しています。
この文字クラスは、例えマルチバイト文字の中に現れても単一のバイトに
マッチングし、カプセル化を壊し、UTF-8 文字列を壊すことがありました。

=item *

L<"%s" is more clearly written simply as "%s" in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"%s" is more clearly written simply as "%s" in regex; marked by <-- HERE in mE<sol>%sE<sol>>

=begin original

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

=end original

(W regexp) (C<S<use re 'strict'>> が有効か C<(?[...])> の内部のみ)

=begin original

You specified a character that has the given plainer way of writing it,
and which is also portable to platforms running with different character
sets.

=end original

より素直で、異なった文字集合で実行されるプラットフォームで移植性のある
書き方のある文字を指定しました。

=item *

L<Argument "%s" treated as 0 in increment (++)|perldiag/"Argument "%s" treated
as 0 in increment (++)">

=begin original

(W numeric) The indicated string was fed as an argument to the C<++> operator
which expects either a number or a string matching C</^[a-zA-Z]*[0-9]*\z/>.
See L<perlop/Auto-increment and Auto-decrement> for details.

=end original

(W numeric) 指定された文字列は、
数値か C</^[a-zA-Z]*[0-9]*\z/> にマッチングする文字列を想定する
C<++> 演算子への引数として指定されました。
詳しくは L<perlop/Auto-increment and Auto-decrement> を参照してください。

=item *

L<Both or neither range ends should be Unicode in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%s/">

=begin original

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

=end original

(W regexp) (C<S<use re 'strict'>> が有効か C<(?[...])> の内部のみ)

=begin original

In a bracketed character class in a regular expression pattern, you
had a range which has exactly one end of it specified using C<\N{}>, and
the other end is specified using a non-portable mechanism.  Perl treats
the range as a Unicode range, that is, all the characters in it are
considered to be the Unicode characters, and which may be different code
points on some platforms Perl runs on.  For example, C<[\N{U+06}-\x08]>
is treated as if you had instead said C<[\N{U+06}-\N{U+08}]>, that is it
matches the characters whose code points in Unicode are 6, 7, and 8.
But that C<\x08> might indicate that you meant something different, so
the warning gets raised.

=end original

正規表現の中の大かっこ文字クラスの中で範囲を指定するときに、片方は
C<\N{}> を使って指定され、もう片方は互換性のない方法で指定しました。
Perl は範囲を Unicode の範囲として扱います; これは、この中の全ての文字は
Unicode 文字として扱われるということですが、これは Perl を実行する
プラットフォームによっては異なった符号位置かもしれません。
例えば、C<[\N{U+06}-\x08]> は、C<[\N{U+06}-\N{U+08}]> と指定したかのように
扱われ、Unicode での符号位置が 6, 7, 8 の文字にマッチングします。
しかし C<\x08> は他のことを意味していることを示しているかも知れないので、
警告が発生します。

=item *

L<Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".|perldiag/Can't do %s("%s") on non-UTF-8 locale; resolved to "%s".>

=begin original

(W locale) You are 1) running under "C<use locale>"; 2) the current
locale is not a UTF-8 one; 3) you tried to do the designated case-change
operation on the specified Unicode character; and 4) the result of this
operation would mix Unicode and locale rules, which likely conflict.

=end original

(W locale) 1) "C<use locale>" の基で実行されていて; 2) 現在のロケールが
UTF-8 ではなく; 3) 特定の Unicode 文字に対して指定済みの大文字小文字変換操作を
しようとし; 4) この操作の結果が Unicode とロケールの規則を混ぜるので、
競合を引き起こしています。

=begin original

The warnings category C<locale> is new.

=end original

警告カテゴリ C<locale> は新しいものです。

=item *

L<:const is experimental|perldiag/":const is experimental">

=begin original

(S experimental::const_attr) The C<const> attribute is experimental.
If you want to use the feature, disable the warning with C<no warnings
'experimental::const_attr'>, but know that in doing so you are taking
the risk that your code may break in a future Perl version.

=end original

(S experimental::const_attr) C<const> 属性は実験的です。
この機能を使いたいときは、C<no warnings 'experimental::const_attr'> で警告を
無効にしてください;
しかしそうすると将来の Perl バージョンでコードが壊れるリスクを
取ることになります。

=item *

L<gmtime(%f) failed|perldiag/"gmtime(%f) failed">

=begin original

(W overflow) You called C<gmtime> with a number that it could not handle:
too large, too small, or NaN.  The returned value is C<undef>.

=end original

(W overflow) 扱えない数値(大きすぎたり小さすぎたり非数)を指定して C<gmtime> を
呼び出しました。
返り値は C<undef> です。

=item *

L<Hexadecimal float: exponent overflow|perldiag/"Hexadecimal float: exponent overflow">

=begin original

(W overflow) The hexadecimal floating point has larger exponent
than the floating point supports.

=end original

(W overflow) 16 進浮動小数点数が、浮動小数点数が対応しているよりも大きい
指数を持っています。

=item *

L<Hexadecimal float: exponent underflow|perldiag/"Hexadecimal float: exponent underflow">

=begin original

(W overflow) The hexadecimal floating point has smaller exponent
than the floating point supports.

=end original

(W overflow) 16 進浮動小数点数が、浮動小数点数が対応しているよりも小さい
指数を持っています。

=item *

L<Hexadecimal float: mantissa overflow|perldiag/"Hexadecimal float: mantissa overflow">

=begin original

(W overflow) The hexadecimal floating point literal had more bits in
the mantissa (the part between the C<0x> and the exponent, also known as
the fraction or the significand) than the floating point supports.

=end original

(W overflow) 16 進浮動小数点数リテラルは、浮動小数点数が対応しているよりも
多いビット数の仮数部(C<0x> と指数の間の部分)があります。

=item *

L<Hexadecimal float: precision loss|perldiag/"Hexadecimal float: precision loss">

=begin original

(W overflow) The hexadecimal floating point had internally more
digits than could be output.  This can be caused by unsupported
long double formats, or by 64-bit integers not being available
(needed to retrieve the digits under some configurations).

=end original

(W overflow) 16 進浮動小数点数は、内部では出力できるよりも多くの桁を
持っています。
これは、未対応の long double 形式や、利用できない 64 ビット整数(一部の設定で車
桁を取り出す必要がある) によって起こります。

=item *

L<Locale '%s' may not work well.%s|perldiag/Locale '%s' may not work well.%s>

=begin original

(W locale) You are using the named locale, which is a non-UTF-8 one, and
which perl has determined is not fully compatible with what it can
handle.  The second C<%s> gives a reason.

=end original

(W locale) 非 UTF-8 で、現在扱えるものと完全な互換性がないと perl が決定した
名前付きロケールを使っています。
2 番目の C<%s> に理由があります。

=begin original

The warnings category C<locale> is new.

=end original

警告カテゴリ C<locale> は新しいものです。

=item *

L<localtime(%f) failed|perldiag/"localtime(%f) failed">

=begin original

(W overflow) You called C<localtime> with a number that it could not handle:
too large, too small, or NaN.  The returned value is C<undef>.

=end original

(W overflow) 扱えない数値で C<localtime> を呼び出しました: 大きすぎたり
小さすぎたり非数だったりです。
返り値は C<undef> です。

=item *

L<Negative repeat count does nothing|perldiag/"Negative repeat count does nothing">

=begin original

(W numeric) You tried to execute the
L<C<x>|perlop/Multiplicative Operators> repetition operator fewer than 0
times, which doesn't make sense.

=end original

(W numeric) L<C<x>|perlop/Multiplicative Operators> 繰り返し演算子を 0 より
小さい回数実行しようとしました; これは無意味です。

=item *

L<NO-BREAK SPACE in a charnames alias definition is deprecated|perldiag/"NO-BREAK SPACE in a charnames alias definition is deprecated">

=begin original

(D deprecated) You defined a character name which contained a no-break
space character.  Change it to a regular space.  Usually these names are
defined in the C<:alias> import argument to C<use charnames>, but they
could be defined by a translator installed into C<$^H{charnames}>.  See
L<charnames/CUSTOM ALIASES>.

=end original

(D deprecated) ノーブレークスペースを含む文字名を定義しました。
通常のスペースに変更してください。
普通はこれらの名前は C<use charnames> の C<:alias> インポート引数で
定義されますが、C<$^H{charnames}> でインストールされた変換器によって
定義されることもあります。
L<charnames/CUSTOM ALIASES> を参照してください。

=item *

L<Non-finite repeat count does nothing|perldiag/"Non-finite repeat count does nothing">

=begin original

(W numeric) You tried to execute the
L<C<x>|perlop/Multiplicative Operators> repetition operator C<Inf> (or
C<-Inf>) or NaN times, which doesn't make sense.

=end original

(W numeric) L<C<x>|perlop/Multiplicative Operators> 繰り返し演算子を
C<Inf> (または C<-Inf>) あるいは NaN 回実行しました;
これは無意味です。

=item *

L<PerlIO layer ':win32' is experimental|perldiag/"PerlIO layer ':win32' is experimental">

=begin original

(S experimental::win32_perlio) The C<:win32> PerlIO layer is
experimental.  If you want to take the risk of using this layer,
simply disable this warning:

=end original

(S experimental::win32_perlio) C<:win32> PerlIO 層は実験的です。
この層を使うリスクを取りたいなら、単に警告を無効にしてください:

    no warnings "experimental::win32_perlio";

=item *

L<Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in mE<sol>%sE<sol>">

=begin original

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

=end original

(W regexp) (C<S<use re 'strict'>> が有効か C<(?[...])> の内部のみ)

=begin original

Stricter rules help to find typos and other errors.  Perhaps you didn't
even intend a range here, if the C<"-"> was meant to be some other
character, or should have been escaped (like C<"\-">).  If you did
intend a range, the one that was used is not portable between ASCII and
EBCDIC platforms, and doesn't have an obvious meaning to a casual
reader.

=end original

より厳密な規則はタイプミスやその他のエラーを見つける助けになります。
もし C<"-"> が他の文字を意味しているなら、おそらくそもそもここで範囲を
意図していないか、(C<"\-"> のように) エスケープするべきです。
範囲を意図しているなら、この使い方は ASCII と EBCDIC プラットフォームの間で
互換性がなく、カジュアルな読者にとっては意味が明白ではありません。

 [3-7]    # OK; Obvious and portable
 [d-g]    # OK; Obvious and portable
 [A-Y]    # OK; Obvious and portable
 [A-z]    # WRONG; Not portable; not clear what is meant
 [a-Z]    # WRONG; Not portable; not clear what is meant
 [%-.]    # WRONG; Not portable; not clear what is meant
 [\x41-Z] # WRONG; Not portable; not obvious to non-geek

=begin original

(You can force portability by specifying a Unicode range, which means that
the endpoints are specified by
L<C<\N{...}>|perlrecharclass/Character Ranges>, but the meaning may
still not be obvious.)
The stricter rules require that ranges that start or stop with an ASCII
character that is not a control have all their endpoints be a literal
character, and not some escape sequence (like C<"\x41">), and the ranges
must be all digits, or all uppercase letters, or all lowercase letters.

=end original

(両端を L<C<\N{...}>|perlrecharclass/Character Ranges> で指定して
Unicode の範囲を指定することで、移植性を強制することができます。
しかし意味はやはり明白ではありません。)
より厳密な規則は、範囲の両端の文字が制御文字でない ASCII 文字で、両端が
リテラル文字で、(C<"\x41"> のような) 一部のエスケープシーケンスではなく、
範囲は全て数字か、全て大文字か、全て小文字であることを要求します。

=item *

L<Ranges of digits should be from the same group in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Ranges of digits should be from the same group in regex; marked by <-- HERE in m/%s/">

=begin original

(W regexp) (only under C<S<use re 'strict'>> or within C<(?[...])>)

=end original

(W regexp) (C<S<use re 'strict'>> が有効か C<(?[...])> の内部のみ)

=begin original

Stricter rules help to find typos and other errors.  You included a
range, and at least one of the end points is a decimal digit.  Under the
stricter rules, when this happens, both end points should be digits in
the same group of 10 consecutive digits.

=end original

より厳密な規則はタイプミスやその他のエラーを見つける助けになります。
範囲を含んでいますが、少なくともその片方の端が数字です。
より厳密な規則の下では、これが起きたとき、両端は 10 の連続する数字の
同じグループの数字であるべきです。

=item *

L<Redundant argument in %s|perldiag/Redundant argument in %s>

=begin original

(W redundant) You called a function with more arguments than were
needed, as indicated by information within other arguments you supplied
(I<e.g>. a printf format). Currently only emitted when a printf-type format
required fewer arguments than were supplied, but might be used in the
future for I<e.g.> L<perlfunc/pack>.

=end original

(W redundant) (例えば printf フォーマットのような) 指定された他の引数の中の
情報で指定された、関数が必要としているよりも多くの引数で関数を呼び出しました。
現在のところこの警告は、printf 形式のフォーマットが要求するよりも多い数の
引数が指定されたときにのみ出力されますが、将来は (例えば
L<perlfunc/pack> のような) 他のものに使われるかも知れません。

=begin original

The warnings category C<< redundant >> is new. See also
L<[perl #121025]|https://rt.perl.org/Ticket/Display.html?id=121025>.

=end original

警告カテゴリ C<< redundant >> は新しいものです。
L<[perl #121025]|https://rt.perl.org/Ticket/Display.html?id=121025> も
参照してください。

=item *

L<Replacement list is longer than search list|perldiag/Replacement list is longer than search list>

=begin original

This is not a new diagnostic, but in earlier releases was accidentally
not displayed if the transliteration contained wide characters.  This is
now fixed, so that you may see this diagnostic in places where you
previously didn't (but should have).

=end original

これは新しい診断メッセージではありませんが、以前のリリースでは文字変換に
ワイド文字が含まれているときには誤って表示されていませんでした。
これは修正されたので、以前は表示されていなかった (しかし表示されるべきで
あった)場所でこのメッセージが出るかもしれません。

=item *

L<Use of \b{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale|perldiag/"Use of \b{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale">

=begin original

(W locale) You are matching a regular expression using locale rules,
and a Unicode boundary is being matched, but the locale is not a Unicode
one.  This doesn't make sense.  Perl will continue, assuming a Unicode
(UTF-8) locale, but the results could well be wrong except if the locale
happens to be ISO-8859-1 (Latin1) where this message is spurious and can
be ignored.

=end original

(W locale) ロケールの規則を使って正規表現をマッチングして、Unicode 境界を
マッチングしましたが、ロケールは Unicode のものではありませんでした。
これは無意味です。
Perl は Unicode (UTF-8) ロケールを仮定して続行しますが、ロケールが
偶然 ISO-8859-1 (Latin1) の場合 (この場合はこのメッセージは間違っているので
無視できます) を除いて、結果は間違ったものになります。

=begin original

The warnings category C<locale> is new.

=end original

警告カテゴリ C<locale> は新しいものです。

=item *

L<< Using E<sol>u for '%s' instead of E<sol>%s in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|perldiag/"Using E<sol>u for '%s' instead of E<sol>%s in regex; marked by <-- HERE in mE<sol>%sE<sol>" >>

=begin original

(W regexp) You used a Unicode boundary (C<\b{...}> or C<\B{...}>) in a
portion of a regular expression where the character set modifiers C</a>
or C</aa> are in effect.  These two modifiers indicate an ASCII
interpretation, and this doesn't make sense for a Unicode definition.
The generated regular expression will compile so that the boundary uses
all of Unicode.  No other portion of the regular expression is affected.

=end original

(W regexp) 修飾子 C</a> または C</aa> が有効なときに、正規表現の一部として
Unicode 境界 (C<\b{...}> や C<\B{...}>) を使いました。
これら二つの修飾子は ASCII の解釈を示していて、これは Unicode 定義では
無意味です。
生成された正規表現は、境界は全て Unicode を使います。
正規表現のその他の部分は影響を受けません。

=item *

L<The bitwise feature is experimental|perldiag/"The bitwise feature is experimental">

=begin original

(S experimental::bitwise) This warning is emitted if you use bitwise
operators (C<& | ^ ~ &. |. ^. ~.>) with the "bitwise" feature enabled.
Simply suppress the warning if you want to use the feature, but know
that in doing so you are taking the risk of using an experimental
feature which may change or be removed in a future Perl version:

=end original

(S experimental::bitwise) この警告は、"bitwise" 機能が有効なときに
ビット単位演算子 (C<& | ^ ~ &. |. ^. ~.>) を使ったときに発生します。
この機能を使いたいときは、単に警告を無効にして下さい; しかし、そうすることは
将来の Perl バージョンで変更や削除されるかも知れない実験的機能を使う
リスクを取ると言うことです:

    no warnings "experimental::bitwise";
    use feature "bitwise";
    $x |.= $y;

=item *

L<Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in mE<sol>%sE<sol>|perldiag/"Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/%s/">

=begin original

(D deprecated, regexp) You used a literal C<"{"> character in a regular
expression pattern. You should change to use C<"\{"> instead, because a future
version of Perl (tentatively v5.26) will consider this to be a syntax error.  If
the pattern delimiters are also braces, any matching right brace
(C<"}">) should also be escaped to avoid confusing the parser, for
example,

=end original

(D deprecated, regexp) 正規表現パターンの中でリテラルの C<"{"> 文字を
使いました。
代わりに C<"\{"> を使ってください; 将来のバージョンの Perl (暫定的には
v5.26) はこれを文法エラーにすることが検討されているからです。
例えば、パターン区切りが中かっこなら、マッチングする右中かっこ (C<"}">) は
パーサが混乱するのを避けるためにエスケープされるべきです:

    qr{abc\{def\}ghi}

=item *

L<Use of literal non-graphic characters in variable names is deprecated|perldiag/"Use of literal non-graphic characters in variable names is deprecated">

=begin original

(D deprecated) Using literal non-graphic (including control)
characters in the source to refer to the I<^FOO> variables, like C<$^X> and
C<${^GLOBAL_PHASE}> is now deprecated.

=end original

(D deprecated) C<$^X> や C<${^GLOBAL_PHASE}> のように、I<^FOO> 変数を
参照するためにリテラルの(制御文字を含む)非印字文字をソースに使うのは
廃止予定になりました。

=item *

L<Useless use of attribute "const"|perldiag/Useless use of attribute "const">

=begin original

(W misc) The C<const> attribute has no effect except
on anonymous closure prototypes.  You applied it to
a subroutine via L<attributes.pm|attributes>.  This is only useful
inside an attribute handler for an anonymous subroutine.

=end original

(W misc) C<const> 属性は、無名クロージャプロトタイプ以外では効果はありません。
これを L<attributes.pm|attributes> で適用しました。
これは無名サブルーチンのための属性ハンドラの内側でのみ有用です。

=item *

L<Useless use of E<sol>d modifier in transliteration operator|perldiag/"Useless use of /d modifier in transliteration operator">

=begin original

This is not a new diagnostic, but in earlier releases was accidentally
not displayed if the transliteration contained wide characters.  This is
now fixed, so that you may see this diagnostic in places where you
previously didn't (but should have).

=end original

これは新しい診断メッセージではありませんが、以前のリリースでは文字変換に
ワイド文字が含まれているときには誤って表示されていませんでした。
これは修正されたので、以前は表示されていなかった (しかし表示されるべきで
あった)場所でこのメッセージが出るかもしれません。

=item *

L<E<quot>use re 'strict'E<quot> is experimental|perldiag/"use re 'strict'" is experimental>

=begin original

(S experimental::re_strict) The things that are different when a regular
expression pattern is compiled under C<'strict'> are subject to change
in future Perl releases in incompatible ways; there are also proposals
to change how to enable strict checking instead of using this subpragma.
This means that a pattern that compiles today may not in a future Perl
release.  This warning is to alert you to that risk.

=end original

(S experimental::re_strict) 正規表現パターンが C<'strict'> の基で
コンパイルされたときの違いは、将来の Perl リリースで互換性のない形で
変更される予定です; また、厳密なチェックを有効にするのにこの副プラグマを
使わないように変更する提案もあります。
これは、今コンパイルしているパターンは将来の Perl リリースでは
コンパイルできなくなるかも知れないと言うことです。
この警告はこのリスクを知らせるためのものです。

=item *

L<Warning: unable to close filehandle properly: %s|perldiag/"Warning: unable to close filehandle properly: %s">

L<Warning: unable to close filehandle %s properly: %s|perldiag/"Warning: unable to close filehandle %s properly: %s">

=begin original

(S io) Previously, perl silently ignored any errors when doing an implicit
close of a filehandle, I<i.e.> where the reference count of the filehandle
reached zero and the user's code hadn't already called C<close()>; I<e.g.>

=end original

(S io) 以前は、perl はファイルハンドルを暗黙に閉じるときのエラーを
暗黙に無視していました; つまり、ファイルハンドルの参照カウントが 0 になって
ユーザのコードがすでに C<close()> を呼び出していない場合です; 例えば

    {
        open my $fh, '>', $file  or die "open: '$file': $!\n";
        print $fh, $data  or die;
    } # implicit close here

=begin original

In a situation such as disk full, due to buffering, the error may only be
detected during the final close, so not checking the result of the close is
dangerous.

=end original

ディスクフルのような状況では、バッファリングのために、エラーは最後の
close のときにのみ検出されるかも知れないので、close の結果をチェックしないのは
危険です。

=begin original

So perl now warns in such situations.

=end original

それで、perl はこのような状況を警告します。

=item *

L<Wide character (U+%X) in %s|perldiag/"Wide character (U+%X) in %s">

=begin original

(W locale) While in a single-byte locale (I<i.e.>, a non-UTF-8
one), a multi-byte character was encountered.   Perl considers this
character to be the specified Unicode code point.  Combining non-UTF-8
locales and Unicode is dangerous.  Almost certainly some characters
will have two different representations.  For example, in the ISO 8859-7
(Greek) locale, the code point 0xC3 represents a Capital Gamma.  But so
also does 0x393.  This will make string comparisons unreliable.

=end original

(W locale) 単一文字ロケール (つまり、非 UTF-8) なのに、マルチバイト文字に
遭遇しました。
Perl はこの文字を指定された Unicode 符号位置と考えます。
非 UTF-8 ロケールと Unicode の結合は危険です。
ほぼ確実に一部の文字は二つの異なった表現があります。
例えば、ISO 8859-7 (ギリシャ語) ロケールでは、符号位置 0xC3 は大文字の
ガンマを表現します。
しかし 0x393 もそうです。
これは文字列比較を信頼できないものにします。

=begin original

You likely need to figure out how this multi-byte character got mixed up
with your single-byte locale (or perhaps you thought you had a UTF-8
locale, but Perl disagrees).

=end original

おそらくこのマルチバイト文字がどのようにして単一文字ロケールで混ざったかを
見つけ出す必要があるでしょう (またはおそらくあなたは UTF-8 ロケールを
使っていると考えていますが、Perl は反対しています)。

=begin original

The warnings category C<locale> is new.

=end original

警告カテゴリ C<locale> は新しいものです。

=back

=head2 Changes to Existing Diagnostics

(既存の診断メッセージの変更)

=over 4

=item *

<> should be quotes

=begin original

This warning has been changed to
L<< <> at require-statement should be quotes|perldiag/"<> at require-statement should be quotes" >>
to make the issue more identifiable.

=end original

この警告は、問題をより識別可能にするために、
L<< <> at require-statement should be quotes|perldiag/"<> at require-statement should be quotes" >>
に変更されました。

=item *

L<Argument "%s" isn't numeric%s|perldiag/"Argument "%s" isn't numeric%s">

=begin original

The L<perldiag> entry for this warning has added this clarifying note:

=end original

この警告の L<perldiag> エントリは次の明確化のための注意が追加されました:

 Note that for the Inf and NaN (infinity and not-a-number) the
 definition of "numeric" is somewhat unusual: the strings themselves
 (like "Inf") are considered numeric, and anything following them is
 considered non-numeric.

=item *

L<Global symbol "%s" requires explicit package name|perldiag/"Global symbol "%s" requires explicit package name (did you forget to declare "my %s"?)">

=begin original

This message has had '(did you forget to declare "my %s"?)' appended to it, to
make it more helpful to new Perl programmers.
L<[perl #121638]|https://rt.perl.org/Ticket/Display.html?id=121638>

=end original

このメッセージは、新しい Perl プログラマにより助けになるように、
'(did you forget to declare "my %s"?)' が追加されました。
L<[perl #121638]|https://rt.perl.org/Ticket/Display.html?id=121638>

=item *

=begin original

'"my" variable &foo::bar can't be in a package' has been reworded to say
'subroutine' instead of 'variable'.

=end original

'"my" variable &foo::bar can't be in a package' は 'variable' から
'subroutine' に書き直されました。

=item *

L<<< \N{} in character class restricted to one character in regex; marked by
S<< <-- HERE >> in mE<sol>%sE<sol>|perldiag/"\N{} in inverted character
class or as a range end-point is restricted to one character in regex;
marked by <-- HERE in m/%s/" >>>

=begin original

This message has had I<character class> changed to I<inverted character
class or as a range end-point is> to reflect improvements in
C<qr/[\N{named sequence}]/> (see under L</Selected Bug Fixes>).

=end original

このメッセージは、C<qr/[\N{named sequence}]/> の改良 (後述の
L</Selected Bug Fixes> 参照)を反映して、I<character class> が
I<inverted character class or as a range end-point is> に変更されました。

=item *

L<panic: frexp|perldiag/"panic: frexp: %f">

=begin original

This message has had ': C<%f>' appended to it, to show what the offending
floating point number is.

=end original

このメッセージは、問題となった小数点数が何かを示すための ': C<%f>' が
追加されました。

=item *

=begin original

I<Possible precedence problem on bitwise %c operator> reworded as
L<Possible precedence problem on bitwise %s operator|perldiag/"Possible precedence problem on bitwise %s operator">.

=end original

I<Possible precedence problem on bitwise %c operator> は
L<Possible precedence problem on bitwise %s operator|perldiag/"Possible precedence problem on bitwise %s operator"> に
書き直されました。

=item *

L<Unsuccessful %s on filename containing newline|perldiag/"Unsuccessful %s on filename containing newline">

=begin original

This warning is now only produced when the newline is at the end of
the filename.

=end original

この警告は、改行がファイル名の末尾にあるときにのみ出力されるようになりました。

=item *

=begin original

"Variable C<%s> will not stay shared" has been changed to say "Subroutine"
when it is actually a lexical sub that will not stay shared.

=end original

"Variable C<%s> will not stay shared" は、共有されないものが実際には
レキシカルサブルーチンの場合は "Subroutine" と出力するようになりました。

=item *

L<Variable length lookbehind not implemented in regex mE<sol>%sE<sol>|perldiag/"Variable length lookbehind not implemented in regex m/%s/">

=begin original

The L<perldiag> entry for this warning has had information about Unicode
behavior added.

=end original

この警告のための L<perldiag> エントリに、Unicode の振る舞いに関する情報が
追加されました。

=back

=head2 Diagnostic Removals

(診断メッセージの削除)

=over

=item *

"Ambiguous use of -foo resolved as -&foo()"

=begin original

There is actually no ambiguity here, and this impedes the use of negated
constants; I<e.g.>, C<-Inf>.

=end original

実際にはここに曖昧さはなく、これが否定の定数の使用を妨げていました;
例えば C<-Inf> 。

=item *

"Constant is not a FOO reference"

=begin original

Compile-time checking of constant dereferencing (I<e.g.>, C<< my_constant->() >>)
has been removed, since it was not taking overloading into account.
L<[perl #69456]|https://rt.perl.org/Ticket/Display.html?id=69456>
L<[perl #122607]|https://rt.perl.org/Ticket/Display.html?id=122607>

=end original

コンパイル時の定数デリファレンス (例えば C<< my_constant->() >>) の
チェックは削除されました; これはオーバーロードを考慮していなかったからです。
L<[perl #69456]|https://rt.perl.org/Ticket/Display.html?id=69456>
L<[perl #122607]|https://rt.perl.org/Ticket/Display.html?id=122607>

=back

=head1 Utility Changes

(ツールの変更)

=head2 F<find2perl>, F<s2p> and F<a2p> removal

(F<find2perl>, F<s2p>, F<a2p> の削除)

=over 4

=item *

=begin original

The F<x2p/> directory has been removed from the Perl core.

=end original

F<x2p/> ディレクトリは Perl コアから削除されました。

=begin original

This removes find2perl, s2p and a2p. They have all been released to CPAN as
separate distributions (C<App::find2perl>, C<App::s2p>, C<App::a2p>).

=end original

これは find2perl, s2p, a2p を削除します。
これらは全て別々の配布として CPAN にリリースされています
(C<App::find2perl>, C<App::s2p>, C<App::a2p>)。

=back

=head2 L<h2ph>

=over 4

=item *

=begin original

F<h2ph> now handles hexadecimal constants in the compiler's predefined
macro definitions, as visible in C<$Config{cppsymbols}>.
L<[perl #123784]|https://rt.perl.org/Ticket/Display.html?id=123784>.

=end original

F<h2ph> は、C<$Config{cppsymbols}> で見えるように、コンパイラの事前定義
マクロ定義で 16 進定数が使えるようになりました。
L<[perl #123784]|https://rt.perl.org/Ticket/Display.html?id=123784>.

=back

=head2 L<encguess>

=over 4

=item *

=begin original

No longer depends on non-core modules.

=end original

もはや非コアモジュールに依存しなくなりました。

=back

=head1 Configuration and Compilation

(設定とコンパイル)

=over 4

=item *

=begin original

F<Configure> now checks for C<lrintl()>, C<lroundl()>, C<llrintl()>, and
C<llroundl()>.

=end original

F<Configure> は C<lrintl()>, C<lroundl()>, C<llrintl()>, C<llroundl()> を
チェックするようになりました。

=item *

=begin original

F<Configure> with C<-Dmksymlinks> should now be faster.
L<[perl #122002]|https://rt.perl.org/Ticket/Display.html?id=122002>.

=end original

C<-Dmksymlinks> 付きの F<Configure> はより高速になりました。
L<[perl #122002]|https://rt.perl.org/Ticket/Display.html?id=122002>.

=item *

=begin original

The C<pthreads> and C<cl> libraries will be linked by default if present.
This allows XS modules that require threading to work on non-threaded
perls. Note that you must still pass C<-Dusethreads> if you want a
threaded perl.

=end original

C<pthreads> と C<cl> のライブラリは、もし存在すればデフォルトで
リンクされるようになりました。
これにより、スレッドが必要な XS モジュールが非スレッド perl で
動作するようになります。
スレッド perl が欲しい時には C<-Dusethreads> を渡さなければならないことは
変わらないことに注意してください。

=item *

=begin original

For long doubles (to get more precision and range for floating point numbers)
one can now use the GCC quadmath library which implements the quadruple
precision floating point numbers on x86 and IA-64 platforms.  See
F<INSTALL> for details.

=end original

(浮動小数点数のより高い精度と範囲のためを得るための) long double に関して、
x86 と IA-64 プラットフォームで 4 倍精度浮動小数点を実装している
GCC quadmath ライブラリを使えるようになりました。
詳しくは F<INSTALL> を参照してください。

=item *

=begin original

MurmurHash64A and MurmurHash64B can now be configured as the internal hash
function.

=end original

MurmurHash64A と MurmurHash64B が内部ハッシュ関数として
設定できるようになりました。

=item *

=begin original

C<make test.valgrind> now supports parallel testing.

=end original

C<make test.valgrind> は並列テストに対応しました。

=begin original

For example:

=end original

例えば:

    TEST_JOBS=9 make test.valgrind

=begin original

See L<perlhacktips/valgrind> for more information.

=end original

さらなる情報については L<perlhacktips/valgrind> を参照してください。

L<[perl #121431]|https://rt.perl.org/Ticket/Display.html?id=121431>

=item *

=begin original

The MAD (Misc Attribute Decoration) build option has been removed

=end original

MAD (Misc Attribute Decoration) ビルドオプションが削除されました。

=begin original

This was an unmaintained attempt at preserving
the Perl parse tree more faithfully so that automatic conversion of
Perl 5 to Perl 6 would have been easier.

=end original

これは、Perl 5 から Perl 6 への自動変換をより容易にするために、
Perl パース木をより性格に保存しようとする、保守されていない試みでした。

=begin original

This build-time configuration option had been unmaintained for years,
and had probably seriously diverged on both Perl 5 and Perl 6 sides.

=end original

このビルド時設定オプションは何年も保守されておらず、おそらく
Perl 5 からも Perl 6 からも大きく逸れています。

=item *

=begin original

A new compilation flag, C<< -DPERL_OP_PARENT >> is available. For details,
see the discussion below at L<< /Internal Changes >>.

=end original

新しいコンパイルフラグ C<< -DPERL_OP_PARENT >> が利用可能になりました。
詳しくは、後述する L<< /Internal Changes >> での議論を参照してください。

=item *

=begin original

Pathtools no longer tries to load XS on miniperl. This speeds up building perl
slightly.

=end original

Pathtools はもはや miniperl で XS を読み込もうとしなくなりました。
これにより perl のビルドが少し高速化します。

=back

=head1 Testing

(テスト)

=over 4

=item *

=begin original

F<t/porting/re_context.t> has been added to test that L<utf8> and its
dependencies only use the subset of the C<$1..$n> capture vars that
C<Perl_save_re_context()> is hard-coded to localize, because that function
has no efficient way of determining at runtime what vars to localize.

=end original

 has been added to test that

L<utf8> とその依存が、(関数がどの変数がローカル化されるかを実行時に決定する
効率的な方法がないために) C<Perl_save_re_context()> がローカル化されるように
ハードコーディングされている C<$1..$n> 捕捉変数の部分集合のみを
使っているかどうかをテストするための F<t/porting/re_context.t> が
追加されました。

=item *

=begin original

Tests for performance issues have been added in the file F<t/perf/taint.t>.

=end original

性能問題のテストが F<t/perf/taint.t> ファイルに追加されました。

=item *

=begin original

Some regular expression tests are written in such a way that they will
run very slowly if certain optimizations break. These tests have been
moved into new files, F<< t/re/speed.t >> and F<< t/re/speed_thr.t >>,
and are run with a C<< watchdog() >>.

=end original

一部の正規表現テストは、特定の最適化が崩れると、実行速度がとても遅くなるような
形で書かれていました。
これらのテストは新しいファイル F<< t/re/speed.t >> と
F<< t/re/speed_thr.t >> に移され、C<< watchdog() >> で実行されます。

=item *

=begin original

C<< test.pl >> now allows C<< plan skip_all => $reason >>, to make it
more compatible with C<< Test::More >>.

=end original

C<< test.pl >> は、C<< Test::More >> との互換性を高めるために、
C<< plan skip_all => $reason >> と指定できるようになりました。

=item *

=begin original

A new test script, F<op/infnan.t>, has been added to test if infinity and NaN are
working correctly.  See L</Infinity and NaN (not-a-number) handling improved>.

=end original

新しいテストスクリプト F<op/infnan.t> が、無限と NaN が正しく動作するかを
テストするために追加されました。
L</Infinity and NaN (not-a-number) handling improved> を参照してください。

=back

=head1 Platform Support

(プラットフォーム対応)

=head2 Regained Platforms

(再開したプラットフォーム)

=over 4

=item IRIX and Tru64 platforms are working again.

(IRIX と Tru64 プラットフォームで再び動作するようになりました。)

=begin original

Some C<make test> failures remain:
L<[perl #123977]|https://rt.perl.org/Ticket/Display.html?id=123977>
and L<[perl #125298]|https://rt.perl.org/Ticket/Display.html?id=125298>
for IRIX; L<[perl #124212]|https://rt.perl.org/Ticket/Display.html?id=124212>,
L<[cpan #99605]|https://rt.cpan.org/Public/Bug/Display.html?id=99605>, and
L<[cpan #104836|https://rt.cpan.org/Ticket/Display.html?id=104836> for Tru64.

=end original

一部の C<make test> の失敗は残っています:
IRIX では
L<[perl #123977]|https://rt.perl.org/Ticket/Display.html?id=123977> と
L<[perl #125298]|https://rt.perl.org/Ticket/Display.html?id=125298>;
Tru64 では
L<[perl #124212]|https://rt.perl.org/Ticket/Display.html?id=124212>,
L<[cpan #99605]|https://rt.cpan.org/Public/Bug/Display.html?id=99605>,
L<[cpan #104836|https://rt.cpan.org/Ticket/Display.html?id=104836>。

=item z/OS running EBCDIC Code Page 1047

=begin original

Core perl now works on this EBCDIC platform.  Earlier perls also worked, but,
even though support wasn't officially withdrawn, recent perls would not compile
and run well.  Perl 5.20 would work, but had many bugs which have now been
fixed.  Many CPAN modules that ship with Perl still fail tests, including
C<Pod::Simple>.  However the version of C<Pod::Simple> currently on CPAN should work;
it was fixed too late to include in Perl 5.22.  Work is under way to fix many
of the still-broken CPAN modules, which likely will be installed on CPAN when
completed, so that you may not have to wait until Perl 5.24 to get a working
version.

=end original

コア perl はこの EBCDIC プラットフォームで動作するようになりました。
以前の perl も動作しますが、公式には対応を中断していたわけではないにも
関わらず、最近の perl はうまくコンパイルおよび動作していませんでした。
Perl 5.20 では動作していましたが、今は修正されている多くのバグを
持っていました。
C<Pod::Simple> を含む、Perl に同梱されている多くの CPAN モジュールはまだ
テストに失敗します。
しかし、現在 CPAN にあるバージョンの C<Pod::Simple> は動作するはずです;
Perl 5.22 に含めるには修正が遅すぎました。
まだ壊れている CPAN モジュールの多くも修正作業中で、それが完了すれば
CPAN からインストールできるようになる予定なので、動作するバージョンを
得るために Perl 5.24 まで待つ必要はないでしょう。

=back

=head2 Discontinued Platforms

(中断したプラットフォーム)

=over 4

=item NeXTSTEP/OPENSTEP

=begin original

NeXTSTEP was a proprietary operating system bundled with NeXT's
workstations in the early to mid 90s; OPENSTEP was an API specification
that provided a NeXTSTEP-like environment on a non-NeXTSTEP system.  Both
are now long dead, so support for building Perl on them has been removed.

=end original

NeXTSTEP は 90 年代初頭から中盤に書けて NeXT のワークステーションに同梱された
プロプリエタリなオペレーティングシステムです; OPENSTEP は
非 NeXTSTEP システムに NeXTSTEP 風の環境を提供するための API 仕様です。
どちらもずっと前に死んでいるので、これらで Perl をビルドするための対応は
削除されました。

=back

=head2 Platform-Specific Notes

(プラットフォーム固有の注意)

=over 4

=item EBCDIC

=begin original

Special handling is required of the perl interpreter on EBCDIC platforms
to get C<qr/[i-j]/> to match only C<"i"> and C<"j">, since there are 7
characters between the
code points for C<"i"> and C<"j">.  This special handling had only been
invoked when both ends of the range are literals.  Now it is also
invoked if any of the C<\N{...}> forms for specifying a character by
name or Unicode code point is used instead of a literal.  See
L<perlrecharclass/Character Ranges>.

=end original

EBCDIC プラットフォームで C<qr/[i-j]/> が C<"i"> と C<"j"> のみに
マッチングするために、perl インタプリタは特別な扱いが必要です;
符号位置 C<"i"> と C<"j"> の間には 7 文字あるからです。
この特別扱いは範囲の両方の端がリテラルの時にのみ行われます。
これは、文字を指定するのにリテラルではなく C<\N{...}> 形式で名前や Unicode
符号位置を使っている場合も行われるようになりました。
L<perlrecharclass/Character Ranges> を参照してください。

=item HP-UX

=begin original

The archname now distinguishes use64bitint from use64bitall.

=end original

archname は use64bitint を use64bitall と区別するようになりました。

=item Android

=begin original

Build support has been improved for cross-compiling in general and for
Android in particular.

=end original

一般的なクロスコンパイルと、特に Android 用で、ビルド対応が改善しました。

=item VMS

=over 4

=item *

=begin original

When spawning a subprocess without waiting, the return value is now
the correct PID.

=end original

wait なしで副プロセスを spawn するとき、返り値は正しい PID になりました。

=item *

=begin original

Fix a prototype so linking doesn't fail under the VMS C++ compiler.

=end original

プロトタイプを修正したので、VMS C++ コンパイラで失敗しなくなりました。

=item *

=begin original

C<finite>, C<finitel>, and C<isfinite> detection has been added to
C<configure.com>, environment handling has had some minor changes, and
a fix for legacy feature checking status.

=end original

C<finite>, C<finitel>, C<isfinite> の検出が C<configure.com> に追加され、
環境の扱いが少し変更され、レガシー機能チェック状態が修正されました。

=back

=item Win32

=over 4

=item *

=begin original

F<miniperl.exe> is now built with C<-fno-strict-aliasing>, allowing 64-bit
builds to complete on GCC 4.8.
L<[perl #123976]|https://rt.perl.org/Ticket/Display.html?id=123976>

=end original

F<miniperl.exe> は、GCC 4.8 でビルドが完了できるように、
C<-fno-strict-aliasing> 付きでビルドされるようになりました。
L<[perl #123976]|https://rt.perl.org/Ticket/Display.html?id=123976>

=item *

=begin original

C<nmake minitest> now works on Win32.  Due to dependency issues you
need to build C<nmake test-prep> first, and a small number of the
tests fail.
L<[perl #123394]|https://rt.perl.org/Ticket/Display.html?id=123394>

=end original

C<nmake minitest> は Win32 で動作するようになりました。
依存の問題により、最初に C<nmake test-prep> をビルドする必要があり、
また少数のテストが失敗します。
L<[perl #123394]|https://rt.perl.org/Ticket/Display.html?id=123394>

=item *

=begin original

Perl can now be built in C++ mode on Windows by setting the makefile macro
C<USE_CPLUSPLUS> to the value "define".

=end original

makefile マクロ C<USE_CPLUSPLUS> の値を "define" にすることで、
Windows で Perl を C++ モードでビルド出来るようになりました。

=item *

=begin original

The list form of piped open has been implemented for Win32.  Note: unlike
C<system LIST> this does not fall back to the shell.
L<[perl #121159]|https://rt.perl.org/Ticket/Display.html?id=121159>

=end original

リスト形式のパイプが Win32 に実装されました。
注意: C<system LIST> と違って、これはシェルにフォールバックしません。
L<[perl #121159]|https://rt.perl.org/Ticket/Display.html?id=121159>

=item *

=begin original

New C<DebugSymbols> and C<DebugFull> configuration options added to
Windows makefiles.

=end original

新しい C<DebugSymbols> と C<DebugFull> の設定オプションが Windows の
makefile に追加されました。

=item *

=begin original

Previously, compiling XS modules (including CPAN ones) using Visual C++ for
Win64 resulted in around a dozen warnings per file from F<hv_func.h>.  These
warnings have been silenced.

=end original

以前は、Win64 用の Visual C++ で (CPAN のものを含む) XS モジュールを
コンパイルすると、F<hv_func.h> から大量の警告が出ていました。
これらの警告は出なくなりました。

=item *

=begin original

Support for building without PerlIO has been removed from the Windows
makefiles.  Non-PerlIO builds were all but deprecated in Perl 5.18.0 and are
already not supported by F<Configure> on POSIX systems.

=end original

PerlIO なしでのビルド対応が Windows の makefile から削除されました。
非 PerlIO ビルドは Perl 5.18.0 でほとんど廃止予定になっていて、既に
POSIX システムでは F<Configure> が対応していなくなっていました。

=item *

=begin original

Between 2 and 6 milliseconds and seven I/O calls have been saved per attempt
to open a perl module for each path in C<@INC>.

=end original

C<@INC> のそれぞれのパスで perl モジュールを開こうとする毎に、2 から
6 ミリ秒と 7 回の I/O 呼び出しを節約するようになりました。

=item *

=begin original

Intel C builds are now always built with C99 mode on.

=end original

Intel C ビルドは常に C99 モードをオンにしてビルドされるようになりました。

=item *

=begin original

C<%I64d> is now being used instead of C<%lld> for MinGW.

=end original

MinGW では常に C<%lld> の代わりに C<%I64d> が使われるようになりました。

=item *

=begin original

In the experimental C<:win32> layer, a crash in C<open> was fixed. Also
opening F</dev/null> (which works under Win32 Perl's default C<:unix>
layer) was implemented for C<:win32>.
L<[perl #122224]|https://rt.perl.org/Ticket/Display.html?id=122224>

=end original

実験的な C<:win32> 層で、C<open> でのクラッシュが修正されました。
また、F</dev/null> を開くこと (Win32 Perl のデフォルトの C<:unix> 層では
対応していました) は C<:win32> で対応しました。
L<[perl #122224]|https://rt.perl.org/Ticket/Display.html?id=122224>

=item *

=begin original

A new makefile option, C<USE_LONG_DOUBLE>, has been added to the Windows
dmake makefile for gcc builds only.  Set this to "define" if you want perl to
use long doubles to give more accuracy and range for floating point numbers.

=end original

新しい makefile オプション C<USE_LONG_DOUBLE> が、gcc ビルドのためだけに
Windows dmake makefile に追加されました。
よりよい精度と、より広い浮動小数点数の範囲のために long double を使いたい
ときは、これを "define" に設定します。

=back

=item OpenBSD

=begin original

On OpenBSD, Perl will now default to using the system C<malloc> due to the
security features it provides. Perl's own malloc wrapper has been in use
since v5.14 due to performance reasons, but the OpenBSD project believes
the tradeoff is worth it and would prefer that users who need the speed
specifically ask for it.

=end original

OpenBSD では、Perl はデフォルトではシステムの C<malloc> を使うように
なりました; これが提供するセキュリティ機能のためです。
Perl 自身の malloc ラッパは性能上の理由により v5.14 から使われていましたが、
OpenBSD プロジェクトは、このトレードオフは価値があり、特に速度が必要な
ユーザが求めることを好みます。

L<[perl #122000]|https://rt.perl.org/Ticket/Display.html?id=122000>.

=item Solaris

=over 4

=item *

=begin original

We now look for the Sun Studio compiler in both F</opt/solstudio*> and
F</opt/solarisstudio*>.

=end original

Sun Studio コンパイラのために F</opt/solstudio*> と
F</opt/solarisstudio*> の両方を探すようになりました。

=item *

=begin original

Builds on Solaris 10 with C<-Dusedtrace> would fail early since make
didn't follow implied dependencies to build C<perldtrace.h>.  Added an
explicit dependency to C<depend>.
L<[perl #120120]|https://rt.perl.org/Ticket/Display.html?id=120120>

=end original

C<-Dusedtrace> 付きでの Solaris 10 でのビルドは、make が
C<perldtrace.h> をビルドするための暗黙の依存性に従っていなかったので、
早くに失敗していました。
明示的な依存関係が C<depend> に追加されました。
L<[perl #120120]|https://rt.perl.org/Ticket/Display.html?id=120120>

=item *

=begin original

C99 options have been cleaned up; hints look for C<solstudio>
as well as C<SUNWspro>; and support for native C<setenv> has been added.

=end original

C99 オプションは整理されました; ヒントファイルは C<SUNWspro> と同様
C<solstudio> も探すようになりました; ネイティブな C<setenv> の対応が
追加されました。

=back

=back

=head1 Internal Changes

(内部の変更)

=over 4

=item *

=begin original

Experimental support has been added to allow ops in the optree to locate
their parent, if any. This is enabled by the non-default build option
C<-DPERL_OP_PARENT>. It is envisaged that this will eventually become
enabled by default, so XS code which directly accesses the C<op_sibling>
field of ops should be updated to be future-proofed.

=end original

op 木の op を、可能ならその親に配置することを許す実験的機能が追加されました。
これは非デフォルトビルドオプション C<-DPERL_OP_PARENT> で有効になります。
これは最終的にデフォルトで有効になることが予想されるので、
op の C<op_sibling> に直接アクセスしている XS コードは、将来も
動作させるために更新されるべきです。

=begin original

On C<PERL_OP_PARENT> builds, the C<op_sibling> field has been renamed
C<op_sibparent> and a new flag, C<op_moresib>, added. On the last op in a
sibling chain, C<op_moresib> is false and C<op_sibparent> points to the
parent (if any) rather than being C<NULL>.

=end original

C<PERL_OP_PARENT> ビルドでは、C<op_sibling> フィールドが C<op_sibparent> に
リネームされ、新しいフラグ C<op_moresib> が追加されました。
兄弟のチェーンの最後の op では、C<op_moresib> は偽で、C<op_sibparent> は
C<NULL> ではなく (いれば) 親を差します。

=begin original

To make existing code work transparently whether using C<PERL_OP_PARENT>
or not, a number of new macros and functions have been added that should
be used, rather than directly manipulating C<op_sibling>.

=end original

既存のコードが C<PERL_OP_PARENT> を使うかどうかに関わらず透過的に
動作するようにするために、直接 C<op_sibling> を操作する代わりに使われるべき
多くのマクロと関数が追加されました。

=begin original

For the case of just reading C<op_sibling> to determine the next sibling,
two new macros have been added. A simple scan through a sibling chain
like this:

=end original

次の兄弟を決定するために単に C<op_sibling> を読むために、二つの新しい
マクロが追加されました。
兄弟チェーンの単純なスキャンは次のようなものです:

    for (; kid->op_sibling; kid = kid->op_sibling) { ... }

=begin original

should now be written as:

=end original

これは以下のように書くべきです:

    for (; OpHAS_SIBLING(kid); kid = OpSIBLING(kid)) { ... }

=begin original

For altering optrees, a general-purpose function C<op_sibling_splice()>
has been added, which allows for manipulation of a chain of sibling ops.
By analogy with the Perl function C<splice()>, it allows you to cut out
zero or more ops from a sibling chain and replace them with zero or more
new ops.  It transparently handles all the updating of sibling, parent,
op_last pointers etc.

=end original

op 木を変更するために、汎用関数 C<op_sibling_splice()> が追加されました;
これは兄弟 op のチェーンを操作できます。
Perl 関数 C<splice()> との類似で、兄弟チェーンから 0 または複数の
op を切り取って、これを 0 または複数の新しい op と置き換えます。
これは兄弟、親、op_last ポインタなど全ての更新を透過的に扱います。

=begin original

If you need to manipulate ops at a lower level, then three new macros,
C<OpMORESIB_set>, C<OpLASTSIB_set> and C<OpMAYBESIB_set> are intended to
be a low-level portable way to set C<op_sibling> / C<op_sibparent> while
also updating C<op_moresib>.  The first sets the sibling pointer to a new
sibling, the second makes the op the last sibling, and the third
conditionally does the first or second action.  Note that unlike
C<op_sibling_splice()> these macros won't maintain consistency in the
parent at the same time (I<e.g.> by updating C<op_first> and C<op_last> where
appropriate).

=end original

低レベルで op を操作する必要がある場合、三つのマクロ
C<OpMORESIB_set>, C<OpLASTSIB_set>, C<OpMAYBESIB_set> は、
C<op_sibling> / C<op_sibparent> を設定し、また C<op_moresib> を更新する
低レベルの互換性のある方法を意図しています。
最初のものは新しい兄弟への兄弟ポインタを設定し、2 番目は op を
最後の兄弟にし、3 番目は最初や 2 番目の動作を条件付きで行います。
C<op_sibling_splice()> と違って、同時に (つまり適切な場所で C<op_first> と
C<op_last> を更新することで) 親に対して一貫性を管理しないことに
注意してください。

=begin original

A C-level C<Perl_op_parent()> function and a Perl-level C<B::OP::parent()>
method have been added. The C function only exists under
C<PERL_OP_PARENT> builds (using it is build-time error on vanilla
perls).  C<B::OP::parent()> exists always, but on a vanilla build it
always returns C<NULL>. Under C<PERL_OP_PARENT>, they return the parent
of the current op, if any. The variable C<$B::OP::does_parent> allows you
to determine whether C<B> supports retrieving an op's parent.

=end original

C レベルの C<Perl_op_parent()> 関数と、Perl レベルの C<B::OP::parent()>
メソッドが追加されました。
C 関数は C<PERL_OP_PARENT> ビルドの基でのみ存在します (これを通常の perl で
使うとビルド時エラーになります)。
C<B::OP::parent()> は常に存在しますが、通常のビルドではこれは常に
C<NULL> を返します。
C<PERL_OP_PARENT> の基では、もしあれば現在の op の親を返します。
C<$B::OP::does_parent> 変数は、C<B> が op の親の取得に対応しているかどうかを
決定できるようにします。

=begin original

C<PERL_OP_PARENT> was introduced in 5.21.2, but the interface was
changed considerably in 5.21.11. If you updated your code before the
5.21.11 changes, it may require further revision. The main changes after
5.21.2 were:

=end original

C<PERL_OP_PARENT> は 5.21.2 で導入されましたが、インターフェースは
5.21.11 でかなり変わりました。
コードを 5.21.11 の変更以前のものから更新する場合、さらなる見直しが必要です。
5.21.2 以降の主な変更点は:

=over 4

=item *

=begin original

The C<OP_SIBLING> and C<OP_HAS_SIBLING> macros have been renamed
C<OpSIBLING> and C<OpHAS_SIBLING> for consistency with other
op-manipulating macros.

=end original

C<OP_SIBLING> マクロと C<OP_HAS_SIBLING> マクロは、他の op 操作マクロとの
一貫性のために C<OpSIBLING> および C<OpHAS_SIBLING> にリネームされました。

=item *

=begin original

The C<op_lastsib> field has been renamed C<op_moresib>, and its meaning
inverted.

=end original

C<op_lastsib> フィールドは C<op_moresib> にリネームされ、意味が
反転されました。

=item *

=begin original

The macro C<OpSIBLING_set> has been removed, and has been superseded by
C<OpMORESIB_set> I<et al>.

=end original

C<OpSIBLING_set> マクロは削除され、C<OpMORESIB_set> I<など> で
置き換えられました。

=item *

=begin original

The C<op_sibling_splice()> function now accepts a null C<parent> argument
where the splicing doesn't affect the first or last ops in the sibling
chain

=end original

C<op_sibling_splice()> 関数は、splice が兄弟の連鎖の最初や最後の op に
影響を与えないときには C<parent> 引数に null を指定できるようになりました。

=back

=item *

=begin original

Macros have been created to allow XS code to better manipulate the POSIX locale
category C<LC_NUMERIC>.  See L<perlapi/Locale-related functions and macros>.

=end original

XS コードがよりよく POSIX ロケールカテゴリ C<LC_NUMERIC> を操作するための
マクロが作成されました。
L<perlapi/Locale-related functions and macros> を参照してください。

=item *

=begin original

The previous C<atoi> I<et al> replacement function, C<grok_atou>, has now been
superseded by C<grok_atoUV>.  See L<perlclib> for details.

=end original

以前の C<atoi> I<など> の代替関数である C<grok_atou> は
C<grok_atoUV> によって置き換えられました。
詳しくは L<perlclib> を参照してください。

=item *

=begin original

A new function, C<Perl_sv_get_backrefs()>, has been added which allows you
retrieve the weak references, if any, which point at an SV.

=end original

SV が示しているものがあれば、それに関する弱いリファレンスを取得できる
新しい関数 C<Perl_sv_get_backrefs()> が追加されました。

=item *

=begin original

The C<screaminstr()> function has been removed. Although marked as
public API, it was undocumented and had no usage in CPAN modules. Calling
it has been fatal since 5.17.0.

=end original

C<screaminstr()> 関数は削除されました。
公式 API として扱われていましたが、文書化されておらず、使っている
CPAN モジュールはありません。
5.17.0 から、これを呼び出すと致命的エラーになっていました。

=item *

=begin original

The C<newDEFSVOP()>, C<block_start()>, C<block_end()> and C<intro_my()>
functions have been added to the API.

=end original

C<newDEFSVOP()>, C<block_start()>, C<block_end()>, C<intro_my()> 関数が
API に追加されました。

=item *

=begin original

The internal C<convert> function in F<op.c> has been renamed
C<op_convert_list> and added to the API.

=end original

F<op.c> 内部の C<convert> 関数は、C<op_convert_list> にリネームされて
API に加えられました。

=item *

=begin original

The C<sv_magic()> function no longer forbids "ext" magic on read-only
values.  After all, perl can't know whether the custom magic will modify
the SV or not.
L<[perl #123103]|https://rt.perl.org/Ticket/Display.html?id=123103>.

=end original

C<sv_magic()> 関数は、もはや読み込み専用値の "ext" マジックを
禁止しなくなりました。
結局、perl がカスタムマジックが SV を変更するかどうかを知ることは
できませんでした。
L<[perl #123103]|https://rt.perl.org/Ticket/Display.html?id=123103>.

=item *

=begin original

Accessing L<perlapi/CvPADLIST> on an XSUB is now forbidden.

=end original

XSUB で L<perlapi/CvPADLIST> にアクセスすることは禁止されました。

=begin original

The C<CvPADLIST> field has been reused for a different internal purpose
for XSUBs. So in particular, you can no longer rely on it being NULL as a
test of whether a CV is an XSUB. Use C<CvISXSUB()> instead.

=end original

The C<CvPADLIST> フィールドは、XSUB のための別の内部用途のために
再利用されました。
それで特に、CV が XSUB かどうかをテストするために、これが NULL かどうかに
依存できなくなりました。
代わりに C<CvISXSUB()> を使ってください。

=item *

=begin original

SVs of type C<SVt_NV> are now sometimes bodiless when the build
configuration and platform allow it: specifically, when C<< sizeof(NV) <=
sizeof(IV) >>. "Bodiless" means that the NV value is stored directly in
the head of an SV, without requiring a separate body to be allocated. This
trick has already been used for IVs since 5.9.2 (though in the case of
IVs, it is always used, regardless of platform and build configuration).

=end original

C<SVt_NV> 型の SV は、ビルド設定とプラットフォームが許す場合は、時々
本体なしになるようになりました: 特に、C<< sizeof(NV) <= sizeof(IV) >> の
場合です。
「本体なし」というのは、NV 値は割り当てられる独立した本体を要求せずに、
直接 SV のヘッドに保管されるということです。
この小技は IV に対しては既に 5.9.2 から使われていました (しかし IV の場合、
これはプラットフォームとビルド設定に関わらず常に使われます)。

=item *

=begin original

The C<$DB::single>, C<$DB::signal> and C<$DB::trace> variables now have set- and
get-magic that stores their values as IVs, and those IVs are used when
testing their values in C<pp_dbstate()>.  This prevents perl from
recursing infinitely if an overloaded object is assigned to any of those
variables.
L<[perl #122445]|https://rt.perl.org/Ticket/Display.html?id=122445>.

=end original

C<$DB::single>, C<$DB::signal>, C<$DB::trace> 変数は、その値を IV として
保管する set-magic と get-magic を持つようになり、その IV は
C<pp_dbstate()> の中で値をテストするときに使われるようになりました。
これにより、オーバーロードされたオブジェクトがこれらの変数に代入されたときに
perl が無限ループになるのを防ぎます。
L<[perl #122445]|https://rt.perl.org/Ticket/Display.html?id=122445>.

=item *

=begin original

C<Perl_tmps_grow()>, which is marked as public API but is undocumented, has
been removed from the public API. This change does not affect XS code that
uses the C<EXTEND_MORTAL> macro to pre-extend the mortal stack.

=end original

公式 API としてマークされていたけれども文書化されていなかった
C<Perl_tmps_grow()> は公式 API から削除されました。
この変更は、揮発性スタックを事前拡張する C<EXTEND_MORTAL> マクロを使っている
XS コードには影響しません。

=item *

=begin original

Perl's internals no longer sets or uses the C<SVs_PADMY> flag.
C<SvPADMY()> now returns a true value for anything not marked C<PADTMP>
and C<SVs_PADMY> is now defined as 0.

=end original

Perl の内部ではもはや C<SVs_PADMY> フラグを設定したり使ったり
しなくなりました。
C<SvPADMY()> は C<PADTMP> とマークされていないものに対してはなんでも
真の値を返し、C<SVs_PADMY> は 0 として定義されるようになりました。

=item *

=begin original

The macros C<SETsv> and C<SETsvUN> have been removed. They were no longer used
in the core since commit 6f1401dc2a five years ago, and have not been
found present on CPAN.

=end original

マクロ C<SETsv> と C<SETsvUN> は削除されました。
これらはコアでは 5 年前のコミット 6f1401dc2a から使われて折らず、
CPAN で存在が見つかったことはありませんでした。

=item *

=begin original

The C<< SvFAKE >> bit (unused on HVs) got informally reserved by
David Mitchell for future work on vtables.

=end original

C<< SvFAKE >> ビット (HV では未使用) は将来の vtable の作業のために
David Mitchell によって非公式に予約されています。

=item *

=begin original

The C<sv_catpvn_flags()> function accepts C<SV_CATBYTES> and C<SV_CATUTF8>
flags, which specify whether the appended string is bytes or UTF-8,
respectively. (These flags have in fact been present since 5.16.0, but
were formerly not regarded as part of the API.)

=end original

C<sv_catpvn_flags()> 関数は、追加する文字列がバイト列あるいは
UTF-8 であることを指定するための C<SV_CATBYTES> と C<SV_CATUTF8> のフラグを
受け付けるようになりました。
(これらのフラグは実際は 5.16.0 からありましたが、以前は API の一部として
見なされていませんでした。)

=item *

=begin original

A new opcode class, C<< METHOP >>, has been introduced. It holds
information used at runtime to improve the performance
of class/object method calls.

=end original

新しいオペコードクラスである C<< METHOP >> が導入されました。
これは、クラス/オブジェクトメソッド呼び出しの性能を向上させるために
実行時に使われる情報を保持します。

=begin original

C<< OP_METHOD >> and C<< OP_METHOD_NAMED >> have changed from being
C<< UNOP/SVOP >> to being C<< METHOP >>.

=end original

C<< OP_METHOD >> と C<< OP_METHOD_NAMED >> は C<< UNOP/SVOP >> から
C<< METHOP >> に変更されました。

=item *

=begin original

C<cv_name()> is a new API function that can be passed a CV or GV.  It
returns an SV containing the name of the subroutine, for use in
diagnostics.

=end original

C<cv_name()> は CV と GV が渡せる新しい API 関数です。
これは、解析のために、サブルーチン名を含む SV を返します。

L<[perl #116735]|https://rt.perl.org/Ticket/Display.html?id=116735>
L<[perl #120441]|https://rt.perl.org/Ticket/Display.html?id=120441>

=item *

=begin original

C<cv_set_call_checker_flags()> is a new API function that works like
C<cv_set_call_checker()>, except that it allows the caller to specify
whether the call checker requires a full GV for reporting the subroutine's
name, or whether it could be passed a CV instead.  Whatever value is
passed will be acceptable to C<cv_name()>.  C<cv_set_call_checker()>
guarantees there will be a GV, but it may have to create one on the fly,
which is inefficient.
L<[perl #116735]|https://rt.perl.org/Ticket/Display.html?id=116735>

=end original

C<cv_set_call_checker_flags()> は C<cv_set_call_checker()> のように
動作する新しい API 関数ですが、呼び出し元が、
呼び出しチェッカがサブルーチン名の報告に完全な GV を要求するか、および
代わりにCV を渡せるかを指定できるところが異なります。
渡された値はなんでも C<cv_name()> で受け入れられます。
C<cv_set_call_checker()> はこれが GV であることを保証しますが、これを
その場で作る必要があるかも知れず、これは非効率です。
L<[perl #116735]|https://rt.perl.org/Ticket/Display.html?id=116735>

=item *

=begin original

C<CvGV> (which is not part of the API) is now a more complex macro, which may
call a function and reify a GV.  For those cases where it has been used as a
boolean, C<CvHASGV> has been added, which will return true for CVs that
notionally have GVs, but without reifying the GV.  C<CvGV> also returns a GV
now for lexical subs.
L<[perl #120441]|https://rt.perl.org/Ticket/Display.html?id=120441>

=end original

(API の一部ではない) C<CvGV> はより複雑なマクロになり、関数を呼び出して
GV を具象化することがあるようになりました。
真偽値として使われるような場合のために、概念上 GV を保持しているけれども GV を
具象化しない CV に対して真を返す C<CvHASGV> が追加されました。
また、C<CvGV> はレキシカルサブルーチンに対して GV を返すようになりました。
L<[perl #120441]|https://rt.perl.org/Ticket/Display.html?id=120441>

=item *

=begin original

The L<perlapi/sync_locale> function has been added to the public API.
Changing the program's locale should be avoided by XS code. Nevertheless,
certain non-Perl libraries called from XS need to do so, such as C<Gtk>.
When this happens, Perl needs to be told that the locale has
changed.  Use this function to do so, before returning to Perl.

=end original

L<perlapi/sync_locale> 関数が公式 API に追加されました。
XS コードによるプログラムのロケールの変更は避けられるべきです。
それでも、C<Gtk> のような、XS から呼び出される一部の非 Perl ライブラリは
そうする必要があります。
これが起きたとき、Perl はロケールの変更が起きたことを教えてもらう
必要があります。
そうするために、Perl に戻る前にこの関数を使ってください。

=item *

=begin original

The defines and labels for the flags in the C<op_private> field of OPs are now
auto-generated from data in F<regen/op_private>.  The noticeable effect of this
is that some of the flag output of C<Concise> might differ slightly, and the
flag output of S<C<perl -Dx>> may differ considerably (they both use the same set
of labels now).  Also, debugging builds now have a new assertion in
C<op_free()> to ensure that the op doesn't have any unrecognized flags set in
C<op_private>.

=end original

OP の C<op_private> フィールドのフラグのための定義とラベルは、
F<regen/op_private> のデータから自動生成されるようになりました。
これによる注意するべき効果は、C<Concise> のフラグ出力の一部は少し
異なるかも知れず、S<C<perl -Dx>> のフラグ出力はかなり
異なるかもしれないことです (どちらも同じラベルを使うようになりました)。
また、デバッグビルドは C<op_free()> に新しいアサートが追加されました;
op に C<op_private> のフラグ集合で認識できないフラグがないことを
確認するものです。

=item *

=begin original

The deprecated variable C<PL_sv_objcount> has been removed.

=end original

廃止予定の変数 C<PL_sv_objcount> は削除されました。

=item *

=begin original

Perl now tries to keep the locale category C<LC_NUMERIC> set to "C"
except around operations that need it to be set to the program's
underlying locale.  This protects the many XS modules that cannot cope
with the decimal radix character not being a dot.  Prior to this
release, Perl initialized this category to "C", but a call to
C<POSIX::setlocale()> would change it.  Now such a call will change the
underlying locale of the C<LC_NUMERIC> category for the program, but the
locale exposed to XS code will remain "C".  There are new macros
to manipulate the LC_NUMERIC locale, including
C<STORE_LC_NUMERIC_SET_TO_NEEDED> and
C<STORE_LC_NUMERIC_FORCE_TO_UNDERLYING>.
See L<perlapi/Locale-related functions and macros>.

=end original

Perl は、プログラムの基になるロケールを設定する必要がある操作の付近以外では、
ロケールカテゴリ C<LC_NUMERIC> を "C" に維持しようとするようになりました。
これは、小数点がドットでないことに対応していない多くの XS モジュールを
守ります。
このリリースの前では、Perl はこのカテゴリを "C" に初期化しましたが、
C<POSIX::setlocale()> 呼び出しはこれを変更していました。
今では、この呼び出しはプログラムの C<LC_NUMERIC> カテゴリの基となっている
ロケールは変更しますが、XS に露出するロケールは "C" のままです。
LC_NUMERIC ロケールを操作するための新しいマクロが追加されました;
C<STORE_LC_NUMERIC_SET_TO_NEEDED> と
C<STORE_LC_NUMERIC_FORCE_TO_UNDERLYING> です。
L<perlapi/Locale-related functions and macros> を参照してください。

=item *

=begin original

A new macro L<C<isUTF8_CHAR>|perlapi/isUTF8_CHAR> has been written which
efficiently determines if the string given by its parameters begins
with a well-formed UTF-8 encoded character.

=end original

引数として指定された文字列が正しく UTF-8 エンコードされた文字かどうかを
効果的に決定するための新しいマクロ L<C<isUTF8_CHAR>|perlapi/isUTF8_CHAR> が
書かれました。

=item *

=begin original

The following private API functions had their context parameter removed:
C<Perl_cast_ulong>,  C<Perl_cast_i32>, C<Perl_cast_iv>,    C<Perl_cast_uv>,
C<Perl_cv_const_sv>, C<Perl_mg_find>,  C<Perl_mg_findext>, C<Perl_mg_magical>,
C<Perl_mini_mktime>, C<Perl_my_dirfd>, C<Perl_sv_backoff>, C<Perl_utf8_hop>.

=end original

以下のプライベート API 関数からコンテキスト引数が削除されました:
C<Perl_cast_ulong>,  C<Perl_cast_i32>, C<Perl_cast_iv>,    C<Perl_cast_uv>,
C<Perl_cv_const_sv>, C<Perl_mg_find>,  C<Perl_mg_findext>, C<Perl_mg_magical>,
C<Perl_mini_mktime>, C<Perl_my_dirfd>, C<Perl_sv_backoff>, C<Perl_utf8_hop>。

=begin original

Note that the prefix-less versions of those functions that are part of the
public API, such as C<cast_i32()>, remain unaffected.

=end original

C<cast_i32()> のような、公式 API の一部である、接頭辞なし版の関数は
影響を受けません。

=item *

=begin original

The C<PADNAME> and C<PADNAMELIST> types are now separate types, and no
longer simply aliases for SV and AV.
L<[perl #123223]|https://rt.perl.org/Ticket/Display.html?id=123223>.

=end original

C<PADNAME> と C<PADNAMELIST> 型は別の型となり、もはや単に SV と AV への
別名ではなくなりました。
L<[perl #123223]|https://rt.perl.org/Ticket/Display.html?id=123223>.

=item *

=begin original

Pad names are now always UTF-8.  The C<PadnameUTF8> macro always returns
true.  Previously, this was effectively the case already, but any support
for two different internal representations of pad names has now been
removed.

=end original

パッド名は常に UTF-8 になりました。
C<PadnameUTF8> マクロは常に真を返します。
以前は、これは実際にはこのようになっていましたが、パッド名の二つの異なった
内部表現のための対応が削除されました。

=item *

=begin original

A new op class, C<UNOP_AUX>, has been added. This is a subclass of
C<UNOP> with an C<op_aux> field added, which points to an array of unions
of UV, SV* etc. It is intended for where an op needs to store more data
than a simple C<op_sv> or whatever. Currently the only op of this type is
C<OP_MULTIDEREF> (see next item).

=end original

新しい op クラス C<UNOP_AUX> が追加されました。
これは This is a subclass of
C<UNOP> のサブクラスで、UV, SV* などの共用体の配列を指している
C<op_aux> フィールドが追加されています。
これは op が単純な C<op_sv> やそのようなものよりも多くのデータを
保管する必要がある場合のためのものです。
現在のところこの種類の唯一の op は C<OP_MULTIDEREF> です (次項参照)。

=item *

=begin original

A new op has been added, C<OP_MULTIDEREF>, which performs one or more
nested array and hash lookups where the key is a constant or simple
variable. For example the expression C<$a[0]{$k}[$i]>, which previously
involved ten C<rv2Xv>, C<Xelem>, C<gvsv> and C<const> ops is now performed
by a single C<multideref> op. It can also handle C<local>, C<exists> and
C<delete>. A non-simple index expression, such as C<[$i+1]> is still done
using C<aelem>/C<helem>, and single-level array lookup with a small constant
index is still done using C<aelemfast>.

=end original

キーが定数または単純な変数であるような、一つまたは複数のネストした配列と
ハッシュの検索を行う新しい op である  C<OP_MULTIDEREF> が追加されました。
例えば、C<$a[0]{$k}[$i]> という式は、以前は 10 の C<rv2Xv>, C<Xelem>, C<gvsv>,
C<const> の op でしたが、単一の C<multideref> op で
実行されるようになりました。
これはまた C<local>, C<exists>, C<delete> も扱えます。
C<[$i+1]> のような単純でないインデックス式では C<aelem>/C<helem> を
使って行われるままで、小さい定数インデックスでの単一レベル配列検索は
C<aelemfast> を使って行われるままです。

=back

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=over 4

=item *

=begin original

C<close> now sets C<$!>

=end original

C<close> は C<$!> を設定するようになりました

=begin original

When an I/O error occurs, the fact that there has been an error is recorded
in the handle.  C<close> returns false for such a handle.  Previously, the
value of C<$!> would be untouched by C<close>, so the common convention of
writing S<C<close $fh or die $!>> did not work reliably.  Now the handle
records the value of C<$!>, too, and C<close> restores it.

=end original

I/O エラーが起きたとき、エラーが起きたという事実はハンドルに記録されます。
C<close> はそのようなハンドルに対して偽を返します。
以前は、C<$!> の値は C<close> によって変更されなかったので、一般的な
規約である S<C<close $fh or die $!>> は確実には動作していませんでした。
ハンドルは C<$!> の値も記録して、C<close> はこれを復元するようになりました。

=item *

=begin original

C<no re> now can turn off everything that C<use re> enables

=end original

C<no re> は C<use re> で有効にできるもの全てをオフにできるようになりました

=begin original

Previously, running C<no re> would turn off only a few things. Now it
can turn off all the enabled things. For example, the only way to
stop debugging, once enabled, was to exit the enclosing block; that is
now fixed.

=end original

以前は C<no re> を実行しててもいくつかの機能だけしかオフになりませんでした。
これは有効なもの全てをオフにできるようになりました。
例えば、デバッグを一度有効にすると、デバッグを停止する唯一の方法は
ブロックから出ることでした; これは修正されました。

=item *

=begin original

C<pack("D", $x)> and C<pack("F", $x)> now zero the padding on x86 long
double builds.  Under some build options on GCC 4.8 and later, they used
to either overwrite the zero-initialized padding, or bypass the
initialized buffer entirely.  This caused F<op/pack.t> to fail.
L<[perl #123971]|https://rt.perl.org/Ticket/Display.html?id=123971>

=end original

C<pack("D", $x)> と C<pack("F", $x)> は、x86 long double ビルドで
ゼロパディングされるようになりました。
GCC 4.8 以降の一部のビルドオプションでは、ゼロ初期化したパッディングを
上書きしたり、初期化したバッファを完全に迂回したりしていました。
これにより F<op/pack.t> が失敗していました。
L<[perl #123971]|https://rt.perl.org/Ticket/Display.html?id=123971>

=item *

=begin original

Extending an array cloned from a parent thread could result in "Modification of
a read-only value attempted" errors when attempting to modify the new elements.
L<[perl #124127]|https://rt.perl.org/Ticket/Display.html?id=124127>

=end original

親スレッドからクローンされた配列を拡張すると、新しい要素を
変更しようとしたときに "Modification of a read-only value attempted" エラーが
起きることがありました。
L<[perl #124127]|https://rt.perl.org/Ticket/Display.html?id=124127>

=item *

=begin original

An assertion failure and subsequent crash with C<< *x=<y> >> has been fixed.
L<[perl #123790]|https://rt.perl.org/Ticket/Display.html?id=123790>

=end original

C<< *x=<y> >> でのアサート失敗と引き続くクラッシュは修正されました。
L<[perl #123790]|https://rt.perl.org/Ticket/Display.html?id=123790>

=item *

=begin original

A possible crashing/looping bug related to compiling lexical subs has been
fixed.
L<[perl #124099]|https://rt.perl.org/Ticket/Display.html?id=124099>

=end original

レキシカルサブルーチンのコンパイルに関する、クラッシュ/無限ループの
可能性があるバグが修正されました。
L<[perl #124099]|https://rt.perl.org/Ticket/Display.html?id=124099>

=item *

=begin original

UTF-8 now works correctly in function names, in unquoted HERE-document
terminators, and in variable names used as array indexes.
L<[perl #124113]|https://rt.perl.org/Ticket/Display.html?id=124113>

=end original

UTF-8 は、関数名、クォートなしのヒヤドキュメント終端子、配列
インデックスとして使われる変数名で正しく動作するようになりました。
L<[perl #124113]|https://rt.perl.org/Ticket/Display.html?id=124113>

=item *

=begin original

Repeated global pattern matches in scalar context on large tainted strings were
exponentially slow depending on the current match position in the string.
L<[perl #123202]|https://rt.perl.org/Ticket/Display.html?id=123202>

=end original

大きな汚染された文字列に対してスカラコンテキストで繰り返されたグローバル
パターンマッチングは、文字列中の現在のマッチング位置に依存して
指数的に遅くなっていました。
L<[perl #123202]|https://rt.perl.org/Ticket/Display.html?id=123202>

=item *

=begin original

Various crashes due to the parser getting confused by syntax errors have been
fixed.
L<[perl #123801]|https://rt.perl.org/Ticket/Display.html?id=123801>
L<[perl #123802]|https://rt.perl.org/Ticket/Display.html?id=123802>
L<[perl #123955]|https://rt.perl.org/Ticket/Display.html?id=123955>
L<[perl #123995]|https://rt.perl.org/Ticket/Display.html?id=123995>

=end original

パーサが文法エラーで混乱することによる様々なクラッシュが修正されました。
L<[perl #123801]|https://rt.perl.org/Ticket/Display.html?id=123801>
L<[perl #123802]|https://rt.perl.org/Ticket/Display.html?id=123802>
L<[perl #123955]|https://rt.perl.org/Ticket/Display.html?id=123955>
L<[perl #123995]|https://rt.perl.org/Ticket/Display.html?id=123995>

=item *

=begin original

C<split> in the scope of lexical C<$_> has been fixed not to fail assertions.
L<[perl #123763]|https://rt.perl.org/Ticket/Display.html?id=123763>

=end original

レキシカルスコープの C<$_> の C<split> はアサートに失敗する問題が
修正されました。
L<[perl #123763]|https://rt.perl.org/Ticket/Display.html?id=123763>

=item *

=begin original

C<my $x : attr> syntax inside various list operators no longer fails
assertions.
L<[perl #123817]|https://rt.perl.org/Ticket/Display.html?id=123817>

=end original

様々なリスト演算子の中での C<my $x : attr> 構文はもはやアサートに
失敗しなくなりました。
L<[perl #123817]|https://rt.perl.org/Ticket/Display.html?id=123817>

=item *

=begin original

An C<@> sign in quotes followed by a non-ASCII digit (which is not a valid
identifier) would cause the parser to crash, instead of simply trying the
C<@> as literal.  This has been fixed.
L<[perl #123963]|https://rt.perl.org/Ticket/Display.html?id=123963>

=end original

クォート中の C<@> マークに引き続いて非 ASCII 数字がある場合 (これは正当な
識別子ではありません)、パーサは単に C<@> をリテラルとして扱うのでなく
クラッシュしていました。
これは修正されました。
L<[perl #123963]|https://rt.perl.org/Ticket/Display.html?id=123963>

=item *

=begin original

C<*bar::=*foo::=*glob_with_hash> has been crashing since Perl 5.14, but no
longer does.
L<[perl #123847]|https://rt.perl.org/Ticket/Display.html?id=123847>

=end original

C<*bar::=*foo::=*glob_with_hash> は Perl 5.14 からクラッシュしていましたが、
もはや起こらなくなりました。
L<[perl #123847]|https://rt.perl.org/Ticket/Display.html?id=123847>

=item *

=begin original

C<foreach> in scalar context was not pushing an item on to the stack, resulting
in bugs.  (S<C<print 4, scalar do { foreach(@x){} } + 1>> would print 5.)
It has been fixed to return C<undef>.
L<[perl #124004]|https://rt.perl.org/Ticket/Display.html?id=124004>

=end original

スカラコンテキストでの C<foreach> はアイテムをスタックに
プッシュしていなかったので、バグを引き起こしていました。
(S<C<print 4, scalar do { foreach(@x){} } + 1>> が 5 を出力していました。)
C<undef> を返すように修正されました。
L<[perl #124004]|https://rt.perl.org/Ticket/Display.html?id=124004>

=item *

=begin original

Several cases of data used to store environment variable contents in core C
code being potentially overwritten before being used have been fixed.
L<[perl #123748]|https://rt.perl.org/Ticket/Display.html?id=123748>

=end original

コア C コードで内容を環境変数に保管したデータが場合によっては使われる前に
上書きされる可能性がある問題は修正されました。
L<[perl #123748]|https://rt.perl.org/Ticket/Display.html?id=123748>

=item *

=begin original

Some patterns starting with C</.*..../> matched against long strings have
been slow since v5.8, and some of the form C</.*..../i> have been slow
since v5.18. They are now all fast again.
L<[perl #123743]|https://rt.perl.org/Ticket/Display.html?id=123743>.

=end original

C</.*..../> で始まるパターンの一部は長い文字列では v5.8 から遅くなっていて、
C</.*..../i> 形式の一部は v5.18 から遅くなっていました。
これらは再び高速になりました。
L<[perl #123743]|https://rt.perl.org/Ticket/Display.html?id=123743>.

=item *

=begin original

The original visible value of C<$/> is now preserved when it is set to
an invalid value.  Previously if you set C<$/> to a reference to an
array, for example, perl would produce a runtime error and not set
C<PL_rs>, but Perl code that checked C<$/> would see the array
reference.
L<[perl #123218]|https://rt.perl.org/Ticket/Display.html?id=123218>.

=end original

C<$/> の元の見える値は、不正な値を設定されたときは値が
保存されるようになりました。
以前は、例えば C<$/> に配列へのリファレンスを設定すると、perl は実行時エラーを
出力して C<PL_rs> を設定しませんが、C<$/> を調べる Perl コードは
配列リファレンスを見ていました。
L<[perl #123218]|https://rt.perl.org/Ticket/Display.html?id=123218>.

=item *

=begin original

In a regular expression pattern, a POSIX class, like C<[:ascii:]>, must
be inside a bracketed character class, like C<qr/[[:ascii:]]/>.  A
warning is issued when something looking like a POSIX class is not
inside a bracketed class.  That warning wasn't getting generated when
the POSIX class was negated: C<[:^ascii:]>.  This is now fixed.

=end original

正規表現パターンの中で、C<[:ascii:]> のような POSIX クラスは、
C<qr/[[:ascii:]]/> のように、大かっこ文字クラスの中でなければなりません。
POSIX クラスのように見えるものが大かっこクラスのなかにない場合は警告が
出力されます。
この警告は、POSIX クラスが否定されたときには発生していませんでした:
C<[:^ascii:]>。
これは修正されました。

=item *

=begin original

Perl 5.14.0 introduced a bug whereby S<C<eval { LABEL: }>> would crash.  This
has been fixed.
L<[perl #123652]|https://rt.perl.org/Ticket/Display.html?id=123652>.

=end original

Perl 5.14.0 では S<C<eval { LABEL: }>> がクラッシュするというバグが
導入されていました。
これは修正されました。
L<[perl #123652]|https://rt.perl.org/Ticket/Display.html?id=123652>.

=item *

=begin original

Various crashes due to the parser getting confused by syntax errors have
been fixed.
L<[perl #123617]|https://rt.perl.org/Ticket/Display.html?id=123617>.
L<[perl #123737]|https://rt.perl.org/Ticket/Display.html?id=123737>.
L<[perl #123753]|https://rt.perl.org/Ticket/Display.html?id=123753>.
L<[perl #123677]|https://rt.perl.org/Ticket/Display.html?id=123677>.

=end original

文法エラーによってパーサが混乱することによる様々なクラッシュが
修正されました。
L<[perl #123617]|https://rt.perl.org/Ticket/Display.html?id=123617>.
L<[perl #123737]|https://rt.perl.org/Ticket/Display.html?id=123737>.
L<[perl #123753]|https://rt.perl.org/Ticket/Display.html?id=123753>.
L<[perl #123677]|https://rt.perl.org/Ticket/Display.html?id=123677>.

=item *

=begin original

Code like C</$a[/> used to read the next line of input and treat it as
though it came immediately after the opening bracket.  Some invalid code
consequently would parse and run, but some code caused crashes, so this is
now disallowed.
L<[perl #123712]|https://rt.perl.org/Ticket/Display.html?id=123712>.

=end original

C</$a[/> のようなコードは、入力の次の行を読み込んで、それが開き大かっこの
直後にあるかのように扱われていました。
結果として不正なコードがパース及び実行され、クラッシュを引き起こしていました;
これは許されなくなりました。
L<[perl #123712]|https://rt.perl.org/Ticket/Display.html?id=123712>.

=item *

=begin original

Fix argument underflow for C<pack>.
L<[perl #123874]|https://rt.perl.org/Ticket/Display.html?id=123874>.

=end original

C<pack> での引数アンダーフローが修正されました。
L<[perl #123874]|https://rt.perl.org/Ticket/Display.html?id=123874>.

=item *

=begin original

Fix handling of non-strict C<\x{}>. Now C<\x{}> is equivalent to C<\x{0}>
instead of faulting.

=end original

非 strict な C<\x{}> の扱いが修正されました。
C<\x{}> は失敗するのではなく C<\x{0}> と等価になりました。

=item *

=begin original

C<stat -t> is now no longer treated as stackable, just like C<-t stat>.
L<[perl #123816]|https://rt.perl.org/Ticket/Display.html?id=123816>.

=end original

C<stat -t> は、もはや C<-t stat> のようにスタック可能と
扱われなくなりました。
L<[perl #123816]|https://rt.perl.org/Ticket/Display.html?id=123816>.

=item *

=begin original

The following no longer causes a SEGV: C<qr{x+(y(?0))*}>.

=end original

以下のものはもはや SEGV を引き起こさなくなりました: C<qr{x+(y(?0))*}>。

=item *

=begin original

Fixed infinite loop in parsing backrefs in regexp patterns.

=end original

正規表現中の後方参照のパースでの無限ループが修正されました。

=item *

=begin original

Several minor bug fixes in behavior of Infinity and NaN, including
warnings when stringifying Infinity-like or NaN-like strings. For example,
"NaNcy" doesn't numify to NaN anymore.

=end original

無限風や NaN 風の文字列の文字列化の時の警告を含む、無限と NaN の振る舞いの
いくつかの小さなバグが修正されました。
例えば、"NaNcy" はもはや NaN に数値化されません。

=item *

=begin original

A bug in regular expression patterns that could lead to segfaults and
other crashes has been fixed.  This occurred only in patterns compiled
with C</i> while taking into account the current POSIX locale (which usually
means they have to be compiled within the scope of C<S<use locale>>),
and there must be a string of at least 128 consecutive bytes to match.
L<[perl #123539]|https://rt.perl.org/Ticket/Display.html?id=123539>.

=end original

セグメンテーションフォルトやクラッシュを引き起こす、正規表現パターンの
バグが修正されました。
これは、C</i> 付きでコンパイルされたパターンで、現在の POSIX ロケールを
考慮する場合 (これは普通 C<S<use locale>> のスコープ内でコンパイルされる
必要があるということです) にのみ起こります。
少なくともマッチングするのに最低連続した 128 バイトの
文字列でなければなりません。
L<[perl #123539]|https://rt.perl.org/Ticket/Display.html?id=123539>.

=item *

=begin original

C<s///g> now works on very long strings (where there are more than 2
billion iterations) instead of dying with 'Substitution loop'.
L<[perl #103260]|https://rt.perl.org/Ticket/Display.html?id=103260>.
L<[perl #123071]|https://rt.perl.org/Ticket/Display.html?id=123071>.

=end original

C<s///> は、(20 億回以上の繰り返しのような)とても長い文字列でも、
'Substitution loop' で die せずに動作するようになりました。
L<[perl #103260]|https://rt.perl.org/Ticket/Display.html?id=103260>.
L<[perl #123071]|https://rt.perl.org/Ticket/Display.html?id=123071>.

=item *

=begin original

C<gmtime> no longer crashes with not-a-number values.
L<[perl #123495]|https://rt.perl.org/Ticket/Display.html?id=123495>.

=end original

C<gmtime> はもはや非数の値でクラッシュしなくなりました。
L<[perl #123495]|https://rt.perl.org/Ticket/Display.html?id=123495>.

=item *

=begin original

C<\()> (a reference to an empty list), and C<y///> with lexical C<$_> in
scope, could both do a bad write past the end of the stack.  They have
both been fixed to extend the stack first.

=end original

C<\()> (空リストへのリファレンス)および、スコープ内のレキシカルな C<$_> への
C<y///> はスタックの末尾より前に間違って書き込むことがありました。
これは両方は、先にスタックを拡張することで修正されました。

=item *

=begin original

C<prototype()> with no arguments used to read the previous item on the
stack, so S<C<print "foo", prototype()>> would print foo's prototype.
It has been fixed to infer C<$_> instead.
L<[perl #123514]|https://rt.perl.org/Ticket/Display.html?id=123514>.

=end original

引数なしの C<prototype()> はスタック上の以前のアイテムを読み込んでいたので、
S<C<print "foo", prototype()>> は foo のプロトタイプを表示していました。
これは、代わりに C<$_> を仮定するように修正されました。
L<[perl #123514]|https://rt.perl.org/Ticket/Display.html?id=123514>.

=item *

=begin original

Some cases of lexical state subs declared inside predeclared subs could
crash, for example when evalling a string including the name of an outer
variable, but no longer do.

=end original

事前宣言されたサブルーチンの中で宣言されたレキシカル state サブルーチンは
クラッシュすることがありました; 例えば外側の変数の名前を含む文字列を
eval したときなどです。
しかしもはやそれは起こらなくなりました。

=item *

=begin original

Some cases of nested lexical state subs inside anonymous subs could cause
'Bizarre copy' errors or possibly even crashes.

=end original

無名サブルーチンの内側のネストしたレキシカル state サブルーチンは、
場合によって 'Bizarre copy' エラーや、クラッシュを
引き起こすことがありました。

=item *

=begin original

When trying to emit warnings, perl's default debugger (F<perl5db.pl>) was
sometimes giving 'Undefined subroutine &DB::db_warn called' instead.  This
bug, which started to occur in Perl 5.18, has been fixed.
L<[perl #123553]|https://rt.perl.org/Ticket/Display.html?id=123553>.

=end original

警告を出力しようとするとき、perl のデフォルトデバッガ (F<perl5db.pl>) は
時々代わりに 'Undefined subroutine &DB::db_warn called' を出力していました。
この、Perl 5.18 からあったバグは修正されました。
L<[perl #123553]|https://rt.perl.org/Ticket/Display.html?id=123553>.

=item *

=begin original

Certain syntax errors in substitutions, such as C<< s/${<>{})// >>, would
crash, and had done so since Perl 5.10.  (In some cases the crash did not
start happening till 5.16.)  The crash has, of course, been fixed.
L<[perl #123542]|https://rt.perl.org/Ticket/Display.html?id=123542>.

=end original

C<< s/${<>{})// >> のような、置換での特定の文法エラーでは
クラッシュしていて、これは Perl 5.10 からそうなっていました。
(場合によってはクラッシュは 5.16 まで起きていませんでした。)
クラッシュは、もちろん、修正されました。
L<[perl #123542]|https://rt.perl.org/Ticket/Display.html?id=123542>.

=item *

=begin original

Fix a couple of string grow size calculation overflows; in particular,
a repeat expression like S<C<33 x ~3>> could cause a large buffer
overflow since the new output buffer size was not correctly handled by
C<SvGROW()>.  An expression like this now properly produces a memory wrap
panic.
L<[perl #123554]|https://rt.perl.org/Ticket/Display.html?id=123554>.

=end original

複数の文字列が大きくなるサイズの計算のオーバーフローが修正されました;
特に S<C<33 x ~3>> のような繰り返し式は、新しい出力バッファサイズが
C<SvGROW()> によって正しく扱われていなかったので大きな
バッファオーバーフローを引き起こすことがありました。
このような式は正しくメモリラップ panic を出力するようになりました。
L<[perl #123554]|https://rt.perl.org/Ticket/Display.html?id=123554>.

=item *

=begin original

C<< formline("@...", "a"); >> would crash.  The C<FF_CHECKNL> case in
C<pp_formline()> didn't set the pointer used to mark the chop position,
which led to the C<FF_MORE> case crashing with a segmentation fault.
This has been fixed.
L<[perl #123538]|https://rt.perl.org/Ticket/Display.html?id=123538>.

=end original

C<< formline("@...", "a"); >> はクラッシュしていました。
C<pp_formline()> の C<FF_CHECKNL> のところでチョップ位置をマークするために
使われるポインタを設定しておらず、C<FF_MORE> のところで
セグメンテーションフォルトでのクラッシュを引き起こしていました。
これは修正されました。
L<[perl #123538]|https://rt.perl.org/Ticket/Display.html?id=123538>.

=item *

=begin original

A possible buffer overrun and crash when parsing a literal pattern during
regular expression compilation has been fixed.
L<[perl #123604]|https://rt.perl.org/Ticket/Display.html?id=123604>.

=end original

正規表現のコンパイル中にリテラルなパターンをパースするときに
バッファオーバーランとクラッシュを起こすことがあった問題は修正されました。
L<[perl #123604]|https://rt.perl.org/Ticket/Display.html?id=123604>.

=item *

=begin original

C<fchmod()> and C<futimes()> now set C<$!> when they fail due to being
passed a closed file handle.
L<[perl #122703]|https://rt.perl.org/Ticket/Display.html?id=122703>.

=end original

C<fchmod()> と C<futimes()> は、閉じられたファイルハンドルを
渡されたことによって失敗したときに C<$!> を設定するようになりました。
L<[perl #122703]|https://rt.perl.org/Ticket/Display.html?id=122703>.

=item *

=begin original

C<op_free()> and C<scalarvoid()> no longer crash due to a stack overflow
when freeing a deeply recursive op tree.
L<[perl #108276]|https://rt.perl.org/Ticket/Display.html?id=108276>.

=end original

C<op_free()> と C<scalarvoid()> は、深く再帰した op 木を解放するときに
スタックオーバーフローによってクラッシュしなくなりました。
L<[perl #108276]|https://rt.perl.org/Ticket/Display.html?id=108276>.

=item *

=begin original

In Perl 5.20.0, C<$^N> accidentally had the internal UTF-8 flag turned off
if accessed from a code block within a regular expression, effectively
UTF-8-encoding the value.  This has been fixed.
L<[perl #123135]|https://rt.perl.org/Ticket/Display.html?id=123135>.

=end original

Perl 5.20.0 では、C<$^N> は、事実上 UTF-8 エンコードされた値の正規表現の中の
コードブロックからサクセスされると、間違って内部の UTF-8 フラグが
オフになっていました。
これは修正されました。
L<[perl #123135]|https://rt.perl.org/Ticket/Display.html?id=123135>.

=item *

=begin original

A failed C<semctl> call no longer overwrites existing items on the stack,
which means that C<(semctl(-1,0,0,0))[0]> no longer gives an
"uninitialized" warning.

=end original

失敗した C<semctl> 呼び出しは、もはやスタック上の既存のアイテムを
上書きしなくなりました; つまり C<(semctl(-1,0,0,0))[0]> が
"uninitialized" 警告を出さなくなりました。

=item *

=begin original

C<else{foo()}> with no space before C<foo> is now better at assigning the
right line number to that statement.
L<[perl #122695]|https://rt.perl.org/Ticket/Display.html?id=122695>.

=end original

C<foo> の前にスペースのない C<else{foo()}> は、右の行番号をこの文に
代入するときによりよくなりました。
L<[perl #122695]|https://rt.perl.org/Ticket/Display.html?id=122695>.

=item *

=begin original

Sometimes the assignment in C<@array = split> gets optimised so that C<split>
itself writes directly to the array.  This caused a bug, preventing this
assignment from being used in lvalue context.  So
C<(@a=split//,"foo")=bar()> was an error.  (This bug probably goes back to
Perl 3, when the optimisation was added.) It has now been fixed.
L<[perl #123057]|https://rt.perl.org/Ticket/Display.html?id=123057>.

=end original

時々、C<@array = split> というのは最適化されて、C<split> 自身が直接
配列に書き込みます。
これはバグを引き起こしていて、この代入を左辺値コンテキストで使うのを
妨げていました。
それで C<(@a=split//,"foo")=bar()> はエラーになっていました。
(このバグは、おそらく最適化が追加された Perl 3 にさかのぼります。)
これは修正されました。
L<[perl #123057]|https://rt.perl.org/Ticket/Display.html?id=123057>.

=item *

=begin original

When an argument list fails the checks specified by a subroutine
signature (which is still an experimental feature), the resulting error
messages now give the file and line number of the caller, not of the
called subroutine.
L<[perl #121374]|https://rt.perl.org/Ticket/Display.html?id=121374>.

=end original

引数リストがサブルーチンシグネチャ (これはまだ実験的機能です) で
指定されたチェックに失敗したとき、結果のエラーメッセージは
呼び出されたサブルーチンではなく、呼び出したサブルーチンのファイルと
行番号を含むようになりました。
L<[perl #121374]|https://rt.perl.org/Ticket/Display.html?id=121374>.

=item *

=begin original

The flip-flop operators (C<..> and C<...> in scalar context) used to maintain
a separate state for each recursion level (the number of times the
enclosing sub was called recursively), contrary to the documentation.  Now
each closure has one internal state for each flip-flop.
L<[perl #122829]|https://rt.perl.org/Ticket/Display.html?id=122829>.

=end original

フリップフロップ演算子 (スカラコンテキストでの C<..> と C<...>) は、
文書によれば、それぞれの再帰レベル(内側のサブルーチンが何回再帰したか)に
おいて別の状態を管理していました。
各クロージャは各フリップフロップのために一つの内部状態を持つようになりました。
L<[perl #122829]|https://rt.perl.org/Ticket/Display.html?id=122829>.

=item *

=begin original

The flip-flop operator (C<..> in scalar context) would return the same
scalar each time, unless the containing subroutine was called recursively.
Now it always returns a new scalar.
L<[perl #122829]|https://rt.perl.org/Ticket/Display.html?id=122829>.

=end original

フリップフロップ演算子 (スカラコンテキストでの C<..>) は、
含まれているサブルーチンが再帰的に呼び出されていない限り、同じスカラを
毎回返していました。
これは常に新しいスカラを返すようになりました。
L<[perl #122829]|https://rt.perl.org/Ticket/Display.html?id=122829>.

=item *

=begin original

C<use>, C<no>, statement labels, special blocks (C<BEGIN>) and pod are now
permitted as the first thing in a C<map> or C<grep> block, the block after
C<print> or C<say> (or other functions) returning a handle, and within
C<${...}>, C<@{...}>, etc.
L<[perl #122782]|https://rt.perl.org/Ticket/Display.html?id=122782>.

=end original

C<use>, C<no>, 文ラベル、特殊ブロック (C<BEGIN>)、pod は
C<map> や C<grep> ブロックの最初のもの、ハンドルを返す C<print> や C<say>
(あるいはその他の関数)の後のブロック、C<${...}>, C<@{...}> などの内側で
使えるようになりました。
L<[perl #122782]|https://rt.perl.org/Ticket/Display.html?id=122782>.

=item *

=begin original

The repetition operator C<x> now propagates lvalue context to its left-hand
argument when used in contexts like C<foreach>.  That allows
S<C<for(($#that_array)x2) { ... }>> to work as expected if the loop modifies
C<$_>.

=end original

繰り返し演算子 C<x> は、C<foreach> のようなコンテキストで使われたときに
左側の引数に左辺値コンテキストが伝搬するようになりました。
これにより、ループが C<$_> を変更する場合、
S<C<for(($#that_array)x2) { ... }>> は想定通りに動作するようになりました。

=item *

=begin original

C<(...) x ...> in scalar context used to corrupt the stack if one operand
was an object with "x" overloading, causing erratic behavior.
L<[perl #121827]|https://rt.perl.org/Ticket/Display.html?id=121827>.

=end original

スカラコンテキストでの C<(...) x ...> は、一つのオペランドが
"x" オーバーロードのあるオブジェクトのとき、スタックを破壊して、異常な
振る舞いを引き起こしていました。
L<[perl #121827]|https://rt.perl.org/Ticket/Display.html?id=121827>.

=item *

=begin original

Assignment to a lexical scalar is often optimised away; for example in
C<my $x; $x = $y + $z>, the assign operator is optimised away and the add
operator writes its result directly to C<$x>.  Various bugs related to
this optimisation have been fixed.  Certain operators on the right-hand
side would sometimes fail to assign the value at all or assign the wrong
value, or would call STORE twice or not at all on tied variables.  The
operators affected were C<$foo++>, C<$foo-->, and C<-$foo> under C<use
integer>, C<chomp>, C<chr> and C<setpgrp>.

=end original

レキシカルスカラ変数への代入はしばしば最適化で削除されます; 例えば
C<my $x; $x = $y + $z> では、代入演算子は最適化で削除されて、加法演算子は
その結果を C<$x> に直接書き込みます。
この最適化に関連する様々なバグが修正されました。
右側のある種の演算子は、時々値の代入に完全に失敗したり、tie された変数に
対して STORE を 2 回呼び出したり全く呼び出さなかったりしていました。
影響を受ける演算子は C<use integer> の基での C<$foo++>, C<$foo-->,
C<-$foo> と、C<chomp>, C<chr>, C<setpgrp> です。

=item *

=begin original

List assignments were sometimes buggy if the same scalar ended up on both
sides of the assignment due to use of C<tied>, C<values> or C<each>.  The
result would be the wrong value getting assigned.

=end original

リスト代入は、C<tied>, C<values>, C<each> の使用によって代入の両側に
同じ変数が現れた場合、ときどきバグっていました。
結果として間違った値が代入されていました。

=item *

=begin original

C<setpgrp($nonzero)> (with one argument) was accidentally changed in 5.16
to mean C<setpgrp(0)>.  This has been fixed.

=end original

(1 引数の) C<setpgrp($nonzero)> は、誤って C<setpgrp(0)> を意味するように
5.16 から変更されていました。
これは修正されました。

=item *

=begin original

C<__SUB__> could return the wrong value or even corrupt memory under the
debugger (the C<-d> switch) and in subs containing C<eval $string>.

=end original

C<__SUB__> は、デバッガ (the C<-d> オプション) の制御下で、
C<eval $string> を含むサブルーチンの中では、間違った値を返したり
メモリを壊したりしていました。

=item *

=begin original

When S<C<sub () { $var }>> becomes inlinable, it now returns a different
scalar each time, just as a non-inlinable sub would, though Perl still
optimises the copy away in cases where it would make no observable
difference.

=end original

S<C<sub () { $var }>> がインライン化可能のとき、インライン化可能でない
サブルーチンと同様に、異なるスカラを毎回返すようになりました; しかし、
観測可能な違いがない場合はコピーを最適化で削除するのは同じです。

=item *

=begin original

S<C<my sub f () { $var }>> and S<C<sub () : attr { $var }>> are no longer
eligible for inlining.  The former would crash; the latter would just
throw the attributes away.  An exception is made for the little-known
C<:method> attribute, which does nothing much.

=end original

S<C<my sub f () { $var }>> と S<C<sub () : attr { $var }>> はもはや
インライン化可能ではなくなりました。
前者はクラッシュしていました; 後者は単に属性を捨てていました。
ほとんど知られていない、ほとんど何もしない C<:method> 属性では
例外が起きていました。

=item *

=begin original

Inlining of subs with an empty prototype is now more consistent than
before. Previously, a sub with multiple statements, of which all but the last
were optimised away, would be inlinable only if it were an anonymous sub
containing a string C<eval> or C<state> declaration or closing over an
outer lexical variable (or any anonymous sub under the debugger).  Now any
sub that gets folded to a single constant after statements have been
optimised away is eligible for inlining.  This applies to things like C<sub
() { jabber() if DEBUG; 42 }>.

=end original

空のプロトタイプを持つサブルーチンのインライン化は以前よりもより一貫性を
持つようになりました。
以前は、複数の文を持つけれども、最後のもの以外は最適化されて削除されるような
サブルーチンは、これが文字列 C<eval> や C<state> 宣言や外側のレキシカル変数の
閉じ込めの無名サブルーチン(あるいはデバッガ上での任意の無名サブルーチン) の
場合にのみインライン化可能でした。
文が最適化で削除された後に単一の定数に畳み込まれるサブルーチンは全て
インライン化可能になりました。
これは C<sub () { jabber() if DEBUG; 42 }> のようなものに適用されます。

=begin original

Some subroutines with an explicit C<return> were being made inlinable,
contrary to the documentation,  Now C<return> always prevents inlining.

=end original

明示的な C<return> を持つサブルーチンの一部は、文書と違って、
インライン化可能でした。
C<return> は常にインライン化を妨げるようになりました。

=item *

=begin original

On some systems, such as VMS, C<crypt> can return a non-ASCII string.  If a
scalar assigned to had contained a UTF-8 string previously, then C<crypt>
would not turn off the UTF-8 flag, thus corrupting the return value.  This
would happen with S<C<$lexical = crypt ...>>.

=end original

VMS のような一部のシステムでは、C<crypt> は非 ASCII 文字列を
返すことがあります。
以前は、代入されたスカラに UTF-8 文字列が含まれていると、
C<crypt> は UTF-8 フラグをオフにしないので、返り値が壊れていました。
これは S<C<$lexical = crypt ...>> で起きていました。

=item *

=begin original

C<crypt> no longer calls C<FETCH> twice on a tied first argument.

=end original

C<crypt> は、tie された最初の引数に対してもはや C<FETCH> を 2 回
呼び出さなくなりました。

=item *

=begin original

An unterminated here-doc on the last line of a quote-like operator
(C<qq[${ <<END }]>, C</(?{ <<END })/>) no longer causes a double free.  It
started doing so in 5.18.

=end original

クォート風演算子の最後の行での終端されていないヒヤドキュメント
(C<qq[${ <<END }]>, C</(?{ <<END })/>) はもはや二重解放を
引き起こさなくなりました。
これは 5.18 からそうなっていました。

=item *

=begin original

C<index()> and C<rindex()> no longer crash when used on strings over 2GB in
size.
L<[perl #121562]|https://rt.perl.org/Ticket/Display.html?id=121562>.

=end original

C<index()> と C<rindex()> は、2GB 以上のサイズの文字列に対して使っても
もはやクラッシュしなくなりました。
L<[perl #121562]|https://rt.perl.org/Ticket/Display.html?id=121562>.

=item *

=begin original

A small, previously intentional, memory leak in
C<PERL_SYS_INIT>/C<PERL_SYS_INIT3> on Win32 builds was fixed. This might
affect embedders who repeatedly create and destroy perl engines within
the same process.

=end original

Win32 ビルドでの、小さく、以前は想定通りだった、
C<PERL_SYS_INIT>/C<PERL_SYS_INIT3> でのメモリリークは修正されました。
これは同じプロセス内で perl エンジンの生成と破壊を繰り返していた
組み込みに影響するかも知れません。

=item *

=begin original

C<POSIX::localeconv()> now returns the data for the program's underlying
locale even when called from outside the scope of S<C<use locale>>.

=end original

C<POSIX::localeconv()> は、たとえ S<C<use locale>> のスコープの外側から
呼び出されても、プログラムの基となるロケールに関するデータを
返すようになりました。

=item *

=begin original

C<POSIX::localeconv()> now works properly on platforms which don't have
C<LC_NUMERIC> and/or C<LC_MONETARY>, or for which Perl has been compiled
to disregard either or both of these locale categories.  In such
circumstances, there are now no entries for the corresponding values in
the hash returned by C<localeconv()>.

=end original

C<POSIX::localeconv()> は、C<LC_NUMERIC> や C<LC_MONETARY> がなかったり、
Perl がこれらのロケールカテゴリに従わないようにコンパイルされている
プラットフォームでも正しく動作するようになりました。
このような状況では、C<localeconv()> によって返される八種に対応する値の
エントリはありません。

=item *

=begin original

C<POSIX::localeconv()> now marks appropriately the values it returns as
UTF-8 or not.  Previously they were always returned as bytes, even if
they were supposed to be encoded as UTF-8.

=end original

C<POSIX::localeconv()> は、返す値が UTF-8 かどうかを適切に
マークするようになりました。
以前は、UTF-8 でエンコードされていることになっている場合でも、常にバイトとして
返していました。

=item *

=begin original

On Microsoft Windows, within the scope of C<S<use locale>>, the following
POSIX character classes gave results for many locales that did not
conform to the POSIX standard:
C<[[:alnum:]]>,
C<[[:alpha:]]>,
C<[[:blank:]]>,
C<[[:digit:]]>,
C<[[:graph:]]>,
C<[[:lower:]]>,
C<[[:print:]]>,
C<[[:punct:]]>,
C<[[:upper:]]>,
C<[[:word:]]>,
and
C<[[:xdigit:]]>.
This was because the underlying Microsoft implementation does not
follow the standard.  Perl now takes special precautions to correct for
this.

=end original

Microsoft Windows では、C<S<use locale>> のスコープ内では、
以下の POSIX 文字クラスは、多くのロケールで POSIX 標準に従わない
結果となっていました:
C<[[:alnum:]]>,
C<[[:alpha:]]>,
C<[[:blank:]]>,
C<[[:digit:]]>,
C<[[:graph:]]>,
C<[[:lower:]]>,
C<[[:print:]]>,
C<[[:punct:]]>,
C<[[:upper:]]>,
C<[[:word:]]>,
C<[[:xdigit:]]>。
これは、基礎になっているマイクロソフトの実装が標準に従っていないからです。
Perl はこれに関して特別な予防措置をするようになりました。

=item *

=begin original

Many issues have been detected by L<Coverity|http://www.coverity.com/> and
fixed.

=end original

多くの問題が L<Coverity|http://www.coverity.com/> によって検出され、
修正されました。

=item *

=begin original

C<system()> and friends should now work properly on more Android builds.

=end original

C<system()> とその類似品は Android ビルドでより適切に
動作するようになりました。

=begin original

Due to an oversight, the value specified through C<-Dtargetsh> to F<Configure>
would end up being ignored by some of the build process.  This caused perls
cross-compiled for Android to end up with defective versions of C<system()>,
C<exec()> and backticks: the commands would end up looking for C</bin/sh>
instead of C</system/bin/sh>, and so would fail for the vast majority
of devices, leaving C<$!> as C<ENOENT>.

=end original

不注意により、C<-Dtargetsh> によって F<Configure> に指定された値は
一部のビルドプロセスで無視されていました。
これにより、Android 用にクロスコンパイルされた perl が、欠陥版の
C<system()>, C<exec()> と逆クォートとなっていました:
コマンドは C</system/bin/sh> ではなく C</bin/sh> を探すことになり、
大部分のデバイスで失敗して C<$!> に C<ENOENT> を設定することになりました。

=item *

=begin original

C<qr(...\(...\)...)>,
C<qr[...\[...\]...]>,
and
C<qr{...\{...\}...}>
now work.  Previously it was impossible to escape these three
left-characters with a backslash within a regular expression pattern
where otherwise they would be considered metacharacters, and the pattern
opening delimiter was the character, and the closing delimiter was its
mirror character.

=end original

C<qr(...\(...\)...)>, C<qr[...\[...\]...]>, C<qr{...\{...\}...}> は
動作するようになりました。
以前は、正規表現パターンの内側でバックスラッシュで
これらの左側の文字をエスケープすることは不可能でした; この場所では
これらはメタ文字と考えられ、パターンの開き区切り文字がこの文字で、
閉じ区切り文字が対応する文字でした。

=item *

=begin original

C<< s///e >> on tainted UTF-8 strings corrupted C<< pos() >>. This bug,
introduced in 5.20, is now fixed.
L<[perl #122148]|https://rt.perl.org/Ticket/Display.html?id=122148>.

=end original

汚染された UTF-8 文字列に対する C<< s///e >> では C<< pos() >> を
壊していました。
この、5.20 で導入されたバグは、修正されました。
L<[perl #122148]|https://rt.perl.org/Ticket/Display.html?id=122148>.

=item *

=begin original

A non-word boundary in a regular expression (C<< \B >>) did not always
match the end of the string; in particular C<< q{} =~ /\B/ >> did not
match. This bug, introduced in perl 5.14, is now fixed.
L<[perl #122090]|https://rt.perl.org/Ticket/Display.html?id=122090>.

=end original

正規表現中の非単語境界 (C<< \B >>) は、常に文字列の末尾で
マッチングするというわけではありませんでした; 特に C<< q{} =~ /\B/ >> は
マッチングしませんでした。
この、perl 5.14 で導入されたバグは、修正されました。
L<[perl #122090]|https://rt.perl.org/Ticket/Display.html?id=122090>.

=item *

=begin original

C<< " P" =~ /(?=.*P)P/ >> should match, but did not. This is now fixed.
L<[perl #122171]|https://rt.perl.org/Ticket/Display.html?id=122171>.

=end original

C<< " P" =~ /(?=.*P)P/ >> はマッチングするべきですがしていませんでした。
これは修正されました。
L<[perl #122171]|https://rt.perl.org/Ticket/Display.html?id=122171>.

=item *

=begin original

Failing to compile C<use Foo> in an C<eval> could leave a spurious
C<BEGIN> subroutine definition, which would produce a "Subroutine
BEGIN redefined" warning on the next use of C<use>, or other C<BEGIN>
block.
L<[perl #122107]|https://rt.perl.org/Ticket/Display.html?id=122107>.

=end original

C<eval> の中で C<use Foo> のコンパイルに失敗すると、偽の
C<BEGIN> サブルーチン定義が残ることがありました。
次の C<use> の使用やその他の C<BEGIN> ブロックで
"Subroutine BEGIN redefined" 警告を出力していました。
L<[perl #122107]|https://rt.perl.org/Ticket/Display.html?id=122107>.

=item *

=begin original

C<method { BLOCK } ARGS> syntax now correctly parses the arguments if they
begin with an opening brace.
L<[perl #46947]|https://rt.perl.org/Ticket/Display.html?id=46947>.

=end original

C<method { BLOCK } ARGS> 構文は、開き中かっこで始まっている引数を正しく
パースするようになりました。
L<[perl #46947]|https://rt.perl.org/Ticket/Display.html?id=46947>.

=item *

=begin original

External libraries and Perl may have different ideas of what the locale is.
This is problematic when parsing version strings if the locale's numeric
separator has been changed.  Version parsing has been patched to ensure
it handles the locales correctly.
L<[perl #121930]|https://rt.perl.org/Ticket/Display.html?id=121930>.

=end original

外部ライブラリと Perl はロケールとは何かについて異なった考えを
持っていることがあります。
これは、ロケールの数値区切り文字が変更されているときにバージョン文字列を
パースするときに問題になります。
バージョンのパースは、ロケールを正しく扱えるようにパッチが当てられました。
L<[perl #121930]|https://rt.perl.org/Ticket/Display.html?id=121930>.

=item *

=begin original

A bug has been fixed where zero-length assertions and code blocks inside of a
regex could cause C<pos> to see an incorrect value.
L<[perl #122460]|https://rt.perl.org/Ticket/Display.html?id=122460>.

=end original

正規表現中のゼロ幅表明とコードブロックによって、C<pos> が間違った値を
返すというバグが修正されました。
L<[perl #122460]|https://rt.perl.org/Ticket/Display.html?id=122460>.

=item *

=begin original

Dereferencing of constants now works correctly for typeglob constants.  Previously
the glob was stringified and its name looked up.  Now the glob itself is used.
L<[perl #69456]|https://rt.perl.org/Ticket/Display.html?id=69456>

=end original

定数のデリファレンスは型グロブ定数でも正しく動作するようになりました。
以前はグロブは文字列化されてその名前を検索していました。
グロブ自身が使われるようになりました。
L<[perl #69456]|https://rt.perl.org/Ticket/Display.html?id=69456>

=item *

=begin original

When parsing a sigil (C<$> C<@> C<%> C<&)> followed by braces,
the parser no
longer tries to guess whether it is a block or a hash constructor (causing a
syntax error when it guesses the latter), since it can only be a block.

=end original

印 (C<$> C<@> C<%> C<&)> に引き続いて中かっこがあるとき、パーサはもはや
これがブロックかハッシュの構築子かの推測をしなくなりました(後者に
推測したときは文法エラーになっていました); これは
ブロックにしかならないからです。

=item *

=begin original

S<C<undef $reference>> now frees the referent immediately, instead of hanging on
to it until the next statement.
L<[perl #122556]|https://rt.perl.org/Ticket/Display.html?id=122556>

=end original

S<C<undef $reference>> は、次の文まで待つことなく、直ちにリファレンス先を
解放するようになりました。
L<[perl #122556]|https://rt.perl.org/Ticket/Display.html?id=122556>

=item *

=begin original

Various cases where the name of a sub is used (autoload, overloading, error
messages) used to crash for lexical subs, but have been fixed.

=end original

サブルーチンの名前が使われる様々な状況 (autoload、オーバーロード、
エラーメッセージ) は、レキシカルサブルーチンではクラッシュしていましたが、
修正されました。

=item *

=begin original

Bareword lookup now tries to avoid vivifying packages if it turns out the
bareword is not going to be a subroutine name.

=end original

裸の単語がサブルーチン名になろうとしていないことが分かっているとき、
裸の単語の検索はパッケージの有効化を避けようとするようになりました。

=item *

=begin original

Compilation of anonymous constants (I<e.g.>, C<sub () { 3 }>) no longer deletes
any subroutine named C<__ANON__> in the current package.  Not only was
C<*__ANON__{CODE}> cleared, but there was a memory leak, too.  This bug goes
back to Perl 5.8.0.

=end original

無名定数のコンパイル (例えば C<sub () { 3 }>) は、もはや現在のパッケージの
C<__ANON__> という名前のサブルーチンを削除しなくなりました。
C<*__ANON__{CODE}> がクリアされるだけでなく、メモリリークもありました。
このバグは Perl 5.8.0 までさかのぼります。

=item *

=begin original

Stub declarations like C<sub f;> and C<sub f ();> no longer wipe out constants
of the same name declared by C<use constant>.  This bug was introduced in Perl
5.10.0.

=end original

C<sub f;> や C<sub f ();> のようなスタブ宣言は、もはや
C<use constant> で宣言された同じ名前の定数をクリアしなくなりました。
このバグは Perl 5.10.0 で導入されてました。

=item *

=begin original

C<qr/[\N{named sequence}]/> now works properly in many instances.

=end original

C<qr/[\N{named sequence}]/> は多くのインスタンスで適切に
動作するようになりました。

=begin original

Some names
known to C<\N{...}> refer to a sequence of multiple characters, instead of the
usual single character.  Bracketed character classes generally only match
single characters, but now special handling has been added so that they can
match named sequences, but not if the class is inverted or the sequence is
specified as the beginning or end of a range.  In these cases, the only
behavior change from before is a slight rewording of the fatal error message
given when this class is part of a C<?[...])> construct.  When the C<[...]>
stands alone, the same non-fatal warning as before is raised, and only the
first character in the sequence is used, again just as before.

=end original

C<\N{...}> で知られる一部の名前は、単一の文字ではなく複数の文字の並びを
参照します。
大かっこ文字クラスは一般的に単一の文字にのみマッチングしますが、
名前付き並びにマッチングするように特別な扱いが追加されました; しかし
クラスが反転されていたり並びが範囲の先頭や末尾として指定されたりしていない
場合のみです。
これらの場合、以前からの振る舞いの変更点は、このクラスが
C<?[...])> 構文のときの致命的エラーメッセージの文言が少し変わることだけです。
C<[...]> を単体で使うと、以前と同様非致命的警告が発生し、これも以前と同様、
並びの最初の文字だけが使われます。

=item *

=begin original

Tainted constants evaluated at compile time no longer cause unrelated
statements to become tainted.
L<[perl #122669]|https://rt.perl.org/Ticket/Display.html?id=122669>

=end original

コンパイル時に評価された汚染された定数はもはや無関係な文を
汚染しなくなりました。
L<[perl #122669]|https://rt.perl.org/Ticket/Display.html?id=122669>

=item *

=begin original

S<C<open $$fh, ...>>, which vivifies a handle with a name like
C<"main::_GEN_0">, was not giving the handle the right reference count, so
a double free could happen.

=end original

S<C<open $$fh, ...>> が C<"main::_GEN_0"> のような名前を持つハンドルを
有効化するとき、ハンドルに正しい参照カウントが与えられておらず、
二重解放が起こる可能性がありました。

=item *

=begin original

When deciding that a bareword was a method name, the parser would get confused
if an C<our> sub with the same name existed, and look up the method in the
package of the C<our> sub, instead of the package of the invocant.

=end original

裸の単語がメソッド名であると決定するとき、同じ名前を持つ
C<our> サブルーチンが存在すると、パーサが混乱して、パッケージの
起動元のパッケージではなく、C<our> サブルーチンのパッケージのメソッドを
検索していました。

=item *

=begin original

The parser no longer gets confused by C<\U=> within a double-quoted string.  It
used to produce a syntax error, but now compiles it correctly.
L<[perl #80368]|https://rt.perl.org/Ticket/Display.html?id=80368>

=end original

パーサはもはやダブルクォートされた文字列の中の C<\U=> で混乱しなくなりました。
これは文法エラーを出力していましたが、正しくコンパイルされるようになりました。
L<[perl #80368]|https://rt.perl.org/Ticket/Display.html?id=80368>

=item *

=begin original

It has always been the intention for the C<-B> and C<-T> file test operators to
treat UTF-8 encoded files as text.  (L<perlfunc|perlfunc/-X FILEHANDLE> has
been updated to say this.)  Previously, it was possible for some files to be
considered UTF-8 that actually weren't valid UTF-8.  This is now fixed.  The
operators now work on EBCDIC platforms as well.

=end original

C<-B> と C<-T> のファイルテスト演算子は、UTF-8 エンコードされたファイルを
常にテキストファイルと考えるようになりました。
(L<perlfunc|perlfunc/-X FILEHANDLE> はこれを示すために更新されました。)
以前は、実際には妥当な UTF-8 でないファイルを UTF-8 と考える
可能性がありました。
これは修正されました。
この演算子は EBCDIC プラットフォームでも正しく動作するようになりました。

=item *

=begin original

Under some conditions warning messages raised during regular expression pattern
compilation were being output more than once.  This has now been fixed.

=end original

ある種の状況では、正規表現パターンのコンパイル中に発生した警告メッセージが
2 回以上出力されることがありました。
これは修正されました。

=item *

=begin original

Perl 5.20.0 introduced a regression in which a UTF-8 encoded regular
expression pattern that contains a single ASCII lowercase letter did not
match its uppercase counterpart. That has been fixed in both 5.20.1 and
5.22.0.
L<[perl #122655]|https://rt.perl.org/Ticket/Display.html?id=122655>

=end original

Perl 5.20.0 では、単一の ASCII 小文字を含む、UTF-8 でエンコードされた
正規表現パターンが大文字で対応するものにマッチングしないという退行が
導入されていました。
これは 5.20.1 と 5.22.0 の両方で修正されました。
L<[perl #122655]|https://rt.perl.org/Ticket/Display.html?id=122655>

=item *

=begin original

Constant folding could incorrectly suppress warnings if lexical warnings
(C<use warnings> or C<no warnings>) were not in effect and C<$^W> were
false at compile time and true at run time.

=end original

レキシカルな警告(C<use warnings> or C<no warnings>) が有効ではなく、
C<$^W> がコンパイル時には偽で実行時には真のとき、
定数畳み込みは間違って警告を抑制することがありました。


=item *

=begin original

Loading Unicode tables during a regular expression match could cause assertion
failures under debugging builds if the previous match used the very same
regular expression.
L<[perl #122747]|https://rt.perl.org/Ticket/Display.html?id=122747>

=end original

正規表現マッチング中に Unicode テーブルを読み込むと、デバッグビルドで、
前回のマッチングが全く同じ正規表現だったとき、アサート失敗を
引き起こしていました。
L<[perl #122747]|https://rt.perl.org/Ticket/Display.html?id=122747>

=item *

=begin original

Thread cloning used to work incorrectly for lexical subs, possibly causing
crashes or double frees on exit.

=end original

スレッドのクローン化はレキシカルサブルーチンでは但し駆動させず、
クラッシュしたり終了時に二重解放したりしていました。

=item *

=begin original

Since Perl 5.14.0, deleting C<$SomePackage::{__ANON__}> and then undefining an
anonymous subroutine could corrupt things internally, resulting in
L<Devel::Peek> crashing or L<B.pm|B> giving nonsensical data.  This has been
fixed.

=end original

Perl 5.14.0 から、C<$SomePackage::{__ANON__}> を削除してから無名サブルーチンを
未定義化すると内部が破壊され、L<Devel::Peek> がクラッシュしたり
L<B.pm|B> が無意味なデータを出力したりしていました。
これは修正されました。

=item *

=begin original

S<C<(caller $n)[3]>> now reports names of lexical subs, instead of
treating them as C<"(unknown)">.

=end original

S<C<(caller $n)[3]>> は、C<"(unknown)"> として扱うのではなく、
レキシカルサブルーチンの名前を報告するようになりました。

=item *

=begin original

C<sort subname LIST> now supports using a lexical sub as the comparison
routine.

=end original

C<sort subname LIST> は比較ルーチンとしてレキシカルサブルーチンを使うことに
対応しました。

=item *

=begin original

Aliasing (I<e.g.>, via S<C<*x = *y>>) could confuse list assignments that mention the
two names for the same variable on either side, causing wrong values to be
assigned.
L<[perl #15667]|https://rt.perl.org/Ticket/Display.html?id=15667>

=end original

(例えば S<C<*x = *y>> による) 別名化は、どちらかの側に同じ変数の二つの
名前に言及しているリスト代入を混乱させて、間違った値が
代入されることがありました。
L<[perl #15667]|https://rt.perl.org/Ticket/Display.html?id=15667>

=item *

=begin original

Long here-doc terminators could cause a bad read on short lines of input.  This
has been fixed.  It is doubtful that any crash could have occurred.  This bug
goes back to when here-docs were introduced in Perl 3.000 twenty-five years
ago.

=end original

長いヒヤドキュメント終端子は、入力の短い行で読み込みが間違っていました。
これは修正されました。
これによってクラッシュが起こることがあったかどうかは疑わしいです。
このバグは、25 年前、ヒヤドキュメントが導入された Perl 3.000 まで
さかのぼります。

=item *

=begin original

An optimization in C<split> to treat S<C<split /^/>> like S<C<split /^/m>> had the
unfortunate side-effect of also treating S<C<split /\A/>> like S<C<split /^/m>>,
which it should not.  This has been fixed.  (Note, however, that S<C<split /^x/>>
does not behave like S<C<split /^x/m>>, which is also considered to be a bug and
will be fixed in a future version.)
L<[perl #122761]|https://rt.perl.org/Ticket/Display.html?id=122761>

=end original

S<C<split /^/>> を S<C<split /^/m>> の用に扱うという C<split> の最適化には
残念ながら副作用があって、S<C<split /\A/>> を S<C<split /^/m>> のように
扱っていましたが、そうするべきではありませんでした。
これは修正されました。
(しかし、S<C<split /^x/>> は S<C<split /^x/m>> のようには振る舞いません;
これはバグと考えられていて将来のバージョンで修正される予定です。)
L<[perl #122761]|https://rt.perl.org/Ticket/Display.html?id=122761>

=item *

=begin original

The little-known S<C<my Class $var>> syntax (see L<fields> and L<attributes>)
could get confused in the scope of C<use utf8> if C<Class> were a constant
whose value contained Latin-1 characters.

=end original

ほとんど知られていない S<C<my Class $var>> 構文 (L<fields> と
L<attributes> 参照) は、C<Class> が Latin-1 文字を含む定数のときに
C<use utf8> スコープ内で混乱することがありました。

=item *

=begin original

Locking and unlocking values via L<Hash::Util> or C<Internals::SvREADONLY>
no longer has any effect on values that were read-only to begin with.
Previously, unlocking such values could result in crashes, hangs or
other erratic behavior.

=end original

L<Hash::Util> や C<Internals::SvREADONLY> 経由で値をロックや
アンロックしたとき、読み込み専用の値だったときにも何の影響も
与えなくなりました。
以前は、このような値をアンロックするとクラッシュ、ハング、あるいは
その他の異常な振る舞いを引き起こしていました。

=item *

=begin original

Some unterminated C<(?(...)...)> constructs in regular expressions would
either crash or give erroneous error messages.  C</(?(1)/> is one such
example.

=end original

正規表現での一部の終端されていない C<(?(...)...)> 構文は、クラッシュしたり
間違ったエラーメッセージを出力したりしていました。
C</(?(1)/> はその例の一つです。

=item *

=begin original

S<C<pack "w", $tied>> no longer calls FETCH twice.

=end original

S<C<pack "w", $tied>> はもはや FETCH を 2 回呼び出さなくなりました。

=item *

=begin original

List assignments like S<C<($x, $z) = (1, $y)>> now work correctly if C<$x> and
C<$y> have been aliased by C<foreach>.

=end original

S<C<($x, $z) = (1, $y)>> のようなリスト代入は、C<$x> と C<$y> が
C<foreach> による別名でも正しく動作するようになりました。

=item *

=begin original

Some patterns including code blocks with syntax errors, such as
S<C</ (?{(^{})/>>, would hang or fail assertions on debugging builds.  Now
they produce errors.

=end original

S<C</ (?{(^{})/>> のような、文法エラーのコードブロックを持つ一部の
パターンは、デバッグビルドでハングしたりアサート失敗したりしていました。
これらはエラーを出力するようになりました。

=item *

=begin original

An assertion failure when parsing C<sort> with debugging enabled has been
fixed.
L<[perl #122771]|https://rt.perl.org/Ticket/Display.html?id=122771>.

=end original

デバッグが有効で C<sort> をパースしたときにアサートに失敗するのは
修正されました。
L<[perl #122771]|https://rt.perl.org/Ticket/Display.html?id=122771>.

=item *

=begin original

S<C<*a = *b; @a = split //, $b[1]>> could do a bad read and produce junk
results.

=end original

S<C<*a = *b; @a = split //, $b[1]>> は間違った読み込みを行ってごみを
返すことがありました。

=item *

=begin original

In S<C<() = @array = split>>, the S<C<() =>> at the beginning no longer confuses
the optimizer into assuming a limit of 1.

=end original

S<C<() = @array = split>> において、先頭の S<C<() =>> はもはや、
上限を 1 と仮定することで最適化器を混乱させなくなりました。

=item *

=begin original

Fatal warnings no longer prevent the output of syntax errors.
L<[perl #122966]|https://rt.perl.org/Ticket/Display.html?id=122966>.

=end original

致命的な警告はもはや文法エラーの出力を妨げなくなりました。
L<[perl #122966]|https://rt.perl.org/Ticket/Display.html?id=122966>.

=item *

=begin original

Fixed a NaN double-to-long-double conversion error on VMS. For quiet NaNs
(and only on Itanium, not Alpha) negative infinity instead of NaN was
produced.

=end original

VMS での NaN の double から long-double への変換エラーが修正されました。
暗黙の NaN の場合 (そして Alpha でなく Itanium の場合のみ) NaN ではなく
負の無限が出力されていました。

=item *

=begin original

Fixed the issue that caused C<< make distclean >> to incorrectly leave some
files behind.
L<[perl #122820]|https://rt.perl.org/Ticket/Display.html?id=122820>.

=end original

C<< make distclean >> が、間違って一部のファイルを残す問題が修正されました。
L<[perl #122820]|https://rt.perl.org/Ticket/Display.html?id=122820>.

=item *

=begin original

AIX now sets the length in C<< getsockopt >> correctly.
L<[perl #120835]|https://rt.perl.org/Ticket/Display.html?id=120835>.
L<[cpan #91183]|https://rt.cpan.org/Ticket/Display.html?id=91183>.
L<[cpan #85570]|https://rt.cpan.org/Ticket/Display.html?id=85570>.

=end original

AIX は C<< getsockopt >> の長さを正しく設定するようになりました。
L<[perl #120835]|https://rt.perl.org/Ticket/Display.html?id=120835>.
L<[cpan #91183]|https://rt.cpan.org/Ticket/Display.html?id=91183>.
L<[cpan #85570]|https://rt.cpan.org/Ticket/Display.html?id=85570>.

=item *

=begin original

The optimization phase of a regexp compilation could run "forever" and
exhaust all memory under certain circumstances; now fixed.
L<[perl #122283]|https://rt.perl.org/Ticket/Display.html?id=122283>.

=end original

正規表現コンパイルの最適化フェーズで、ある種の状況では「無限に」実行され、
全てのメモリを使い果たすことがありました; これは修正されました。
L<[perl #122283]|https://rt.perl.org/Ticket/Display.html?id=122283>.

=item *

=begin original

The test script F<< t/op/crypt.t >> now uses the SHA-256 algorithm if the
default one is disabled, rather than giving failures.
L<[perl #121591]|https://rt.perl.org/Ticket/Display.html?id=121591>.

=end original

テストスクリプト F<< t/op/crypt.t >> は、デフォルトのものが無効の場合は、
失敗するのではなく、SHA-256 アルゴリズムを使うようになりました。
L<[perl #121591]|https://rt.perl.org/Ticket/Display.html?id=121591>.

=item *

=begin original

Fixed an off-by-one error when setting the size of a shared array.
L<[perl #122950]|https://rt.perl.org/Ticket/Display.html?id=122950>.

=end original

共有配列のサイズを設定するときの off-by-one エラーが修正されました。
L<[perl #122950]|https://rt.perl.org/Ticket/Display.html?id=122950>.

=item *

=begin original

Fixed a bug that could cause perl to enter an infinite loop during
compilation. In particular, a C<while(1)> within a sublist, I<e.g.>

=end original

コンパイル中に無限ループを引き起こすバグが修正されました。
特に、部分リストの中の C<while(1)>、つまり次のようなものです:

    sub foo { () = ($a, my $b, ($c, do { while(1) {} })) }

=begin original

The bug was introduced in 5.20.0
L<[perl #122995]|https://rt.perl.org/Ticket/Display.html?id=122995>.

=end original

このバグは 5.20.0 で導入されました
L<[perl #122995]|https://rt.perl.org/Ticket/Display.html?id=122995>。

=item *

=begin original

On Win32, if a variable was C<local>-ized in a pseudo-process that later
forked, restoring the original value in the child pseudo-process caused
memory corruption and a crash in the child pseudo-process (and therefore the
OS process).
L<[perl #40565]|https://rt.perl.org/Ticket/Display.html?id=40565>.

=end original

Win32 で、変数が、後でフォークされた疑似プロセス内で C<local> 化された
場合、子疑似プロセスの基の値を復元するときにメモリ破壊と
子疑似プロセス(従って OS プロセス)のクラッシュを引き起こしていました。
L<[perl #40565]|https://rt.perl.org/Ticket/Display.html?id=40565>.

=item *

=begin original

Calling C<write> on a format with a C<^**> field could produce a panic
in C<sv_chop()> if there were insufficient arguments or if the variable
used to fill the field was empty.
L<[perl #123245]|https://rt.perl.org/Ticket/Display.html?id=123245>.

=end original

C<^**> があるフォーマットに対して C<write> を呼び出すと、引数が不十分だったり
フィールドを埋める変数が空だったりしたときに C<sv_chop()> で
panic を出力していました。
L<[perl #123245]|https://rt.perl.org/Ticket/Display.html?id=123245>.

=item *

=begin original

Non-ASCII lexical sub names now appear without trailing junk when they
appear in error messages.

=end original

エラーメッセージで使われるとき、非 ASCII レキシカルサブルーチン名はもはや
末尾にごみを付けなくなりました。

=item *

=begin original

The C<\@> subroutine prototype no longer flattens parenthesized arrays
(taking a reference to each element), but takes a reference to the array
itself.
L<[perl #47363]|https://rt.perl.org/Ticket/Display.html?id=47363>.

=end original

C<\@> サブルーチンプロトタイプはもはや(それぞれの要素へのリファレンスを取る)
かっこ付き配列をフラット化しなくなり、配列自身へのリファレンスを
取るようになりました。
L<[perl #47363]|https://rt.perl.org/Ticket/Display.html?id=47363>.

=item *

=begin original

A block containing nothing except a C-style C<for> loop could corrupt the
stack, causing lists outside the block to lose elements or have elements
overwritten.  This could happen with C<map { for(...){...} } ...> and with
lists containing C<do { for(...){...} }>.
L<[perl #123286]|https://rt.perl.org/Ticket/Display.html?id=123286>.

=end original

C 形式の C<for> ループだけを含むブロックはスタックを壊して、ブロックの
外側のリストが要素を失ったり要素が上書きされたりしていました。
これは C<map { for(...){...} } ...> や C<do { for(...){...} }> を含む
リストで起きることがありました。
L<[perl #123286]|https://rt.perl.org/Ticket/Display.html?id=123286>.

=item *

=begin original

C<scalar()> now propagates lvalue context, so that
S<C<for(scalar($#foo)) { ... }>> can modify C<$#foo> through C<$_>.

=end original

C<scalar()> は左辺値コンテキストに波及するようになったので、
S<C<for(scalar($#foo)) { ... }>> は C<$_> を通して C<$#foo> を
修正できるようになりました。

=item *

=begin original

C<qr/@array(?{block})/> no longer dies with "Bizarre copy of ARRAY".
L<[perl #123344]|https://rt.perl.org/Ticket/Display.html?id=123344>.

=end original

C<qr/@array(?{block})/> はもはや "Bizarre copy of ARRAY" で
die しなくなりました。
L<[perl #123344]|https://rt.perl.org/Ticket/Display.html?id=123344>.

=item *

=begin original

S<C<eval '$variable'>> in nested named subroutines would sometimes look up a
global variable even with a lexical variable in scope.

=end original

ネストされた名前付きサブルーチンの中の S<C<eval '$variable'>> は、たとえ
スコープ内にレキシカル変数があっても、時々大域変数を見ていました。

=item *

=begin original

In perl 5.20.0, C<sort CORE::fake> where 'fake' is anything other than a
keyword, started chopping off the last 6 characters and treating the result
as a sort sub name.  The previous behavior of treating C<CORE::fake> as a
sort sub name has been restored.
L<[perl #123410]|https://rt.perl.org/Ticket/Display.html?id=123410>.

=end original

perl 5.20.0 で、C<sort CORE::fake> ('fake' はキーワード以外のもの) は、
末尾の 6 文字を切り落として、その結果をソートサブルーチン名として扱うように
なっていました。
C<CORE::fake> をソートサブルーチン名として扱うという以前の振る舞いが
復元されました。
L<[perl #123410]|https://rt.perl.org/Ticket/Display.html?id=123410>.

=item *

=begin original

Outside of C<use utf8>, a single-character Latin-1 lexical variable is
disallowed.  The error message for it, "Can't use global C<$foo>...", was
giving garbage instead of the variable name.

=end original

C<use utf8> の外側で、単一文字 Latin-1 レキシカル変数は認められません。
このためのエラーメッセージ "Can't use global $foo..." で、変数名でなく
ごみが表示されていました。

=item *

=begin original

C<readline> on a nonexistent handle was causing C<${^LAST_FH}> to produce a
reference to an undefined scalar (or fail an assertion).  Now
C<${^LAST_FH}> ends up undefined.

=end original

存在しないハンドルに対して C<readline> を行うと、C<${^LAST_FH}> は
未定義のスカラへのリファレンスを生成(あるいはアサート失敗)していました。
C<${^LAST_FH}> は未定義値になるようになりました。

=item *

=begin original

C<(...) x ...> in void context now applies scalar context to the left-hand
argument, instead of the context the current sub was called in.
L<[perl #123020]|https://rt.perl.org/Ticket/Display.html?id=123020>.

=end original

無効コンテキストでの C<(...) x ...> は現在のサブルーチンが呼び出された
コンテキストではなく、スカラコンテキストを左側の引数に
適用するようになりました。
L<[perl #123020]|https://rt.perl.org/Ticket/Display.html?id=123020>.

=back

=head1 Known Problems

(既知の問題)

=over 4

=item *

=begin original

C<pack>-ing a NaN on a perl compiled with Visual C 6 does not behave properly,
leading to a test failure in F<t/op/infnan.t>.
L<[perl 125203]|https://rt.perl.org/Ticket/Display.html?id=125203>

=end original

Visual C 6 でコンパイルされた perl で NaN を C<pack> すると正しく振る舞わず、
F<t/op/infnan.t> の失敗を引き起こしていました。
L<[perl 125203]|https://rt.perl.org/Ticket/Display.html?id=125203>

=item *

=begin original

A goal is for Perl to be able to be recompiled to work reasonably well on any
Unicode version.  In Perl 5.22, though, the earliest such version is Unicode
5.1 (current is 7.0).

=end original

Perl のゴールは、どの Unicode バージョンでも適度にうまく動作するように
再コンパイルできることです。
しかし、Perl 5.22 では、そのようにできる最新のバージョンは Unicode 5.1
(最新は 7.0) です。

=item *

=begin original

EBCDIC platforms

=end original

EBCDIC プラットフォーム

=over 4

=item *

=begin original

The C<cmp> (and hence C<sort>) operators do not necessarily give the
correct results when both operands are UTF-EBCDIC encoded strings and
there is a mixture of ASCII and/or control characters, along with other
characters.

=end original

C<cmp> (とそれを使う C<sort>) 演算子は、両方のオペランドが UTF-EBCDIC で
エンコードされた文字列で、ASCII と制御文字が他の文字と混ざっているときには
正しい結果を返すとは限りません;

=item *

=begin original

Ranges containing C<\N{...}> in the C<tr///> (and C<y///>)
transliteration operators are treated differently than the equivalent
ranges in regular expression patterns.  They should, but don't, cause
the values in the ranges to all be treated as Unicode code points, and
not native ones.  (L<perlre/Version 8 Regular Expressions> gives
details as to how it should work.)

=end original

C<tr///> (および C<y///>) 変換で C<\N{...}> を含んでいる範囲は、
正規表現パターンでの等価な範囲と異なった扱いをしていました。
範囲内の値は全て、ネイティブなものではなく Unicode 符号位置として
扱うべきでしたが、そうなっていませんでした。
(L<perlre/Version 8 Regular Expressions> にはどのように動作するべきかの
詳細があります。)

=item *

=begin original

Encode and encoding are mostly broken.

=end original

Encode と encoding はほとんど壊れています。

=item *

=begin original

Many CPAN modules that are shipped with core show failing tests.

=end original

コアに同梱されている多くの CPAN モジュールはテストに失敗します。

=item *

=begin original

C<pack>/C<unpack> with C<"U0"> format may not work properly.

=end original

C<pack>/C<unpack> での C<"U0"> フォーマットは正しく動作しません。

=back

=item *

=begin original

The following modules are known to have test failures with this version of
Perl.  In many cases, patches have been submitted, so there will hopefully be
new releases soon:

=end original

以下のモジュールはこのバージョンの Perl でテストが失敗することが
知られています。
多くの場合、パッチは提出されているので、うまくいけばすぐに新しいリリースが
出るでしょう:

=over

=item *

=begin original

L<B::Generate> version 1.50

=end original

L<B::Generate> バージョン 1.50

=item *

=begin original

L<B::Utils> version 0.25

=end original

L<B::Utils> バージョン 0.25

=item *

=begin original

L<Coro> version 6.42

=end original

L<Coro> バージョン 6.42

=item *

=begin original

L<Dancer> version 1.3130

=end original

L<Dancer> バージョン 1.3130

=item *

=begin original

L<Data::Alias> version 1.18

=end original

L<Data::Alias> バージョン 1.18

=item *

=begin original

L<Data::Dump::Streamer> version 2.38

=end original

L<Data::Dump::Streamer> バージョン 2.38

=item *

=begin original

L<Data::Util> version 0.63

=end original

L<Data::Util> バージョン 0.63

=item *

=begin original

L<Devel::Spy> version 0.07

=end original

L<Devel::Spy> バージョン 0.07

=item *

=begin original

L<invoker> version 0.34

=end original

L<invoker> バージョン 0.34

=item *

=begin original

L<Lexical::Var> version 0.009

=end original

L<Lexical::Var> バージョン 0.009

=item *

=begin original

L<LWP::ConsoleLogger> version 0.000018

=end original

L<LWP::ConsoleLogger> バージョン 0.000018

=item *

=begin original

L<Mason> version 2.22

=end original

L<Mason> バージョン 2.22

=item *

=begin original

L<NgxQueue> version 0.02

=end original

L<NgxQueue> バージョン 0.02

=item *

=begin original

L<Padre> version 1.00

=end original

L<Padre> バージョン 1.00

=item *

=begin original

L<Parse::Keyword> 0.08

=end original

L<Parse::Keyword> 0.08

=back

=back

=head1 Obituary

(お悔やみ)

=begin original

Brian McCauley died on May 8, 2015.  He was a frequent poster to Usenet, Perl
Monks, and other Perl forums, and made several CPAN contributions under the
nick NOBULL, including to the Perl FAQ.  He attended almost every
YAPC::Europe, and indeed, helped organise YAPC::Europe 2006 and the QA
Hackathon 2009.  His wit and his delight in intricate systems were
particularly apparent in his love of board games; many Perl mongers will
have fond memories of playing Fluxx and other games with Brian.  He will be
missed.

=end original

Brian McCauley は 2015 年 5 月 8 日に死去しました。
彼は Usenet, Perl Monks 及びその他の Perl フォーラムに頻繁に投稿していて、
NOBULL の名前で Perl FAQ を含むいくつかの CPAN 貢献を行っていました。
彼はほとんど毎回 YAPC::Europe に参加し、そして実際、YAPC::Europe 2006 と
QA Hackathon 2009 の運営を助けました。
複雑なシステムでの彼の機知と歓喜は、彼のボードゲーム愛に特に現れていました;
多くの Perl monger は、Brian とフラックスやその他のゲームをプレイした
楽しい記憶を持っています。
彼がいなくなって悲しいです。

=head1 Acknowledgements

=begin original

Perl 5.22.0 represents approximately 12 months of development since Perl 5.20.0
and contains approximately 590,000 lines of changes across 2,400 files from 94
authors.

=end original

Perl 5.22.0 は、Perl 5.20.0 以降、94 人の作者によって、2,400 のファイルに
約 590,000 行の変更を加えて、約 12 ヶ月開発されてきました。

=begin original

Excluding auto-generated files, documentation and release tools, there were
approximately 370,000 lines of changes to 1,500 .pm, .t, .c and .h files.

=end original

自動生成ファイル、文書、リリースツールを除くと、1,500 の .pm, .t, .c,
.h ファイルに約 370,000 行の変更を加えました。

=begin original

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.22.0:

=end original

Perl は、活気のあるユーザーと開発者のコミュニティのおかげで 20 年を超えて
繁栄しています。
以下の人々が、Perl 5.22.0 になるための改良に貢献したことが分かっています:

Aaron Crane, Abhijit Menon-Sen, Abigail, Alberto SimE<otilde>es, Alex Solovey, Alex
Vandiver, Alexandr Ciornii, Alexandre (Midnite) Jousset, Andreas KE<ouml>nig,
Andreas Voegele, Andrew Fresh, Andy Dougherty, Anthony Heading, Aristotle
Pagaltzis, brian d foy, Brian Fraser, Chad Granum, Chris 'BinGOs' Williams,
Craig A. Berry, Dagfinn Ilmari MannsE<aring>ker, Daniel Dragan, Darin McBride, Dave
Rolsky, David Golden, David Mitchell, David Wheeler, Dmitri Tikhonov, Doug
Bell, E. Choroba, Ed J, Eric Herman, Father Chrysostomos, George Greer, Glenn
D. Golden, Graham Knop, H.Merijn Brand, Herbert Breunung, Hugo van der Sanden,
James E Keenan, James McCoy, James Raspass, Jan Dubois, Jarkko Hietaniemi,
Jasmine Ngan, Jerry D. Hedden, Jim Cromie, John Goodyear, kafka, Karen
Etheridge, Karl Williamson, Kent Fredric, kmx, Lajos Veres, Leon Timmermans,
Lukas Mai, Mathieu Arnold, Matthew Horsfall, Max Maischein, Michael Bunk,
Nicholas Clark, Niels Thykier, Niko Tyni, Norman Koch, Olivier MenguE<eacute>, Peter
John Acklam, Peter Martini, Petr PE<iacute>saE<0x159>, Philippe Bruhat (BooK), Pierre
Bogossian, Rafael Garcia-Suarez, Randy Stauner, Reini Urban, Ricardo Signes,
Rob Hoelz, Rostislav Skudnov, Sawyer X, Shirakata Kentaro, Shlomi Fish,
Sisyphus, Slaven Rezic, Smylers, Steffen ME<uuml>ller, Steve Hay, Sullivan Beck,
syber, Tadeusz SoE<0x15B>nierz, Thomas Sibley, Todd Rinaldo, Tony Cook, Vincent Pit,
Vladimir Marek, Yaroslav Kuzmin, Yves Orton, E<AElig>var ArnfjE<ouml>rE<eth> Bjarmason.

=begin original

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

=end original

これはバージョンコントロール履歴から自動的に生成しているので、ほぼ確実に
不完全です。
特に、Perl バグトラッカーに問題を報告をしてくれた (とてもありがたい)貢献者の
名前を含んでいません。

=begin original

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

=end original

このバージョンに含まれている変更の多くは、Perl コアに含まれている CPAN
モジュール由来のものです。
私たちは Perl の発展を助けている CPAN コミュニティ全体に感謝します。

=begin original

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=end original

全ての Perl の歴史的な貢献者のより完全な一覧については、どうか Perl ソース
配布に含まれている F<AUTHORS> を参照してください。

=head1 Reporting Bugs

(バグ報告)

=begin original

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

=end original

もしバグと思われるものを見つけたら、comp.lang.perl.misc ニュースグループに
最近投稿された記事や L<https://rt.perl.org/> にある perl バグ
データベースを確認してください。
Perl ホームページ、L<http://www.perl.org/> にも情報があります。

=begin original

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

=end original

もしまだ報告されていないバグだと確信したら、そのリリースに含まれている
L<perlbug> プログラムを実行してください。
バグの再現スクリプトを十分小さく、しかし有効なコードに切りつめることを
意識してください。
バグレポートは C<perl -V> の出力と一緒に perlbug@perl.org に送られ
Perl porting チームによって解析されます。

=begin original

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=end original

もし報告しようとしているバグがセキュリティに関するもので、公開されている
メーリングリストに送るのが不適切なものなら、
perl5-security-report@perl.org に送ってください。
このアドレスは、問題の影響を評価し、解決法を見つけ、Perl が対応している
全てのプラットフォームで問題を軽減または解決するパッチをリリースするのを
助けることが出来る、全てのコアコミッタが参加している非公開の
メーリングリストになっています。
このアドレスは、独自に CPAN で配布されているモジュールではなく、
Perl コアのセキュリティ問題だけに使ってください。

=head1 SEE ALSO

=begin original

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

=end original

変更点の完全な詳細を見る方法については F<Changes> ファイル。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

Perl のビルド方法については F<INSTALL> ファイル。

=begin original

The F<README> file for general stuff.

=end original

一般的なことについては F<README> ファイル。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

著作権情報については F<Artistic> 及び F<Copying> ファイル。

=cut

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: completed

=end meta

