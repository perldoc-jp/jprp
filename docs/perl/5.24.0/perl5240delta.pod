
=encoding euc-jp

=head1 NAME

=begin original

perldelta - what is new for perl v5.24.0

=end original

perl5240delta - perl v5.24.0 での変更点

=head1 DESCRIPTION

=begin original

This document describes the differences between the 5.22.0 release and the
5.24.0 release.

=end original

この文書は 5.22.0 リリースと 5.24.0 リリースの変更点を記述しています。

=head1 Core Enhancements

(コアの拡張)

=head2 Postfix dereferencing is no longer experimental

(接尾辞デリファレンスは実験的ではなくなりました)

=begin original

Using the C<postderef> and C<postderef_qq> features no longer emits a
warning. Existing code that disables the C<experimental::postderef> warning
category that they previously used will continue to work. The C<postderef>
feature has no effect; all Perl code can use postfix dereferencing,
regardless of what feature declarations are in scope. The C<5.24> feature
bundle now includes the C<postderef_qq> feature.

=end original

C<postderef> 機能と C<postderef_qq> 機能を使っても警告が発生しなくなりました。
以前使われていた、C<experimental::postderef> 警告カテゴリを無効にしている
既存のコードはそのまま動作します。
C<postderef> 機能は何の効果もありません; 全ての Perl コードは、スコープ内で
どの機能が宣言されているかに関わらず、接尾辞デリファレンスを使えます。
C<5.24> 機能バンドルは C<postderef_qq> 機能を含むようになりました。

=head2 Unicode 8.0 is now supported

(Unicode 8.0 に対応しました)

=begin original

For details on what is in this release, see
L<http://www.unicode.org/versions/Unicode8.0.0/>.

=end original

このリリースによる詳細は、
L<http://www.unicode.org/versions/Unicode8.0.0/> を参照してください。

=head2 perl will now croak when closing an in-place output file fails

(その場編集出力ファイルを閉じるのに失敗すると例外が起きるようになりました)

=begin original

Until now, failure to close the output file for an in-place edit was not
detected, meaning that the input file could be clobbered without the edit being
successfully completed.  Now, when the output file cannot be closed
successfully, an exception is raised.

=end original

今まで、その場編集での出力ファイルを閉じるのに失敗しても
検出されていなかったので、編集が正しく終わらずに入力ファイルが壊れることが
ありました。
出力ファイルが正しく閉じられなかった場合、例外が発生するようになりました。

=head2 New C<\b{lb}> boundary in regular expressions

(正規表現の新しい C<\b{lb}> 境界)

=begin original

C<lb> stands for Line Break.  It is a Unicode property
that determines where a line of text is suitable to break (typically so
that it can be output without overflowing the available horizontal
space).  This capability has long been furnished by the
L<Unicode::LineBreak> module, but now a light-weight, non-customizable
version that is suitable for many purposes is in core Perl.

=end original

C<lb> は Line Break の意味です。
これは(典型的には利用可能な横スペースを越えずに出力できるようにするために)
テキストの行のどこが分割に適しているかを決定するための Unicode 特性です。
この能力は長い間 L<Unicode::LineBreak> モジュールによって提供されていましたが、
多くの用途に適している、軽量でカスタマイズできない版がコア Perl に
入るようになりました。

=head2 C<qr/(?[ ])/> now works in UTF-8 locales

(C<qr/(?[ ])/> は UTF-8 ロケールで動作するようになりました)

=begin original

L<Extended Bracketed Character Classes|perlrecharclass/Extended Bracketed Character Classes>
now will successfully compile when S<C<use locale>> is in effect.  The compiled
pattern will use standard Unicode rules.  If the runtime locale is not a
UTF-8 one, a warning is raised and standard Unicode rules are used
anyway.  No tainting is done since the outcome does not actually depend
on the locale.

=end original

L<拡張大かっこ文字クラス|perlrecharclass/Extended Bracketed Character Classes>
は、S<C<use locale>> が有効な場所でもコンパイルに成功するようになりました。
コンパイルされたパターンは標準の Unicode の規則を使います。
実行時ロケールが UTF-8 のものではない場合、警告が発生して、どちらにしろ
標準の Unicode の規則が使われます。
結果は実際にはロケールの影響を受けないため、汚染はされません。

=head2 Integer shift (C<< << >> and C<< >> >>) now more explicitly defined

(整数シフト (C<< << >> と C<< >> >>) はより明示的に定義されました)

=begin original

Negative shifts are reverse shifts: left shift becomes right shift,
and right shift becomes left shift.

=end original

負数のシフトは逆シフトです: 左シフトは右シフトに、右シフトは左シフトに
なります。

=begin original

Shifting by the number of bits in a native integer (or more) is zero,
except when the "overshift" is right shifting a negative value under
C<use integer>, in which case the result is -1 (arithmetic shift).

=end original

ネイティブな整数のビット数(またはそれ以上)シフトするとゼロになります;
ただし C<use integer> の基で、「オーバーシフト」が負数に対する右シフトの
場合は、結果は -1 になります(算術シフト)。

=begin original

Until now negative shifting and overshifting have been undefined
because they have relied on whatever the C implementation happens
to do.  For example, for the overshift a common C behavior is
"modulo shift":

=end original

今まで、負のシフトとオーバーシフトは未定義でした; C の実装で何が起きるかに
依存していたからです。
例えば、過剰シフトについては一般的な C の振る舞いは「剰余シフト」です:

  1 >> 64 == 1 >> (64 % 64) == 1 >> 0 == 1  # Common C behavior.

  # And the same for <<, while Perl now produces 0 for both.

=begin original

Now these behaviors are well-defined under Perl, regardless of what
the underlying C implementation does.  Note, however, that you are still
constrained by the native integer width: you need to know how far left you
can go.  You can use for example:

=end original

これらの振る舞いは、基となっている C 実装に関わらず、Perl の基では
定義されたものになりました。
しかし、これはまだネイティブな整数の幅によって制限されることに
注意してください: どれくらいシフトできるか知っている必要があります。
例えば以下のものが使えます:

  use Config;
  my $wordbits = $Config{uvsize} * 8;  # Or $Config{uvsize} << 3.

=begin original

If you need a more bits on the left shift, you can use for example
the C<bigint> pragma, or the C<Bit::Vector> module from CPAN.

=end original

左シフトでもっと多くのビットが必要なら、例えば C<bigint> プラグマや、CPAN から
C<Bit::Vector> モジュールが使えます。

=head2 printf and sprintf now allow reordered precision arguments

(printf と sprintf は制度引数の順番を変えられるようになりました)

=begin original

That is, C<< sprintf '|%.*2$d|', 2, 3 >> now returns C<|002|>. This extends
the existing reordering mechanism (which allows reordering for arguments
that are used as format fields, widths, and vector separators).

=end original

つまり、C<< sprintf '|%.*2$d|', 2, 3 >> は C<|002|> を返すようになりました。
これは既存の並び替え機構(フォーマットフィールド、幅、ベクタ区切りの引数を
並び替えるもの)を拡張します。

=head2 More fields provided to C<sigaction> callback with C<SA_SIGINFO>

(C<SA_SIGINFO> 付きの C<sigaction> はより多くのフィールドを提供するようになりました)

=begin original

When passing the C<SA_SIGINFO> flag to L<sigaction|POSIX/sigaction>, the
C<errno>, C<status>, C<uid>, C<pid>, C<addr> and C<band> fields are now
included in the hash passed to the handler, if supported by the
platform.

=end original

L<sigaction|POSIX/sigaction> に C<SA_SIGINFO> フラグを渡すとき、
プラットフォームが対応していれば、ハンドラに渡されるハッシュに
C<errno>, C<status>, C<uid>, C<pid>, C<addr>, C<band> フィールドが
含まれるようになりました。

=head2 Hashbang redirection to Perl 6

(Perl 6 へのシェバンリダイレクト)

=begin original

Previously perl would redirect to another interpreter if it found a
hashbang path unless the path contains "perl" (see L<perlrun>). To improve
compatability with Perl 6 this behavior has been extended to also redirect
if "perl" is followed by "6".

=end original

以前は、シェバンパスがあり、そのパスに "perl" が含まれていない場合、
perl は他のインタプリタにリダイレクトしていました (L<perlrun> 参照)。
Perl 6 との互換性を向上させるために、この振る舞いは、"perl" に引き続いて
"6" がある場合もリダイレクトされるように拡張されました。

=head1 Security

(セキュリティ)

=head2 Set proper umask before calling C<mkstemp(3)>

(C<mkstemp(3)> を呼び出す前に適切な umask を設定するようになりました)

=begin original

In 5.22 perl started setting umask to 0600 before calling C<mkstemp(3)>
and restoring it afterwards. This wrongfully tells C<open(2)> to strip
the owner read and write bits from the given mode before applying it,
rather than the intended negation of leaving only those bits in place.

=end original

5.22 から、perl は C<mkstemp(3)> を呼び出す前に umask を C<0600> に設定し、
後で復元するようになりました。
これにより、所有者の読み込みと書き込みのビットだけを残したいという意図とは
逆に、間違って C<open(2)> に、与えられたモードを適用する前に、
これらのビットを取り除くように伝えていました。

=begin original

Systems that use mode 0666 in C<mkstemp(3)> (like old versions of
glibc) create a file with permissions 0066, leaving world read and
write permissions regardless of current umask.

=end original

(古いバージョンの glibc のように) C<mkstemp(3)> でモード 0666 を使う
システムはパーミッション 0066 でファイルを作ります; これにより現在の
umask に関わらず誰でも読み書きできるパーミッションのままになります。

=begin original

This has been fixed by using umask 0177 instead. [perl #127322]

=end original

これは代わりに umask C<0177> を使うことによって修正されました。
[perl #127322]

=head2 Fix out of boundary access in Win32 path handling

(Win32 パス操作での領域外アクセスは修正されました)

=begin original

This is CVE-2015-8608.  For more information see
L<[perl #126755]|https://rt.perl.org/Ticket/Display.html?id=126755>

=end original

これは CVE-2015-8608 です。
さらなる情報については
L<[perl #126755]|https://rt.perl.org/Ticket/Display.html?id=126755> を
参照してください。

=head2 Fix loss of taint in canonpath

(canonpath で汚染が失われることは修正されました)

=begin original

This is CVE-2015-8607.  For more information see
L<[perl #126862]|https://rt.perl.org/Ticket/Display.html?id=126862>

=end original

これは CVE-2015-8607 です。
さらなる情報については
L<[perl #126862]|https://rt.perl.org/Ticket/Display.html?id=126862> を
参照してください。

=head2 Avoid accessing uninitialized memory in win32 C<crypt()>

(Win32 C<crypt()> で未初期化メモリにアクセスしないように)

=begin original

Added validation that will detect both a short salt and invalid characters
in the salt.
L<[perl #126922]|https://rt.perl.org/Ticket/Display.html?id=126922>

=end original

短いソルトやソルトの中の不正な文字の検出処理が追加されました。
L<[perl #126922]|https://rt.perl.org/Ticket/Display.html?id=126922>

=head2 Remove duplicate environment variables from C<environ>

(C<environ> から重複した環境変数を削除するようになりました)

=begin original

Previously, if an environment variable appeared more than once in
C<environ[]>, C<%ENV> would contain the last entry for that name,
while a typical C<getenv()> would return the first entry. We now
make sure C<%ENV> contains the same as what C<getenv> returns.

=end original

以前は、一つの環境変数が C<environ[]> に複数回現れると、
C<%ENV> はその名前の最後のエントリを保持していました; 一方典型的な
C<getenv()> は最初のエントリを保持します。
C<%ENV> は C<getenv()> が返すものと同じものを保持するようになりました。

=begin original

Second, we remove duplicates from C<environ[]>, so if a setting
with that name is set in C<%ENV>, we won't pass an unsafe value
to a child process.

=end original

次に、C<environ[]> から重複を取り除くようになったので、その名前の設定が
C<%ENV> で設定された場合、安全でない値が子プロセスに渡らないようになりました。

[CVE-2016-2381]

=head1 Incompatible Changes

(互換性のない変更)

=head2 The C<autoderef> feature has been removed

(C<autoderef> 機能は取り除かれました)

=begin original

The experimental C<autoderef> feature (which allowed calling C<push>,
C<pop>, C<shift>, C<unshift>, C<splice>, C<keys>, C<values>, and C<each> on
a scalar argument) has been deemed unsuccessful. It has now been removed;
trying to use the feature (or to disable the C<experimental::autoderef>
warning it previously triggered) now yields an exception.

=end original

実験的な C<autoderef> 機能 (C<push>, C<pop>, C<shift>, C<unshift>, C<splice>,
C<keys>, C<values>, C<each> をスカラ引数で呼び出せるようにする) は失敗と
判断されました。
これは削除されました; この機能を use しようとすると (または以前は
引き起こされていた C<experimental::autoderef> 警告を無効にしようとすると)
例外が発生するようになりました。

=head2 Lexical $_ has been removed

(レキシカルな $_ は取り除かれました)

=begin original

C<my $_> was introduced in Perl 5.10, and subsequently caused much confusion
with no obvious solution.  In Perl 5.18.0, it was made experimental on the
theory that it would either be removed or redesigned in a less confusing (but
backward-incompatible) way.  Over the following years, no alternatives were
proposed.  The feature has now been removed and will fail to compile.

=end original

C<my $_> は Perl 5.10 で導入され、明らかな解決法の無いまま多くの混乱を
引き起こしました。
Perl 5.18.0 では、取り除くかあるいはより混乱の少ない(しかし後方互換性のある)
形に再設計するために実験的なものとされました。
その後数年にわたって、代替案は提案されませんでした。
この機能は削除され、コンパイルに失敗するようになりました。

=head2 C<qr/\b{wb}/> is now tailored to Perl expectations

(C<qr/\b{wb}/> は Perl で想定するように調整されました)

=begin original

This is now more suited to be a drop-in replacement for plain C<\b>, but
giving better results for parsing natural language.  Previously it
strictly followed the current Unicode rules which calls for it to match
between each white space character.  Now it doesn't generally match
within spans of white space, behaving like C<\b> does.  See
L<perlrebackslash/\b{wb}>

=end original

これは普通の C<\b> の置き換えとして寄り適していましたが、自然言語の
パースのためにより良い結果を出すようになりました。
以前は、全ての空白文字の間でマッチングすることを求めている現在の Unicode の
規則に厳密に従っていました。
これは、C<\b> が行っているように、基本的には連続した空白の中では
マッチングしなくなりました。
L<perlrebackslash/\b{wb}> を参照してください。

=head2 Regular expression compilation errors

(正規表現コンパイルエラー)

=begin original

Some regular expression patterns that had runtime errors now
don't compile at all.

=end original

実行時エラーになっていた一部の正規表現パターンは
コンパイルできないようになりました。

=begin original

Almost all Unicode properties using the C<\p{}> and C<\P{}> regular
expression pattern constructs are now checked for validity at pattern
compilation time, and invalid ones will cause the program to not
compile.  In earlier releases, this check was often deferred until run
time.  Whenever an error check is moved from run- to compile time,
erroneous code is caught 100% of the time, whereas before it would only
get caught if and when the offending portion actually gets executed,
which for unreachable code might be never.

=end original

C<\p{}> と C<\P{}> の正規表現パターン構文を使っているほとんどの全ての
Unicode 特性は、パターンのコンパイル時に正当性を調べるようになり、不正な場合は
プログラムがコンパイルされなくなりました。
以前のリリースでは、この検査はしばしば実行時にまで保留されていました。
エラー検査が実行時からコンパイル時に移動しても、間違ったコードはその時点で
100% 捕捉されます; 一方、以前は間違いは問題が実際に実行されるときに
捕捉されていたので、到達しないコードのものは決して捕捉されていませんでした。

=head2 C<qr/\N{}/> now disallowed under C<use re "strict">

(C<qr/\N{}/> は C<use re "strict"> の基では認められなくなりました)

=begin original

An empty C<\N{}> makes no sense, but for backwards compatibility is
accepted as doing nothing, though a deprecation warning is raised by
default.  But now this is a fatal error under the experimental feature
L<re/'strict' mode>.

=end original

空の C<\N{}> は無意味ですが、後方互換性のために何もしないものとして
認められていましたが、デフォルトでは廃止予定警告が出ていました。
今回これは実験的機能 L<re/'strict' mode> の基では致命的エラーになりました。

=head2 Nested declarations are now disallowed

(ネストした宣言は認められなくなりました)

=begin original

A C<my>, C<our>, or C<state> declaration is no longer allowed inside
of another C<my>, C<our>, or C<state> declaration.

=end original

C<my>, C<our>, C<state> 宣言は、別の C<my>, C<our>, C<state> 宣言の中では
行えなくなりました。

=begin original

For example, these are now fatal:

=end original

例えば、以下のものは致命的エラーになりました:

   my ($x, my($y));
   our (my $x);

L<[perl #125587]|https://rt.perl.org/Ticket/Display.html?id=125587>

L<[perl #121058]|https://rt.perl.org/Ticket/Display.html?id=121058>

=head2 The C</\C/> character class has been removed.

(C</\C/> 文字クラスは取り除かれました)

=begin original

This regular expression character class was deprecated in v5.20.0 and has
produced a deprecation warning since v5.22.0. It is now a compile-time
error. If you need to examine the individual bytes that make up a
UTF8-encoded character, then use C<utf8::encode()> on the string (or a
copy) first.

=end original

この正規表現文字クラスは v5.20.0 から廃止予定になり、v5.22.0 から
廃止予定警告が出力されていました。
これはコンパイルエラーになりました。
UTF-8 エンコードされた文字を構成している個々のバイトを調べる必要があるときは、
まず文字列(またはそのコピー)に対して C<utf8::encode()> を使ってください。

=head2 C<chdir('')> no longer chdirs home

(C<chdir('')> はホームに chdir しなくなりました)

=begin original

Using C<chdir('')> or C<chdir(undef)> to chdir home has been deprecated since
perl v5.8, and will now fail.  Use C<chdir()> instead.

=end original

ホームディレクトリへ移動するのに C<chdir('')> や C<chdir(undef)> を使うのは
perl v5.8 から廃止予定でしたが、失敗するようになりました。
代わりに C<chdir()> を使ってください。

=head2 ASCII characters in variable names must now be all visible

(変数名の ASCII 文字は全て表示文字でなければならなくなりました)

=begin original

It was legal until now on ASCII platforms for variable names to contain
non-graphical ASCII control characters (ordinals 0 through 31, and 127,
which are the C0 controls and C<DELETE>).  This usage has been
deprecated since v5.20, and as of now causes a syntax error.  The
variables these names referred to are special, reserved by Perl for
whatever use it may choose, now, or in the future.  Each such variable
has an alternative way of spelling it.  Instead of the single
non-graphic control character, a two character sequence beginning with a
caret is used, like C<$^]> and C<${^GLOBAL_PHASE}>.  Details are at
L<perlvar>.   It remains legal, though unwise and deprecated (raising a
deprecation warning), to use certain non-graphic non-ASCII characters in
variables names when not under S<C<use utf8>>.  No code should do this,
as all such variables are reserved by Perl, and Perl doesn't currently
define any of them (but could at any time, without notice).

=end original

今まで、ASCII プラットフォームで、非表示 ASCII 制御文字(値 0 から 31 と 127、
つまり C0 制御文字と C<DELETE>) を含む変数名は正当でした。
この使用法は v5.20 から廃止予定になっていましたが、
今回文法エラーになりました。
これらの名前の変数は特別なものとして扱われ、Perl によって現在、あるいは
将来の使用のために予約されています。
このような変数はそれぞれ表記するための他の方法があります。
単一の非表示制御文字の代わりに、C<$^]> や C<${^GLOBAL_PHASE}> のように、
キャレットから始まる 2 文字並びが使われます。
詳細は L<perlvar> にあります。
S<C<use utf8>> が有効でない場所である種の非表示非 ASCII 文字を変数に使うのは
まだ正当ですが、賢明ではないことで、廃止予定です(廃止予定警告が出ます)。
このような全ての変数は Perl によって予約されていて、Perl は現在のところ
どれも定義していない(しかしいつか注意なしに定義するかもしれません)ので、
コード中でこのようなことをするべきではありません。

=head2 An off by one issue in C<$Carp::MaxArgNums> has been fixed

(C<$Carp::MaxArgNums> のオフバイワン問題が修正されました)

=begin original

C<$Carp::MaxArgNums> is supposed to be the number of arguments to display.
Prior to this version, it was instead showing C<$Carp::MaxArgNums> + 1 arguments,
contrary to the documentation.

=end original

C<$Carp::MaxArgNums> は表示する引数の数を保持することになっています。
以前のバージョンでは、文書の説明と異なり、C<$Carp::MaxArgNums> + 1 個の引数を
表示していました。

=head2 Only blanks and tabs are now allowed within C<[...]> within C<(?[...])>.

(C<(?[...])> の中の C<[...]> の中にはブランクとタブのみが許されるようになりました)

=begin original

The experimental Extended Bracketed Character Classes can contain regular
bracketed character classes within them.  These differ from regular ones in
that white space is generally ignored, unless escaped by preceding it with a
backslash.  The white space that is ignored is now limited to just tab C<\t>
and SPACE characters.  Previously, it was any white space.  See
L<perlrecharclass/Extended Bracketed Character Classes>.

=end original

実験的な拡張大かっこ文字クラスは通常の大かっこ文字クラスを含むことが出来ます。
これらは、バックスラッシュを前置してエスケープしない限り、基本的に空白が
無視されるという点で、通常のものとは異なっていました;
無視される空白はタブ C<\t> と SPACE 文字に制限されるようになりました。
以前は、これは任意の空白でした。
L<perlrecharclass/Extended Bracketed Character Classes> を参照してください。

=head1 Deprecations

(廃止予定)

=head2 Using code points above the platform's C<IV_MAX> is now deprecated

(プラットフォームの C<IV_MAX> を越える符号位置の使用は廃止予定になりました)

=begin original

Unicode defines code points in the range C<0..0x10FFFF>.  Some standards
at one time defined them up to 2**31 - 1, but Perl has allowed them to
be as high as anything that will fit in a word on the platform being
used.  However, use of those above the platform's C<IV_MAX> is broken in
some constructs, notably C<tr///>, regular expression patterns involving
quantifiers, and in some arithmetic and comparison operations, such as
being the upper limit of a loop.  Now the use of such code points raises
a deprecation warning, unless that warning category is turned off.
C<IV_MAX> is typically 2**31 -1 on 32-bit platforms, and 2**63-1 on
64-bit ones.

=end original

Unicode は C<0..0x10FFFF> の範囲の符号位置を定義しています。
一部の標準は一時期この値を 2**31 - 1 まで定義していましたが、Perl は
プラットフォームが使えるワードに収まるなら、どんなに大きな値でも
許していました。
しかし、プラットフォームの C<IV_MAX> より上の符号位置を使うと
一部の構文、特に C<tr///>、量指定子を含む正規表現パターン、一部の算術および
比較演算子、ループの上限などで壊れていました。
今回、これらの符号位置を使うと、この警告カテゴリをオフにしていない限り、
廃止予定警告が出るようになりました。
C<IV_MAX> は典型的には 32 ビットプラットフォームでは 2**31 -1、
64 ビットでは 2**63-1 です。

=head2 Doing bitwise operations on strings containing code points above
0xFF is deprecated

(0xFF より大きい符号位置を含む文字列に対するビット単位操作は廃止予定です)

=begin original

The string bitwise operators treat their operands as strings of bytes,
and values beyond 0xFF are nonsensical in this context.  To operate on
encoded bytes, first encode the strings.  To operate on code points'
numeric values, use C<split> and C<map ord>.  In the future, this
warning will be replaced by an exception.

=end original

文字列ビット単位演算子はオペランドをバイトとして扱い、0xFF を超える値は
このコンテキストでは無意味です。
エンコードされたバイトに対して演算するには、まず文字列をデコードしてください。
符号位置の数値に対して演算するには、C<split> と C<map ord> を使ってください。
将来、この警告は例外に置き換えられます。

=head2 C<sysread()>, C<syswrite()>, C<recv()> and C<send()> are deprecated on
:utf8 handles

(:utf8 ハンドルに対する C<sysread()>, C<syswrite()>, C<recv()>, C<send()> は廃止予定になりました)

=begin original

The C<sysread()>, C<recv()>, C<syswrite()> and C<send()> operators
are deprecated on handles that have the C<:utf8> layer, either
explicitly, or implicitly, eg., with the C<:encoding(UTF-16LE)> layer.

=end original

C<sysread()>, C<recv()>, C<syswrite()>, C<send()> 演算子は、明示的あるいは
暗黙に C<:utf8> 層を持つ (例えば C<:encoding(UTF-16LE)> を持つ) ハンドルに
対しては廃止予定になりました。

=begin original

Both C<sysread()> and C<recv()> currently use only the C<:utf8> flag for the
stream, ignoring the actual layers.  Since C<sysread()> and C<recv()> do no
UTF-8 validation they can end up creating invalidly encoded scalars.

=end original

C<sysread()> と C<recv()> は現在のところストリームに対して
C<:utf8> フラグのみを使い、実際の層は無視しています。
C<sysread()> と C<recv()> は UTF-8 検証を行わないので、不正にエンコードされた
スカラを作る可能性があります。

=begin original

Similarly, C<syswrite()> and C<send()> use only the C<:utf8> flag, otherwise
ignoring any layers.  If the flag is set, both write the value UTF-8
encoded, even if the layer is some different encoding, such as the
example above.

=end original

同様に、C<syswrite()> と C<send()> は C<:utf8> フラグのみを使い、層を
無視します。
フラグが設定されていると、前述の例のように他のエンコーディングの層が
あっても、これらは UTF-8 エンコードされた値を書き込みます。

=begin original

Ideally, all of these operators would completely ignore the C<:utf8>
state, working only with bytes, but this would result in silently
breaking existing code.  To avoid this a future version of perl will
throw an exception when any of C<sysread()>, C<recv()>, C<syswrite()> or C<send()>
are called on handle with the C<:utf8> layer.

=end original

理想的には、これらの演算子は C<:utf8> 状態を完全に無視して、バイトに対してのみ
動作するべきですが、こうすると暗黙に既存のコードを壊すことになります。
これを避けるために、将来のバージョンの perl では
C<:utf8> 層を持つハンドルに対して C<sysread()>, C<recv()>, C<syswrite()>,
C<send()> を呼び出すときに例外が投げられます。

=head1 Performance Enhancements

(性能改善)

=over 4

=item *

=begin original

The overhead of scope entry and exit has been considerably reduced, so
for example subroutine calls, loops and basic blocks are all faster now.
This empty function call now takes about a third less time to execute:

=end original

スコープの出入りでのオーバーヘッドが大幅に減少したので、例えばサブルーチン
呼び出し、ループ、基本ブロックなどは全てより速くなりました。
この空関数呼び出しは実行時間が 3 分の 1 になりました:

    sub f{} f();

=item *

=begin original

Many languages, such as Chinese, are caseless.  Perl now knows about
most common ones, and skips much of the work when
a program tries to change case in them (like C<ucfirst()>) or match
caselessly (C<qr//i>).  This will speed up a program, such as a web
server, that can operate on multiple languages, while it is operating on a
caseless one.

=end original

中国語など、多くの言語には大文字小文字がありません。
Perl はこれについてもっとも一般的なものについて知るようになり、
プログラムが(C<ucfirst()> のように)これらの大文字小文字を変えようとしたり
(C<qr//i> のように)大文字小文字を無視してマッチングしようとしたときに
多くの処理を飛ばすようになりました。
これにより、多言語対応の web サーバで大文字小文字のない言語を
処理するようなときに高速化されました。

=item *

=begin original

C</fixed-substr/> has been made much faster.

=end original

C</固定部分文字列/> は非常に速くなりました。

=begin original

On platforms with a libc C<memchr()> implementation which makes good use of
underlying hardware support, patterns which include fixed substrings will now
often be much faster; for example with glibc on a recent x86_64 CPU, this:

=end original

libc C<memchr()> 実装が基礎となるハードウェア対応をうまく使う
プラットフォームでは、固定部分文字列を含むパターンはしばしばとても
高速になりました; 例えば最近の x86_64 CPU で glibc を使うと、以下のものは:

    $s = "a" x 1000 . "wxyz";
    $s =~ /wxyz/ for 1..30000

=begin original

is now about 7 times faster.  On systems with slow C<memchr()>, e.g. 32-bit ARM
Raspberry Pi, there will be a small or little speedup.  Conversely, some
pathological cases, such as C<"ab" x 1000 =~ /aa/> will be slower now; up to 3
times slower on the rPi, 1.5x slower on x86_64.

=end original

約 7 倍速くなりました。
(32 ビット ARM Raspberry Pi のような) C<memchr()> が遅いシステムでは、
少しだけ高速化します。
逆に、C<"ab" x 1000 =~ /aa/> のような極端な場合ではより遅くなりました;
rPi では 3 倍、x86_64 では 1.5 倍遅くなりました。

=item *

=begin original

Faster addition, subtraction and multiplication.

=end original

加算、減算、乗算は速くなりました。

=begin original

Since 5.8.0, arithmetic became slower due to the need to support
64-bit integers. To deal with 64-bit integers, a lot more corner
cases need to be checked, which adds time. We now detect common
cases where there is no need to check for those corner cases,
and special-case them.

=end original

5.8.0 から、算術演算は 64 ビット整数に対応するために遅くなっていました。
64 ビット整数を扱うためには、とても多くの境界条件を調べる必要があり、
時間が掛かっていました。
今回、これらの境界条件を調べる必要のない一般的な場合を検出して、それを
特別扱いするようになりました。

=item *

=begin original

Preincrement, predecrement, postincrement, and postdecrement have been
made faster by internally splitting the functions which handled multiple
cases into different functions.

=end original

プレインクリメント、プレデクリメント、ポストインクリメント、
ポストデクリメントは、内部で様々な場合を別の関数に分割することで、
高速化しました。

=item *

=begin original

Creating Perl debugger data structures (see L<perldebguts/"Debugger Internals">)
for XSUBs and const subs has been removed.  This removed one glob/scalar combo
for each unique C<.c> file that XSUBs and const subs came from.  On startup
(C<perl -e"0">) about half a dozen glob/scalar debugger combos were created.
Loading XS modules created more glob/scalar combos.  These things were
being created regardless of whether the perl debugger was being used,
and despite the fact that it can't debug C code anyway

=end original

XSUBs と定数サブルーチンのための Perl デバッガデータ構造体
(L<perldebguts/"Debugger Internals"> 参照) の作成は取り除かれました。
これは、XSUBs と定数サブルーチンがあるユニークな C<.c> ファイル毎に一つの
glob/scalar 組を取り除きます。
起動時に、(C<perl -e"0">) およそ半ダースの glob/scalar デバッガ組が
作られていました。
XS モジュールの読み込み時にはより多くの glob/scalar 組が作られていました。
これらは perl デバッガが使われるかどうかに関わらず、どちらにしろ C コードは
デバッグできないにも関わらず、作られていました。

=item *

=begin original

On Win32, C<stat>ing or C<-X>ing a path, if the file or directory does not
exist, is now 3.5x faster than before.

=end original

Win32 で、パスに対して C<stat> や C<-X> を使うとき、そのファイルや
ディレクトリが存在しなければ、以前より 3.5 倍速くなりました。

=item *

=begin original

Single arguments in list assign are now slightly faster:

=end original

リスト代入での単一の引数は少し速くなりました:

  ($x) = (...);
  (...) = ($x);

=item *

=begin original

Less peak memory is now used when compiling regular expression patterns.

=end original

正規表現パターンをコンパイルするときに使用するピーク時メモリ消費が
減少しました。

=back

=head1 Modules and Pragmata

(モジュールとプラグマ)

=head2 Updated Modules and Pragmata

(更新されたモジュールとプラグマ)

=over

=item *

=begin original

L<arybase> has been upgraded from version 0.10 to 0.11.

=end original

L<arybase> はバージョン 0.10 から 0.11 に更新されました。

=item *

=begin original

L<Attribute::Handlers> has been upgraded from version 0.97 to 0.99.

=end original

L<Attribute::Handlers> はバージョン 0.97 から 0.99 に更新されました。

=item *

=begin original

L<autodie> has been upgraded from version 2.26 to 2.29.

=end original

L<autodie> はバージョン 2.26 から 2.29 に更新されました。

=item *

=begin original

L<autouse> has been upgraded from version 1.08 to 1.11.

=end original

L<autouse> はバージョン 1.08 から 1.11 に更新されました。

=item *

=begin original

L<B> has been upgraded from version 1.58 to 1.62.

=end original

L<B> はバージョン 1.58 から 1.62 に更新されました。

=item *

=begin original

L<B::Deparse> has been upgraded from version 1.35 to 1.37.

=end original

L<B::Deparse> はバージョン 1.35 から 1.37 に更新されました。

=item *

=begin original

L<base> has been upgraded from version 2.22 to 2.23.

=end original

L<base> はバージョン 2.22 から 2.23 に更新されました。

=item *

=begin original

L<Benchmark> has been upgraded from version 1.2 to 1.22.

=end original

L<Benchmark> はバージョン 1.2 から 1.22 に更新されました。

=item *

=begin original

L<bignum> has been upgraded from version 0.39 to 0.42.

=end original

L<bignum> はバージョン 0.39 から 0.42 に更新されました。

=item *

=begin original

L<bytes> has been upgraded from version 1.04 to 1.05.

=end original

L<bytes> はバージョン 1.04 から 1.05 に更新されました。

=item *

=begin original

L<Carp> has been upgraded from version 1.36 to 1.40.

=end original

L<Carp> はバージョン 1.36 から 1.40 に更新されました。

=item *

=begin original

L<Compress::Raw::Bzip2> has been upgraded from version 2.068 to 2.069.

=end original

L<Compress::Raw::Bzip2> はバージョン 2.068 から 2.069 に更新されました。

=item *

=begin original

L<Compress::Raw::Zlib> has been upgraded from version 2.068 to 2.069.

=end original

L<Compress::Raw::Zlib> はバージョン 2.068 から 2.069 に更新されました。

=item *

=begin original

L<Config::Perl::V> has been upgraded from version 0.24 to 0.25.

=end original

L<Config::Perl::V> はバージョン 0.24 から 0.25 に更新されました。

=item *

=begin original

L<CPAN::Meta> has been upgraded from version 2.150001 to 2.150005.

=end original

L<CPAN::Meta> はバージョン 2.150001 から 2.150005 に更新されました。

=item *

=begin original

L<CPAN::Meta::Requirements> has been upgraded from version 2.132 to 2.140.

=end original

L<CPAN::Meta::Requirements> はバージョン 2.132 から 2.140 に更新されました。

=item *

=begin original

L<CPAN::Meta::YAML> has been upgraded from version 0.012 to 0.018.

=end original

L<CPAN::Meta::YAML> はバージョン 0.012 から 0.018 に更新されました。

=item *

=begin original

L<Data::Dumper> has been upgraded from version 2.158 to 2.160.

=end original

L<Data::Dumper> はバージョン 2.158 から 2.160 に更新されました。

=item *

=begin original

L<Devel::Peek> has been upgraded from version 1.22 to 1.23.

=end original

L<Devel::Peek> はバージョン 1.22 から 1.23 に更新されました。

=item *

=begin original

L<Devel::PPPort> has been upgraded from version 3.31 to 3.32.

=end original

L<Devel::PPPort> はバージョン 3.31 から 3.32 に更新されました。

=item *

=begin original

L<Dumpvalue> has been upgraded from version 1.17 to 1.18.

=end original

L<Dumpvalue> はバージョン 1.17 から 1.18 に更新されました。

=item *

=begin original

L<DynaLoader> has been upgraded from version 1.32 to 1.38.

=end original

L<DynaLoader> はバージョン 1.32 から 1.38 に更新されました。

=item *

=begin original

L<Encode> has been upgraded from version 2.72 to 2.80.

=end original

L<Encode> はバージョン 2.72 から 2.80 に更新されました。

=item *

=begin original

L<encoding> has been upgraded from version 2.14 to 2.17.

=end original

L<encoding> はバージョン 2.14 から 2.17 に更新されました。

=item *

=begin original

L<encoding::warnings> has been upgraded from version 0.11 to 0.12.

=end original

L<encoding::warnings> はバージョン 0.11 から 0.12 に更新されました。

=item *

=begin original

L<English> has been upgraded from version 1.09 to 1.10.

=end original

L<English> はバージョン 1.09 から 1.10 に更新されました。

=item *

=begin original

L<Errno> has been upgraded from version 1.23 to 1.25.

=end original

L<Errno> はバージョン 1.23 から 1.25 に更新されました。

=item *

=begin original

L<experimental> has been upgraded from version 0.013 to 0.016.

=end original

L<experimental> はバージョン 0.013 から 0.016 に更新されました。

=item *

=begin original

L<ExtUtils::CBuilder> has been upgraded from version 0.280221 to 0.280225.

=end original

L<ExtUtils::CBuilder> はバージョン 0.280221 から 0.280225 に更新されました。

=item *

=begin original

L<ExtUtils::Embed> has been upgraded from version 1.32 to 1.33.

=end original

L<ExtUtils::Embed> はバージョン 1.32 から 1.33 に更新されました。

=item *

=begin original

L<ExtUtils::MakeMaker> has been upgraded from version 7.04_01 to 7.10_01.

=end original

L<ExtUtils::MakeMaker> はバージョン 7.04_01 から 7.10_01 に更新されました。

=item *

=begin original

L<ExtUtils::ParseXS> has been upgraded from version 3.28 to 3.31.

=end original

L<ExtUtils::ParseXS> はバージョン 3.28 から 3.31 に更新されました。

=item *

=begin original

L<ExtUtils::Typemaps> has been upgraded from version 3.28 to 3.31.

=end original

L<ExtUtils::Typemaps> はバージョン 3.28 から 3.31 に更新されました。

=item *

=begin original

L<feature> has been upgraded from version 1.40 to 1.42.

=end original

L<feature> はバージョン 1.40 から 1.42 に更新されました。

=item *

=begin original

L<fields> has been upgraded from version 2.17 to 2.23.

=end original

L<fields> はバージョン 2.17 から 2.23 に更新されました。

=item *

=begin original

L<File::Copy> has been upgraded from version 2.30 to 2.31.

=end original

L<File::Copy> はバージョン 2.30 から 2.31 に更新されました。

=item *

=begin original

L<File::Find> has been upgraded from version 1.29 to 1.34.

=end original

L<File::Find> はバージョン 1.29 から 1.34 に更新されました。

=item *

=begin original

L<File::Glob> has been upgraded from version 1.24 to 1.26.

=end original

L<File::Glob> はバージョン 1.24 から 1.26 に更新されました。

=item *

=begin original

L<File::Path> has been upgraded from version 2.09 to 2.12_01.

=end original

L<File::Path> はバージョン 2.09 から 2.12_01 に更新されました。

=item *

=begin original

L<File::Spec> has been upgraded from version 3.56 to 3.63.

=end original

L<File::Spec> はバージョン 3.56 から 3.63 に更新されました。

=item *

=begin original

L<Filter::Util::Call> has been upgraded from version 1.54 to 1.55.

=end original

L<Filter::Util::Call> はバージョン 1.54 から 1.55 に更新されました。

=item *

=begin original

L<Getopt::Long> has been upgraded from version 2.45 to 2.48.

=end original

L<Getopt::Long> はバージョン 2.45 から 2.48 に更新されました。

=item *

=begin original

L<Hash::Util> has been upgraded from version 0.18 to 0.19.

=end original

L<Hash::Util> はバージョン 0.18 から 0.19 に更新されました。

=item *

=begin original

L<Hash::Util::FieldHash> has been upgraded from version 1.15 to 1.19.

=end original

L<Hash::Util::FieldHash> はバージョン 1.15 から 1.19 に更新されました。

=item *

=begin original

L<HTTP::Tiny> has been upgraded from version 0.054 to 0.056.

=end original

L<HTTP::Tiny> はバージョン 0.054 から 0.056 に更新されました。

=item *

=begin original

L<I18N::Langinfo> has been upgraded from version 0.12 to 0.13.

=end original

L<I18N::Langinfo> はバージョン 0.12 から 0.13 に更新されました。

=item *

=begin original

L<if> has been upgraded from version 0.0604 to 0.0606.

=end original

L<if> はバージョン 0.0604 から 0.0606 に更新されました。

=item *

=begin original

L<IO> has been upgraded from version 1.35 to 1.36.

=end original

L<IO> はバージョン 1.35 から 1.36 に更新されました。

=item *

=begin original

IO-Compress has been upgraded from version 2.068 to 2.069.

=end original

IO-Compress はバージョン 2.068 から 2.069 に更新されました。

=item *

=begin original

L<IPC::Open3> has been upgraded from version 1.18 to 1.20.

=end original

L<IPC::Open3> はバージョン 1.18 から 1.20 に更新されました。

=item *

=begin original

L<IPC::SysV> has been upgraded from version 2.04 to 2.06_01.

=end original

L<IPC::SysV> はバージョン 2.04 から 2.06_01 に更新されました。

=item *

=begin original

L<List::Util> has been upgraded from version 1.41 to 1.42_02.

=end original

L<List::Util> はバージョン 1.41 から 1.42_02 に更新されました。

=item *

=begin original

L<locale> has been upgraded from version 1.06 to 1.08.

=end original

L<locale> はバージョン 1.06 から 1.08 に更新されました。

=item *

=begin original

L<Locale::Codes> has been upgraded from version 3.34 to 3.37.

=end original

L<Locale::Codes> はバージョン 3.34 から 3.37 に更新されました。

=item *

=begin original

L<Math::BigInt> has been upgraded from version 1.9997 to 1.999715.

=end original

L<Math::BigInt> はバージョン 1.9997 から 1.999715 に更新されました。

=item *

=begin original

L<Math::BigInt::FastCalc> has been upgraded from version 0.31 to 0.40.

=end original

L<Math::BigInt::FastCalc> はバージョン 0.31 から 0.40 に更新されました。

=item *

=begin original

L<Math::BigRat> has been upgraded from version 0.2608 to 0.260802.

=end original

L<Math::BigRat> はバージョン 0.2608 から 0.260802 に更新されました。

=item *

=begin original

L<Module::CoreList> has been upgraded from version 5.20150520 to 5.20160506.

=end original

L<Module::CoreList> はバージョン 5.20150520 から 5.20160506 に更新されました。

=item *

=begin original

L<Module::Metadata> has been upgraded from version 1.000026 to 1.000031.

=end original

L<Module::Metadata> はバージョン 1.000026 から 1.000031 に更新されました。

=item *

=begin original

L<mro> has been upgraded from version 1.17 to 1.18.

=end original

L<mro> はバージョン 1.17 から 1.18 に更新されました。

=item *

=begin original

L<ODBM_File> has been upgraded from version 1.12 to 1.14.

=end original

L<ODBM_File> はバージョン 1.12 から 1.14 に更新されました。

=item *

=begin original

L<Opcode> has been upgraded from version 1.32 to 1.34.

=end original

L<Opcode> はバージョン 1.32 から 1.34 に更新されました。

=item *

=begin original

L<parent> has been upgraded from version 0.232 to 0.234.

=end original

L<parent> はバージョン 0.232 から 0.234 に更新されました。

=item *

=begin original

L<Parse::CPAN::Meta> has been upgraded from version 1.4414 to 1.4417.

=end original

L<Parse::CPAN::Meta> はバージョン 1.4414 から 1.4417 に更新されました。

=item *

=begin original

L<Perl::OSType> has been upgraded from version 1.008 to 1.009.

=end original

L<Perl::OSType> はバージョン 1.008 から 1.009 に更新されました。

=item *

=begin original

L<perlfaq> has been upgraded from version 5.021009 to 5.021010.

=end original

L<perlfaq> はバージョン 5.021009 から 5.021010 に更新されました。

=item *

=begin original

L<PerlIO::encoding> has been upgraded from version 0.21 to 0.24.

=end original

L<PerlIO::encoding> はバージョン 0.21 から 0.24 に更新されました。

=item *

=begin original

L<PerlIO::mmap> has been upgraded from version 0.014 to 0.016.

=end original

L<PerlIO::mmap> はバージョン 0.014 から 0.016 に更新されました。

=item *

=begin original

L<PerlIO::scalar> has been upgraded from version 0.22 to 0.24.

=end original

L<PerlIO::scalar> はバージョン 0.22 から 0.24 に更新されました。

=item *

=begin original

L<PerlIO::via> has been upgraded from version 0.15 to 0.16.

=end original

L<PerlIO::via> はバージョン 0.15 から 0.16 に更新されました。

=item *

=begin original

podlators has been upgraded from version 2.28 to 4.07.

=end original

podlators はバージョン 2.28 から 4.07 に更新されました。

=item *

=begin original

L<Pod::Functions> has been upgraded from version 1.09 to 1.10.

=end original

L<Pod::Functions> はバージョン 1.09 から 1.10 に更新されました。

=item *

=begin original

L<Pod::Perldoc> has been upgraded from version 3.25 to 3.25_02.

=end original

L<Pod::Perldoc> はバージョン 3.25 から 3.25_02 に更新されました。

=item *

=begin original

L<Pod::Simple> has been upgraded from version 3.29 to 3.32.

=end original

L<Pod::Simple> はバージョン 3.29 から 3.32 に更新されました。

=item *

=begin original

L<Pod::Usage> has been upgraded from version 1.64 to 1.68.

=end original

L<Pod::Usage> はバージョン 1.64 から 1.68 に更新されました。

=item *

=begin original

L<POSIX> has been upgraded from version 1.53 to 1.65.

=end original

L<POSIX> はバージョン 1.53 から 1.65 に更新されました。

=item *

=begin original

L<Scalar::Util> has been upgraded from version 1.41 to 1.42_02.

=end original

L<Scalar::Util> はバージョン 1.41 から 1.42_02 に更新されました。

=item *

=begin original

L<SDBM_File> has been upgraded from version 1.13 to 1.14.

=end original

L<SDBM_File> はバージョン 1.13 から 1.14 に更新されました。

=item *

=begin original

L<SelfLoader> has been upgraded from version 1.22 to 1.23.

=end original

L<SelfLoader> はバージョン 1.22 から 1.23 に更新されました。

=item *

=begin original

L<Socket> has been upgraded from version 2.018 to 2.020_03.

=end original

L<Socket> はバージョン 2.018 から 2.020_03 に更新されました。

=item *

=begin original

L<Storable> has been upgraded from version 2.53 to 2.56.

=end original

L<Storable> はバージョン 2.53 から 2.56 に更新されました。

=item *

=begin original

L<strict> has been upgraded from version 1.09 to 1.11.

=end original

L<strict> はバージョン 1.09 から 1.11 に更新されました。

=item *

=begin original

L<Term::ANSIColor> has been upgraded from version 4.03 to 4.04.

=end original

L<Term::ANSIColor> はバージョン 4.03 から 4.04 に更新されました。

=item *

=begin original

L<Term::Cap> has been upgraded from version 1.15 to 1.17.

=end original

L<Term::Cap> はバージョン 1.15 から 1.17 に更新されました。

=item *

=begin original

L<Test> has been upgraded from version 1.26 to 1.28.

=end original

L<Test> はバージョン 1.26 から 1.28 に更新されました。

=item *

=begin original

L<Test::Harness> has been upgraded from version 3.35 to 3.36.

=end original

L<Test::Harness> はバージョン 3.35 から 3.36 に更新されました。

=item *

=begin original

L<Thread::Queue> has been upgraded from version 3.05 to 3.09.

=end original

L<Thread::Queue> はバージョン 3.05 から 3.09 に更新されました。

=item *

=begin original

L<threads> has been upgraded from version 2.01 to 2.07.

=end original

L<threads> はバージョン 2.01 から 2.07 に更新されました。

=item *

=begin original

L<threads::shared> has been upgraded from version 1.48 to 1.51.

=end original

L<threads::shared> はバージョン 1.48 から 1.51 に更新されました。

=item *

=begin original

L<Tie::File> has been upgraded from version 1.01 to 1.02.

=end original

L<Tie::File> はバージョン 1.01 から 1.02 に更新されました。

=item *

=begin original

L<Tie::Scalar> has been upgraded from version 1.03 to 1.04.

=end original

L<Tie::Scalar> はバージョン 1.03 から 1.04 に更新されました。

=item *

=begin original

L<Time::HiRes> has been upgraded from version 1.9726 to 1.9733.

=end original

L<Time::HiRes> はバージョン 1.9726 から 1.9733 に更新されました。

=item *

=begin original

L<Time::Piece> has been upgraded from version 1.29 to 1.31.

=end original

L<Time::Piece> はバージョン 1.29 から 1.31 に更新されました。

=item *

=begin original

L<Unicode::Collate> has been upgraded from version 1.12 to 1.14.

=end original

L<Unicode::Collate> はバージョン 1.12 から 1.14 に更新されました。

=item *

=begin original

L<Unicode::Normalize> has been upgraded from version 1.18 to 1.25.

=end original

L<Unicode::Normalize> はバージョン 1.18 から 1.25 に更新されました。

=item *

=begin original

L<Unicode::UCD> has been upgraded from version 0.61 to 0.64.

=end original

L<Unicode::UCD> はバージョン 0.61 から 0.64 に更新されました。

=item *

=begin original

L<UNIVERSAL> has been upgraded from version 1.12 to 1.13.

=end original

L<UNIVERSAL> はバージョン 1.12 から 1.13 に更新されました。

=item *

=begin original

L<utf8> has been upgraded from version 1.17 to 1.19.

=end original

L<utf8> はバージョン 1.17 から 1.19 に更新されました。

=item *

=begin original

L<version> has been upgraded from version 0.9909 to 0.9916.

=end original

L<version> はバージョン 0.9909 から 0.9916 に更新されました。

=item *

=begin original

L<warnings> has been upgraded from version 1.32 to 1.36.

=end original

L<warnings> はバージョン 1.32 から 1.36 に更新されました。

=item *

=begin original

L<Win32> has been upgraded from version 0.51 to 0.52.

=end original

L<Win32> はバージョン 0.51 から 0.52 に更新されました。

=item *

=begin original

L<Win32API::File> has been upgraded from version 0.1202 to 0.1203.

=end original

L<Win32API::File> はバージョン 0.1202 から 0.1203 に更新されました。

=item *

=begin original

L<XS::Typemap> has been upgraded from version 0.13 to 0.14.

=end original

L<XS::Typemap> はバージョン 0.13 から 0.14 に更新されました。

=item *

=begin original

L<XSLoader> has been upgraded from version 0.20 to 0.21.

=end original

L<XSLoader> はバージョン 0.20 から 0.21 に更新されました。

=back

=head1 Documentation

(文書)

=head2 Changes to Existing Documentation

(既存の文書の変更)

=head3 L<perlapi>

=over 4

=item *

=begin original

The process of using undocumented globals has been documented, namely, that one
should send email to L<perl5-porters@perl.org|mailto:perl5-porters@perl.org>
first to get the go-ahead for documenting and using an undocumented function or
global variable.

=end original

文書化されていないグローバル変数を使うための手続きが文書化されました; つまり、
文書化されていない関数やグローバル変数を文書化して使うためのゴーサインを
もらうために、まず L<perl5-porters@perl.org|mailto:perl5-porters@perl.org> に
メールを送るべきです。

=back

=head3 L<perlcall>

=over 4

=item *

=begin original

A number of cleanups have been made to perlcall, including:

=end original

以下を含む多くの整理が perlcall に対して行われました:

=over 4

=item *

=begin original

use C<EXTEND(SP, n)> and C<PUSHs()> instead of C<XPUSHs()> where applicable
and update prose to match

=end original

利用可能でマッチングするときには C<XPUSHs()> ではなく C<EXTEND(SP, n)> と
C<PUSHs()> を使うように

=item *

=begin original

add POPu, POPul and POPpbytex to the "complete list of POP macros"
and clarify the documentation for some of the existing entries, and
a note about side-effects

=end original

POPu, POPul, POPpbytex が「POP マクロの完全なリスト」に追加され、
既存のエントリの文書と副作用に関する注意について明確化

=item *

=begin original

add API documentation for POPu and POPul

=end original

POPu と POPul の API 文書の追加

=item *

=begin original

use ERRSV more efficiently

=end original

ERRSV をより効果的に使う

=item *

=begin original

approaches to thread-safety storage of SVs.

=end original

スレッドセーフな SV の保管の手法。

=back

=back

=head3 L<perlfunc>

=over 4

=item *

=begin original

The documentation of C<hex> has been revised to clarify valid inputs.

=end original

C<hex> の文章は、有効な入力を明確化するために見直されました。

=item *

=begin original

Better explain meaning of negative PIDs in C<waitpid>.
L<[perl #127080]|https://rt.perl.org/Ticket/Display.html?id=127080>

=end original

C<waitpid> で負の PID の意味の説明が改善されました。
L<[perl #127080]|https://rt.perl.org/Ticket/Display.html?id=127080>

=item *

=begin original

General cleanup: there's more consistency now (in POD usage, grammar, code
examples), better practices in code examples (use of C<my>, removal of bareword
filehandles, dropped usage of C<&> when calling subroutines, ...), etc.

=end original

一般的な整理: (POD での使用法、文法、コード例で)一貫性の改善、
コード例でのよりよいプラクティス (C<my> の使用、裸の単語の
ファイルハンドルの除去、サブルーチン呼び出し時の C<&> の使用の除去)などが
行われました。

=back

=head3 L<perlguts>

=over 4

=item *

=begin original

A new section has been added, L<perlguts/"Dynamic Scope and the Context
Stack">, which explains how the perl context stack works.

=end original

perl のコンテキストスタックがどのように動作するかを説明する
L<perlguts/"Dynamic Scope and the Context Stack"> という章が追加されました。

=back

=head3 L<perllocale>

=over 4

=item *

=begin original

A stronger caution about using locales in threaded applications is
given.  Locales are not thread-safe, and you can get wrong results or
even segfaults if you use them there.

=end original

すれっどを使ったアプリケーションでのロケールの使用についてより強い注意が
与えられました。
ロケールはスレッドセーフではなく、そこでロケールを使うと間違った結果や、
セグメンテーションフォルトが起こることがあります。

=back

=head3 L<perlmodlib>

=over 4

=item *

=begin original

We now recommend contacting the module-authors list or PAUSE in seeking
guidance on the naming of modules.

=end original

モジュールの命名に関するガイドが必要な場合、モジュール作者一覧や
PAUSE に当たることを勧めるようになりました。

=back

=head3 L<perlop>

=over 4

=item *

=begin original

The documentation of C<qx//> now describes how C<$?> is affected.

=end original

C<qx//> の文書に、C<$?> がどのように影響するかが記述されました。

=back

=head3 L<perlpolicy>

=over 4

=item *

=begin original

This note has been added to perlpolicy:

=end original

次の注意が perlpolicy に追加されました:

 While civility is required, kindness is encouraged; if you have any
 doubt about whether you are being civil, simply ask yourself, "Am I
 being kind?" and aspire to that.

=back

=head3 L<perlreftut>

=over 4

=item *

=begin original

Fix some examples to be L<strict> clean.

=end original

L<strict> に対応するように例が修正されました。

=back

=head3 L<perlrebackslash>

=over 4

=item *

=begin original

Clarify that in languages like Japanese and Thai, dictionary lookup
is required to determine word boundaries.

=end original

日本語やタイ語のような言語では、単語境界を決定するためには辞書検索が
必要であることを明確化しました。

=back

=head3 L<perlsub>

=over 4

=item *

=begin original

Updated to note that anonymous subroutines can have signatures.

=end original

無名サブルーチンがシグネチャを持てることを示すために更新されました。

=back

=head3 L<perlsyn>

=over 4

=item *

=begin original

Fixed a broken example where C<=> was used instead of
C<==> in conditional in do/while example.

=end original

do/while の例で、C<==> ではなく C<=> が使われている壊れた例が修正されました。

=back

=head3 L<perltie>

=over 4

=item *

=begin original

The usage of C<FIRSTKEY> and C<NEXTKEY> has been clarified.

=end original

C<FIRSTKEY> と C<NEXTKEY> の使用法が明確化されました。

=back

=head3 L<perlunicode>

=over 4

=item *

=begin original

Discourage use of 'In' as a prefix signifying the Unicode Block property.

=end original

Unicode Block 特性を示すために接頭辞として 'In' を使うのは非推奨になりました。

=back

=head3 L<perlvar>

=over 4

=item *

=begin original

The documentation of C<$@> was reworded to clarify that it is not just for
syntax errors in C<eval>.
L<[perl #124034]|https://rt.perl.org/Ticket/Display.html?id=124034>

=end original

C<$@> の文書は、単に C<eval> の文法エラーのためだけのものではないことを
明確化するために修正されました。.
L<[perl #124034]|https://rt.perl.org/Ticket/Display.html?id=124034>

=item *

=begin original

The specific true value of C<$!{E...}> is now documented, noting that it is
subject to change and not guaranteed.

=end original

C<$!{E...}> の特定の真の値について、変更される可能性があり、保証されないことが
文書化されました。

=item *

=begin original

Use of C<$OLD_PERL_VERSION> is now discouraged.

=end original

C<$OLD_PERL_VERSION> の使用は非推奨になりました。
=back

=back

=head3 L<perlxs>

=over 4

=item *

=begin original

The documentation of C<PROTOTYPES> has been corrected; they are I<disabled>
by default, not I<enabled>.

=end original

C<PROTOTYPES> の文書が修正されました; これはデフォルトでは I<有効> ではなく
I<無効> です。

=back

=head1 Diagnostics

(診断メッセージ)

=begin original

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=end original

以下の追加や変更が、警告や致命的エラーメッセージ含む診断出力に行われました。
完全な診断メッセージの一覧については、L<perldiag> を参照してください。

=head2 New Diagnostics

(新しい診断メッセージ)

=head3 New Errors

(新しいエラー)

=over 4

=item *

L<%s must not be a named sequence in transliteration operator|perldiag/"%s must not be a named sequence in transliteration operator">

=item *

L<Can't find Unicode property definition "%s" in regex;|perldiag/"Can't find Unicode property definition "%s" in regex; marked by <-- HERE in m/%s/">

=item *

L<Can't redeclare "%s" in "%s"|perldiag/"Can't redeclare "%s" in "%s"">

=item *

L<Character following \p must be '{' or a single-character Unicode property name in regex;|perldiag/"Character following \%c must be '{' or a single-character Unicode property name in regex; marked by <-- HERE in m/%s/">

=item *

L<Empty \%c in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/"Empty \%c in regex; marked by <-- HERE in mE<sol>%sE<sol>">

=item *

L<Illegal user-defined property name|perldiag/"Illegal user-defined property name">

=item *

L<Invalid number '%s' for -C option.|perldiag/"Invalid number '%s' for -C option.">

=item *

L<<< Sequence (?... not terminated in regex; marked by S<<-- HERE> in mE<sol>%sE<sol>|perldiag/"Sequence (?... not terminated in regex; marked by <-- HERE in mE<sol>%sE<sol>" >>>

=item *

L<<< Sequence (?PE<lt>... not terminated in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/"Sequence (?PE<lt>... not terminated in regex; marked by <-- HERE in mE<sol>%sE<sol>" >>>

=item *

L<Sequence (?PE<gt>... not terminated in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/"Sequence (?PE<gt>... not terminated in regex; marked by <-- HERE in mE<sol>%sE<sol>">

=back

=head3 New Warnings

(新しい警告)

=over 4

=item *

L<Assuming NOT a POSIX class since %s in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>|
perldiag/Assuming NOT a POSIX class since %s in regex; marked by <-- HERE in mE<sol>%sE<sol>>

=item *

L<%s() is deprecated on :utf8 handles|perldiag/"%s() is deprecated on :utf8 handles">

=back

=head2 Changes to Existing Diagnostics

(既存の診断メッセージの変更)

=over 4

=item *

=begin original

Accessing the C<IO> part of a glob as C<FILEHANDLE> instead of C<IO> is no
longer deprecated.  It is discouraged to encourage uniformity (so that, for
example, one can grep more easily) but it will not be removed.
L<[perl #127060]|https://rt.perl.org/Ticket/Display.html?id=127060>

=end original

グロブの C<IO> 部を C<IO> ではなく C<FILEHANDLE> としてアクセスするのは
廃止予定ではなくなりました。
統一性を進めるためには非推奨です(例えば、より簡単に grep できます)が、
取り除かれはしません。
L<[perl #127060]|https://rt.perl.org/Ticket/Display.html?id=127060>

=item *

=begin original

The diagnostic C<< Hexadecimal float: internal error >> has been changed to
C<< Hexadecimal float: internal error (%s) >> to include more information.

=end original

C<< Hexadecimal float: internal error >> というメッセージは、より多くの情報を
含むように C<< Hexadecimal float: internal error (%s) >> に変更されました。

=item *

L<Can't modify non-lvalue subroutine call of &%s|perldiag/"Can't modify non-lvalue subroutine call of &%s">

=begin original

This error now reports the name of the non-lvalue subroutine you attempted to
use as an lvalue.

=end original

このエラーは、左辺値として使おうとした非左辺値サブルーチンの名前を
報告するようになりました。

=item *

=begin original

When running out of memory during an attempt the increase the stack
size, previously, perl would die using the cryptic message
C<< panic: av_extend_guts() negative count (-9223372036854775681) >>.
This has been fixed to show the prettier message:
L<< Out of memory during stack extend|perldiag/"Out of memory during %s extend" >>

=end original

スタックサイズを増やそうとしているときにメモリがなくなると、以前は、perl は
C<< panic: av_extend_guts() negative count (-9223372036854775681) >> という
わかりにくいメッセージで die していました。
これは、より分かりやすいメッセージが出るように修正されました:
L<< Out of memory during stack extend|perldiag/"Out of memory during %s extend" >>

=back

=head1 Configuration and Compilation

(設定とコンパイル)

=over 4

=item *

=begin original

C<Configure> now acts as if the C<-O> option is always passed, allowing command
line options to override saved configuration.  This should eliminate confusion
when command line options are ignored for no obvious reason.  C<-O> is now
permitted, but ignored.

=end original

C<Configure> は、常に C<-O> オプションが渡されるかのように振る舞い、
コマンドラインオプションで保存された設定を上書きできるようになりました。
これにより、コマンドラインオプションがわかりにくい理由で無視されるという
混乱を取り除けるはずです。
C<-O> は指定できますが、無視されます。

=item *

=begin original

Bison 3.0 is now supported.

=end original

Bison 3.0 に対応しました。

=item *

=begin original

F<Configure> no longer probes for F<libnm> by default.  Originally
this was the "New Math" library, but the name has been re-used by the
GNOME NetworkManager.
L<[perl #127131]|https://rt.perl.org/Ticket/Display.html?id=127131>

=end original

F<Configure> はもはやデフォルトでは F<libnm> をプローブしなくなりました。
元々はこれは "New Math" ライブラリでしたが、この名前は
GNOME NetworkManager によって再利用されました。
L<[perl #127131]|https://rt.perl.org/Ticket/Display.html?id=127131>

=item *

=begin original

Added F<Configure> probes for C<newlocale>, C<freelocale>, and C<uselocale>.

=end original

C<newlocale>, C<freelocale>, C<uselocale> のための F<Configure> プローブが
追加されました。

=item *

=begin original

C<< PPPort.so/PPPort.dll >> no longer get installed, as they are
not used by C<< PPPort.pm >>, only by its test files.

=end original

C<< PPPort.so/PPPort.dll >> はインストールされなくなりました; これは
C<< PPPort.pm >> によって使われておらず、そのテストでだけ使っているからです。

=item *

=begin original

It is now possible to specify which compilation date to show on
C<< perl -V >> output, by setting the macro C<< PERL_BUILD_DATE >>.

=end original

C<< PERL_BUILD_DATE >> マクロを設定することで、C<< perl -V >> 出力で
表示されるコンパイル日を指定できるようになりました。

=item *

=begin original

Using the C<NO_HASH_SEED> define in combination with the default hash algorithm
C<PERL_HASH_FUNC_ONE_AT_A_TIME_HARD> resulted in a fatal error while compiling
the interpreter, since Perl 5.17.10.  This has been fixed.

=end original

Perl 5.17.10 から、C<NO_HASH_SEED> 定義をデフォルトのハッシュアルゴリズム
C<PERL_HASH_FUNC_ONE_AT_A_TIME_HARD> と共に使うと、インタプリタの
コンパイル時に致命的エラーになっていました。
これは修正されました。

=item *

=begin original

F<Configure> should handle spaces in paths a little better.

=end original

F<Configure> はパスの中のスペースを少しうまく扱えるようになったはずです。

=item *

=begin original

No longer generate EBCDIC POSIX-BC tables.  We don't believe anyone is
using Perl and POSIX-BC at this time, and by not generating these tables
it saves time during development, and makes the resulting tar ball smaller.

=end original

もはや EBCDIC POSIX-BC テーブルは生成されなくなりました。
現在 Perl と POSIX-BC を使っている人はいないはずで、これらのテーブルを
生成しないことで開発中の時間を節約し、結果の tar ball が小さくなります。

=item *

=begin original

The GNU Make makefile for Win32 now supports parallel builds.  [perl #126632]

=end original

Win32 での GNU Make の makefile は並列ビルドに対応しました。
[perl #126632]

=item *

=begin original

You can now build perl with MSVC++ on Win32 using GNU Make.  [perl #126632]

=end original

Win32 の MSVC++ で GNU Make を使って perl をビルド出来るようになりました。
[perl #126632]

=item *

=begin original

The Win32 miniperl now has a real C<getcwd> which increases build performance
resulting in C<getcwd()> being 605x faster in Win32 miniperl.

=end original

Win32 miniperl はビルド性能を向上させる実際の C<getcwd> を使うようになり、
C<getcwd()> は Win32 miniperl では 605 倍高速になりました。

=item *

=begin original

Configure now takes C<-Dusequadmath> into account when calculating the
C<alignbytes> configuration variable.  Previously the mis-calculated
C<alignbytes> could cause alignment errors on debugging builds. [perl
#127894]

=end original

Configure は C<alignbytes> 設定変数を計算するときに C<-Dusequadmath> を
考慮するようになりました。
以前は C<alignbytes> の計算を間違えていたので、デバッグビルドで境界
エラーが起こることがありました。
[perl #127894]

=back

=head1 Testing

(テスト)

=over 4

=item *

=begin original

A new test (F<t/op/aassign.t>) has been added to test the list assignment operator
C<OP_AASSIGN>.

=end original

リスト代入演算子 C<OP_AASSIGN> をテストするための新しいテスト
(F<t/op/aassign.t>) が追加されました。

=item *

=begin original

Parallel building has been added to the dmake C<makefile.mk> makefile. All
Win32 compilers are supported.

=end original

dmake の C<makefile.mk> makefile に、並列ビルドが追加されました。
全ての Win32 コンパイラに対応しています。

=back

=head1 Platform Support

(プラットフォーム対応)

=head2 Platform-Specific Notes

(プラットフォーム固有の注意)

=over 4

=item AmigaOS

=over 4

=item *

=begin original

The AmigaOS port has been reintegrated into the main tree, based off of
Perl 5.22.1.

=end original

Perl 5.22.1 から離れていた AmigaOS 版がメインツリーに再統合されました。

=back

=item Cygwin

=over 4

=item *

=begin original

Tests are more robust against unusual cygdrive prefixes.
L<[perl #126834]|https://rt.perl.org/Ticket/Display.html?id=126834>

=end original

テストは普通でない cygdrive 接頭辞に対してより頑強になりました。
L<[perl #126834]|https://rt.perl.org/Ticket/Display.html?id=126834>

=back

=item EBCDIC

=over 4

=item UTF-EBCDIC extended

=begin original

UTF-EBCDIC is like UTF-8, but for EBCDIC platforms.  It now has been
extended so that it can represent code points up to 2 ** 64 - 1 on
platforms with 64-bit words.  This brings it into parity with UTF-8.
This enhancement requires an incompatible change to the representation
of code points in the range 2 ** 30 to 2 ** 31 -1 (the latter was the
previous maximum representable code point).  This means that a file that
contains one of these code points, written out with previous versions of
perl cannot be read in, without conversion, by a perl containing this
change.  We do not believe any such files are in existence, but if you
do have one, submit a ticket at L<perlbug@perl.org|mailto:perlbug@perl.org>,
and we will write a conversion script for you.

=end original

UTF-EBCDIC は UTF-8 のようなものですが、EBCDIC プラットフォームのための
ものです。
64 ビットワードのプラットフォームでは符号位置を 2 ** 64 - 1 まで
表現できるように拡張されました。
これにより UTF-8 と同等になります。
この拡張は、2 ** 30 から 2 ** 31 -1 の範囲(後者は以前の表現可能な
符号位置の最大値)の符号位置の表現に対して互換性のない変更が必要です。
つまり、以前のバージョンの perl 出力された、これらの符号位置を含むファイルは、
今回の変更を含む perl では、変換なしでは読み込めないということです。
私たちはこのようなファイルが存在するとは思っていませんが、もしそのような
ファイルを持っているなら、L<perlbug@perl.org|mailto:perlbug@perl.org> に
チケットを登録してください; 私たちはあなたのために変換スクリプトを書きます。

=item EBCDIC C<cmp()> and C<sort()> fixed for UTF-EBCDIC strings

=begin original

Comparing two strings that were both encoded in UTF-8 (or more
precisely, UTF-EBCDIC) did not work properly until now.  Since C<sort()>
uses C<cmp()>, this fixes that as well.

=end original

今まで、両方とも UTF-8 (より正確には UTF-EBCDIC) でエンコードされた文字列の
比較は正しく動作していませんでした。
C<sort()> は C<cmp()> を使うので、これも修正されました。

=item EBCDIC C<tr///> and C<y///> fixed for C<\N{}>, and C<S<use utf8>> ranges

=begin original

Perl v5.22 introduced the concept of portable ranges to regular
expression patterns.  A portable range matches the same set of
characters no matter what platform is being run on.  This concept is now
extended to C<tr///>.  See
C<L<trE<sol>E<sol>E<sol>|perlop/trE<sol>SEARCHLISTE<sol>REPLACEMENTLISTE<sol>cdsr>>.

=end original

Perl v5.22 では移植性のある正規表現パターンの範囲という概念が導入されました。
移植性のある範囲は、どのプラットフォームで実行されるかに関わらず同じ文字の
集合にマッチングします。
この考え方は C<tr///> に拡張されました。
C<L<trE<sol>E<sol>E<sol>|perlop/trE<sol>SEARCHLISTE<sol>REPLACEMENTLISTE<sol>cdsr>> を
参照してください。

=begin original

There were also some problems with these operations under S<C<use
utf8>>, which are now fixed

=end original

これらの操作は S<C<use utf8>> の基で問題がありましたが、修正されました。

=back

=item FreeBSD

=over 4

=item *

=begin original

Use the C<fdclose()> function from FreeBSD if it is available.
L<[perl #126847]|https://rt.perl.org/Ticket/Display.html?id=126847>

=end original

利用可能なら、FreeBSD の C<fdclose()> を使うようになりました。
L<[perl #126847]|https://rt.perl.org/Ticket/Display.html?id=126847>

=back

=item IRIX

=over 4

=item *

=begin original

Under some circumstances IRIX stdio C<fgetc()> and C<fread()> set the errno to
C<ENOENT>, which made no sense according to either IRIX or POSIX docs.  Errno
is now cleared in such cases.
L<[perl #123977]|https://rt.perl.org/Ticket/Display.html?id=123977>

=end original

IRIX の stdio の fgetc() と fread() は、ある種の状況で errno に C<ENOENT> を
設定しますが、IRIX や POSIX の文書によればこれは無意味なものです。
errno はこのような場合ではクリアされるようになりました。
L<[perl #123977]|https://rt.perl.org/Ticket/Display.html?id=123977>

=item *

=begin original

Problems when multiplying long doubles by infinity have been fixed.
L<[perl #126396]|https://rt.perl.org/Ticket/Display.html?id=126396>

=end original

long double に無限を掛けたときの問題が修正されました。
L<[perl #126396]|https://rt.perl.org/Ticket/Display.html?id=126396>

=back

=item MacOS X

=over 4

=item *

=begin original

Until now OS X builds of perl have specified a link target of 10.3 (Panther,
2003) but have not specified a compiler target.  From now on, builds of perl on
OS X 10.6 or later (Snow Leopard, 2008) by default capture the current OS X
version and specify that as the explicit build target in both compiler and
linker flags, thus preserving binary compatibility for extensions built later
regardless of changes in OS X, SDK, or compiler and linker versions.  To
override the default value used in the build and preserved in the flags,
specify C<export MACOSX_DEPLOYMENT_TARGET=10.N> before configuring and building
perl, where 10.N is the version of OS X you wish to target.  In OS X 10.5 or
earlier there is no change to the behavior present when those systems were
current; the link target is still OS X 10.3 and there is no explicit compiler
target.

=end original

今まで、perl の OS X ビルドはリンクターゲットとして 10.3 (2003 年の Panther)を
指定していましたが、コンパイラターゲットは指定していませんでした。
今回から、OS X 10.6 (Snow Leopard, 2008 年) 以降でビルドする場合は、
デフォルトでは現在の OS X バージョンを捕捉して、これをコンパイラとリンカの
フラグで明示的なビルドターゲットとして指定します。 
従って、OS X, SDK, コンパイラやリンカのバージョンに関わらず、後にビルドする
エクステンションのバイナリ互換性は維持されます。
ビルド時に使われてフラグに保存されているデフォルト値を上書きするには、
perl の設定とビルドの前に C<export MACOSX_DEPLOYMENT_TARGET=10.N> を
指定してください; ここで 10.N はターゲットにしたい OS X のバージョンです。
OS X 10.5 以前では、そのシステムがカレントなら現在の振る舞いに
変更はありません; リンクターゲットは OS X 10.3 のままで明示的な
コンパイラターゲットはありません。

=item *

=begin original

Builds with both -DDEBUGGING and threading enabled would fail with a
"panic: free from wrong pool" error when built or tested from Terminal
on OS X.  This was caused by perl's internal management of the
environment conflicting with an atfork handler using the libc
C<setenv()> function to update the environment.

=end original

-DDEBUGGING とスレッドの両方を有効にしたビルドは、OS X の Terminal で
ビルドやテストをすると "panic: free from wrong pool" で失敗します。
これは、perl 内部の環境管理が、環境を更新するために libc の C<setenv()> 関数を
使う atfork ハンドラと競合するからです。

=begin original

Perl now uses C<setenv()>/C<unsetenv()> to update the environment on OS X.
L<[perl #126240]|https://rt.perl.org/Ticket/Display.html?id=126240>

=end original

Perl は OS X の環境の更新に C<setenv()>/C<unsetenv()> を使うようになりました。
L<[perl #126240]|https://rt.perl.org/Ticket/Display.html?id=126240>

=back

=item Solaris

=over 4

=item *

=begin original

All Solaris variants now build a shared libperl

=end original

全ての Solaris の亜種で共有 libperl をビルドするようになりました。

=begin original

Solaris and variants like OpenIndiana now always build with the shared
Perl library (Configure -Duseshrplib).  This was required for the
OpenIndiana builds, but this has also been the setting for Oracle/Sun
Perl builds for several years.

=end original

Solaris と OpenIndiana のような亜種では、常に共有 Perl ライブラリで
(Configure -Duseshrplib) ビルドされるようになりました。
これは OpenIndiana ビルドで必要でしたが、何年も前から Oracle/Sun
Perl ビルドでも設定されていました。

=back

=item Tru64

=over 4

=item *

=begin original

Workaround where Tru64 balks when prototypes are listed as
C<< PERL_STATIC_INLINE >>, but where the test is build with
C<< -DPERL_NO_INLINE_FUNCTIONS >>.

=end original

Workaround where Tru64 balks 
プロトタイプが C<< PERL_STATIC_INLINE >> に載っているけれども、テストが
C<< -DPERL_NO_INLINE_FUNCTIONS >> 付きでビルドされた場合に Tru64 を妨げる
問題が回避されました。

=back

=item VMS

=over 4

=item *

=begin original

On VMS, the math function prototypes in C<math.h> are now visible under C++.
Now building the POSIX extension with C++ will no longer crash.

=end original

VMS では、C<math.h> の算術関数プロトタイプは C++ で見えるようになりました。
C++ で POSIX エクステンションをビルドしてもクラッシュしなくなりました。

=item *

=begin original

VMS has had C<setenv>/C<unsetenv> since v7.0 (released in 1996),
C<Perl_vmssetenv> now always uses C<setenv>/C<unsetenv>.

=end original

VMS は、(1996 年にリリースされた) v7.0 から C<setenv>/C<unsetenv> があります。
C<Perl_vmssetenv> は常に C<setenv>/C<unsetenv> を使うようになりました。

=item *

=begin original

Perl now implements its own C<killpg> by scanning for processes in the
specified process group, which may not mean exactly the same thing as a Unix
process group, but allows us to send a signal to a parent (or master) process
and all of its sub-processes.  At the perl level, this means we can now send a
negative pid like so:

=end original

今回 Perl は指定されたプロセスグループのプロセスをスキャンするための独自の
C<killpg> を実装しました; これは Unix プロセスグループと正確に同じことを
意味するわけではありませんが、親(マスター)プロセスとその全ての副プロセスに
シグナルを送ることができるようになります。
perl のレベルでは、これは次のようにして負数の pid を送ることができると
いうことです:

    kill SIGKILL, -$pid;

=begin original

to signal all processes in the same group as C<$pid>.

=end original

これは C<$pid> と同じグループの全てのプロセスにシグナルを送ります。

=item *

=begin original

For those C<%ENV> elements based on the CRTL environ array, we've always
preserved case when setting them but did look-ups only after upcasing the
key first, which made lower- or mixed-case entries go missing. This problem
has been corrected by making C<%ENV> elements derived from the environ array
case-sensitive on look-up as well as case-preserving on store.

=end original

CRTL 環境配列を基にした C<%ENV> 要素では、値を設定するときには常に
大文字小文字を保存しますが、検索時にはキーをまず大文字にしてからのみ
行っていて、小文字や大文字小文字の混ざったエントリは
見つけられていませんでした。
環境配列由来の C<%ENV> 要素に関しては保管時に大文字小文字を保存するのと同様
検索時にも大文字小文字を認識するようにすることで、この問題は修正されました。

=item *

=begin original

Environment look-ups for C<PERL5LIB> and C<PERLLIB> previously only
considered logical names, but now consider all sources of C<%ENV> as
determined by C<PERL_ENV_TABLES> and as documented in L<perlvms/%ENV>.

=end original

C<PERL5LIB> と C<PERLLIB> の環境変数検索は、以前は論理名としてのみ
扱われていましたが、今回から C<%ENV> の全てのソースは
C<PERL_ENV_TABLES> によって決定されるものと L<perlvms/%ENV> で
文書化されているものとして扱われるようになりました。

=item *

=begin original

The minimum supported version of VMS is now v7.3-2, released in 2003.  As a
side effect of this change, VAX is no longer supported as the terminal
release of OpenVMS VAX was v7.3 in 2001.

=end original

VMS で対応する最低バージョンは、2003 年にリリースされた v7.3-2 になりました。
この変更の副作用として、VAX はもはや対応されなくなりました; OpenVMS VAX の
最後のリリースは 2001 年の v7.3 です。

=back

=item Win32

=over 4

=item *

=begin original

A new build option C<USE_NO_REGISTRY> has been added to the makefiles.  This
option is off by default, meaning the default is to do Windows registry
lookups.  This option stops Perl from looking inside the registry for anything.
For what values are looked up in the registry see L<perlwin32>.  Internally, in
C, the name of this option is C<WIN32_NO_REGISTRY>.

=end original

新しいビルドオプション C<USE_NO_REGISTRY> が makefile に追加されました。
このオプションはデフォルトではオフです; これは、デフォルトでは Windows の
レジストリ検索を行うということです。
このオプションは、Perl がレジストリの内部を見ることを止めさせます。
レジストリのどの値を見るかについては L<perlwin32> を参照してください。
内部の扱いとしては、C では、このオプションの名前は C<WIN32_NO_REGISTRY> です。

=item *

=begin original

The behavior of Perl using C<HKEY_CURRENT_USER\Software\Perl> and
C<HKEY_LOCAL_MACHINE\Software\Perl> to lookup certain values, including C<%ENV>
vars starting with C<PERL> has changed.  Previously, the 2 keys were checked
for entries at all times through the perl process's life time even if
they did not
exist.  For performance reasons, now, if the root key (i.e.
C<HKEY_CURRENT_USER\Software\Perl> or C<HKEY_LOCAL_MACHINE\Software\Perl>) does
not exist at process start time, it will not be checked again for C<%ENV>
override entries for the remainder of the perl process's life.  This more
closely matches Unix behavior in that the environment is copied or inherited
on startup and changing the variable in the parent process or another process
or editing F<.bashrc> will not change the environmental variable in other
existing, running, processes.

=end original

C<PERL> で始まる C<%ENV> 変数を含むいくつかの値を探すのに
C<HKEY_CURRENT_USER\Software\Perl> と C<HKEY_LOCAL_MACHINE\Software\Perl> を
使うという Perl の振る舞いは変更されました。
以前は、この二つのキーは perl のプロセスの動作中ずっと、例えキーが
存在していなくても、チェックされ続けていました。
性能上の理由から、もしルートキー (つまり
C<HKEY_CURRENT_USER\Software\Perl> や C<HKEY_LOCAL_MACHINE\Software\Perl>) が
プロセス開始時に存在していなければ、残りの perl プロセスの動作中、
C<%ENV> 上書きエントリのために再びチェックしなくなりました。
これは、環境は開始時にコピーまたは継承して、親プロセスや他のプロセスで
変数を変更したり F<.bashrc> を編集したりしても、他の存在している、
実行されているプロセスの環境変数は変更されないという、Unix での振る舞いに
より近いものになります。

=item *

=begin original

One glob fetch was removed for each C<-X> or C<stat> call whether done from
Perl code or internally from Perl's C code.  The glob being looked up was
C<${^WIN32_SLOPPY_STAT}> which is a special variable.  This makes C<-X> and
C<stat> slightly faster.

=end original

Perl のコードまたは内部では Perl の C コードのどちらかによる、
C<-X> または C<stat> 呼び出し毎に行われていた一つのグロブ取得が
取り除かれました。
取得していたグロブは特殊変数である C<${^WIN32_SLOPPY_STAT}> でした。
これにより C<-X> と C<stat> は少し速くなりました。

=item *

=begin original

During miniperl's process startup, during the build process, 4 to 8 IO calls
related to the process starting F<.pl> and the F<buildcustomize.pl> file were
removed from the code opening and executing the first 1 or 2 F<.pl> files.

=end original

miniperl のプロセスの起動中、ビルドプロセスの間、
最初の 1 または 2 の F<.pl> ファイルに対しては、F<.pl> と
F<buildcustomize.pl> ファイルの開始プロセスに関連する 4 から 8 の
IO 呼び出しがコードから取り除かれました。

=item *

=begin original

Builds using Microsoft Visual C++ 2003 and earlier no longer produce
an "INTERNAL COMPILER ERROR" message.  [perl #126045]

=end original

Microsoft Visual C++ 2003 以前を使ったビルドで
"INTERNAL COMPILER ERROR" メッセージが出なくなりました。
[perl #126045]

=item *

=begin original

Visual C++ 2013 builds will now execute on XP and higher. Previously they would
only execute on Vista and higher.

=end original

Visual C++ 2013 ビルドは XP 以降で実行できるようになりました。
以前は Vista 以降でのみ実行できました。

=item *

=begin original

You can now build perl with GNU Make and GCC.  [perl #123440]

=end original

perl を GNU Make と GCC でビルド出来るようになりました。
[perl #123440]

=item *

=begin original

C<truncate($filename, $size)> now works for files over 4GB in size.
[perl #125347]

=end original

C<truncate($filename, $size)> はサイズが 4GB 以上のファイルで
動作するようになりました。
[perl #125347]

=item *

=begin original

Parallel building has been added to the dmake C<makefile.mk> makefile. All
Win32 compilers are supported.

=end original

dmake の C<makefile.mk> makefile に、並列ビルドが追加されました。
全ての Win32 コンパイラに対応しています。

=item *

=begin original

Building a 64-bit perl with a 64-bit GCC but a 32-bit gmake would
result in an invalid C<$Config{archname}> for the resulting perl.
[perl #127584]

=end original

64 ビット GCC と 32 ビット gmake で 64 ビット perl をビルドすると、
作成された perl の C<$Config{archname}> が不正になっていました。
[perl #127584]

=item *

=begin original

Errors set by Winsock functions are now put directly into C<$^E>, and the
relevant C<WSAE*> error codes are now exported from the L<Errno> and L<POSIX>
modules for testing this against.

=end original

Winsock 関数によって設定されたエラーは直接 C<$^E> に設定されるようになり、
関連する C<WSAE*> エラーコードは、これをテストするために L<Errno> と
L<POSIX> モジュールからエクスポートされるようになりました。

=begin original

The previous behavior of putting the errors (converted to POSIX-style C<E*>
error codes since Perl 5.20.0) into C<$!> was buggy due to the non-equivalence
of like-named Winsock and POSIX error constants, a relationship between which
has unfortunately been established in one way or another since Perl 5.8.0.

=end original

エラーを (Perl 5.20.0 からは POSIX 形式の C<E*> エラーコードに変換して)
C<$!> に設定するという以前の振る舞いは、不幸にも Perl 5.8.0 から何かにつけて
設定されていた、似た名前の Winsock と POSIX のエラー定数の非等価性により、
バギーでした。

=begin original

The new behavior provides a much more robust solution for checking Winsock
errors in portable software without accidentally matching POSIX tests that were
intended for other OSes and may have different meanings for Winsock.

=end original

新しい振る舞いは、移植性のあるソフトウェアが、他の OS を意図した
POSIX テストと、異なった意味を持つかもしれない Winsock のものが
偶然一致してしまうことなく Winsock のエラーをチェックするのに、はるかに頑強な
解決法を提供します。

=begin original

The old behavior is currently retained, warts and all, for backwards
compatibility, but users are encouraged to change any code that tests C<$!>
against C<E*> constants for Winsock errors to instead test C<$^E> against
C<WSAE*> constants.  After a suitable deprecation period, the old behavior may
be removed, leaving C<$!> unchanged after Winsock function calls, to avoid any
possible confusion over which error variable to check.

=end original

古い振る舞いは今のところ後方互換性のために欠点も含めてそのまま残っていますが、
Winsock エラーについて C<$!> を C<E*> 定数でテストするのではなく、
C<$^E> を C<WSAE*> 定数でテストするように変更することが推奨されます。
適切な廃止予定期間の後、古い振る舞いは取り除かれ、エラー変数のチェックに
関する混乱を防ぐために、Winsock 関数呼び出しの後に C<$!> が
変更されなくなります。

=back

=item ppc64el

=over 4

=item floating point

=begin original

The floating point format of ppc64el (Debian naming for little-endian
PowerPC) is now detected correctly.

=end original

ppc64el (リトルエンディアン PowerPC の Debian での呼び名) の浮動小数点形式は
正しく検出されるようになりました。

=back

=back

=head1 Internal Changes

(内部の変更)

=over 4

=item *

=begin original

The implementation of perl's context stack system, and its internal API,
have been heavily reworked. Note that no significant changes have been
made to any external APIs, but XS code which relies on such internal
details may need to be fixed. The main changes are:

=end original

perl コンテキストスタックシステムとその内部 API は大きく再作業されました。
外部 API には大きな変更はありませんが、このような内部詳細に依存している
XS コードは修正する必要があります。
主な変更点は以下の通りです:

=over 4

=item *

=begin original

The C<PUSHBLOCK()>, C<POPSUB()> etc. macros have been replaced with static
inline functions such as C<cx_pushblock()>, C<cx_popsub()> etc. These use
function args rather than implicitly relying on local vars such as
C<gimme> and C<newsp> being available. Also their functionality has
changed: in particular, C<cx_popblock()> no longer decrements
C<cxstack_ix>. The ordering of the steps in the C<pp_leave*> functions
involving C<cx_popblock()>, C<cx_popsub()> etc. has changed. See the new
documentation, L<perlguts/"Dynamic Scope and the Context Stack">, for
details on how to use them.

=end original

C<PUSHBLOCK()>, C<POPSUB()> などのマクロは C<cx_pushblock()>,
C<cx_popsub()> などの静的インライン関数に置き換えられました。
これらは、C<gimme> や C<newsp> のような利用可能なローカル変数に暗黙に
依存するのではなく、関数の引数を使います。
また、これらの機能は変更されました: 特に、C<cx_popblock()> はもはや
C<cxstack_ix> をデクリメントしなくなりました。
C<pp_leave*> 関数内の C<cx_popblock()>, C<cx_popsub()> などに関する
ステップの順番が変わりました。
これらの使い方に関する詳細については新しい文書である
L<perlguts/"Dynamic Scope and the Context Stack"> を参照してください。

=item *

=begin original

Various macros, which now consistently have a CX_ prefix, have been added:

=end original

一貫して CX_ 接頭辞を持つ、様々なマクロが追加されたり:

  CX_CUR(), CX_LEAVE_SCOPE(), CX_POP()

=begin original

or renamed:

=end original

リネームされたりしました:

  CX_POP_SAVEARRAY(), CX_DEBUG(), CX_PUSHSUBST(), CX_POPSUBST()

=item *

=begin original

C<cx_pushblock()> now saves C<PL_savestack_ix> and C<PL_tmps_floor>, so
C<pp_enter*> and C<pp_leave*> no longer do

=end original

C<cx_pushblock()> は C<PL_savestack_ix> と C<PL_tmps_floor> を
保存するようになったので、C<pp_enter*> と C<pp_leave*> はもはや以下のように
しなくてもよくなりました:

  ENTER; SAVETMPS; ....; LEAVE

=item *

=begin original

C<cx_popblock()> now also restores C<PL_curpm>.

=end original

C<cx_popblock()> は C<PL_curpm> も復元するようになりました。

=item *

=begin original

In C<dounwind()> for every context type, the current savestack frame is
now processed before each context is popped; formerly this was only done
for sub-like context frames. This action has been removed from
C<cx_popsub()> and placed into its own macro, C<CX_LEAVE_SCOPE(cx)>, which
must be called before C<cx_popsub()> etc.

=end original

全てのコンテキスト型の C<dounwind()> で、現在の savestack フレームは
それぞれのコンテキストが pop する前に処理されるようになりました;
以前はこれは sub 風のコンテキストフレームでのみ行われていました。
この処理は
C<cx_popsub()> から取り除かれて独自のマクロ C<CX_LEAVE_SCOPE(cx)> に
置かれました; これは C<cx_popsub()> などの前に呼び出さなければなりません。

=begin original

C<dounwind()> now also does a C<cx_popblock()> on the last popped frame
(formerly it only did the C<cx_popsub()> etc. actions on each frame).

=end original

C<dounwind()> は最後に pop したフレームで C<cx_popblock()> も
行うようになりました (以前は各フレームで C<cx_popsub()> などのアクションのみが
行われていました)。

=item *

=begin original

The temps stack is now freed on scope exit; previously, temps created
during the last statement of a block wouldn't be freed until the next
C<nextstate> following the block (apart from an existing hack that did
this for recursive subs in scalar context); and in something like
C<f(g())>, the temps created by the last statement in C<g()> would
formerly not be freed until the statement following the return from
C<f()>.

=end original

temps スタックはスコープの終了時に解放されるようになりました; 
以前は、ブロックの最後の文の中で作成された temps は、
(スカラコンテキストの再帰サブルーチンに対してこれを行う既存のハックは別として)
そのブロックに引き続く次の C<nextstate> まで解放されませんでした;
そして C<f(g())> のようなものの中では、C<g()> の最後の文で作られた
temps は、以前は C<f()> からの return に引き続く分まで
解放されていませんでした。

=item *

=begin original

Most values that were saved on the savestack on scope entry are now
saved in suitable new fields in the context struct, and saved and
restored directly by C<cx_pushfoo()> and C<cx_popfoo()>, which is much
faster.

=end original

スコープエントリの savestack に保存されるほとんどの値は、そのコンテキスト
構造体の適切な新しいフィールドに保存されるようになりました。
C<cx_pushfoo()> と C<cx_popfoo()> によって直接保存と復元が行われるようになり、
はるかに高速になりました。

=item *

=begin original

Various context struct fields have been added, removed or modified.

=end original

様々なコンテキスト構造体フィールドが追加、削除、変更されました。

=item *

=begin original

The handling of C<@_> in C<cx_pushsub()> and C<cx_popsub()> has been
considerably tidied up, including removing the C<argarray> field from the
context struct, and extracting out some common (but rarely used) code into
a separate function, C<clear_defarray()>. Also, useful subsets of
C<cx_popsub()> which had been unrolled in places like C<pp_goto> have been
gathered into the new functions C<cx_popsub_args()> and
C<cx_popsub_common()>.

=end original

C<cx_pushsub()> と C<cx_popsub()> での C<@_> の扱いはかなり整理されました;
コンテキスト構造体から C<argarray> フィールドが取り除かれたり、
一部の共通(しかしめったに使われない)コードが C<clear_defarray()> という
別関数に抽出されたりしました。
また、C<pp_goto> のようにその場で展開する C<cx_popsub()> の有用な一部分が
新しい関数 C<cx_popsub_args()> と C<cx_popsub_common()> にまとめられました。

=item *

=begin original

C<pp_leavesub> and C<pp_leavesublv> now use the same function as the rest
of the C<pp_leave*>'s to process return args.

=end original

C<pp_leavesub> と C<pp_leavesublv> は、返り値を処理するためにその他の
C<pp_leave*> と同じ関数を使うようになりました。

=item *

=begin original

C<CXp_FOR_PAD> and C<CXp_FOR_GV> flags have been added, and
C<CXt_LOOP_FOR> has been split into C<CXt_LOOP_LIST>, C<CXt_LOOP_ARY>.

=end original

C<CXp_FOR_PAD> と C<CXp_FOR_GV> フラグが追加され、C<CXt_LOOP_FOR> は
C<CXt_LOOP_LIST> と C<CXt_LOOP_ARY> に分割されました。

=item *

=begin original

Some variables formerly declared by C<dMULTICALL> (but not documented) have
been removed.

=end original

以前 C<dMULTICALL> で宣言されていた (しかし文書化されていなかった) 変数が
取り除かれました。

=back

=item *

=begin original

The obscure C<PL_timesbuf> variable, effectively a vestige of Perl 1, has
been removed. It was documented as deprecated in Perl 5.20, with a statement
that it would be removed early in the 5.21.x series; that has now finally
happened.
L<[perl #121351]|https://rt.perl.org/Ticket/Display.html?id=121351>

=end original

事実上 Perl 1 の名残である、不明瞭な C<PL_timesbuf> 変数は取り除かれました。
これは Perl 5.20 で廃止予定となり、5.21.x の早い段階で
取り除かれるとされていました; これがついに行われました。
L<[perl #121351]|https://rt.perl.org/Ticket/Display.html?id=121351>

=item *

=begin original

An unwarranted assertion in C<Perl_newATTRSUB_x()> has been removed.  If
a stub subroutine
definition with a prototype has been seen, then any subsequent stub (or
definition) of the same subroutine with an attribute was causing an assertion
failure because of a null pointer.
L<[perl #126845]|https://rt.perl.org/Ticket/Display.html?id=126845>

=end original

C<Perl_newATTRSUB_x()> での保証されないアサートが取り除かれました。
プロトタイプ付きのスタブサブルーチン定義がある場合、属性を持つ同じ
サブルーチンのスタブ(または定義)が引き続くと、ヌルポインタによるアサート失敗が
発生していました。
L<[perl #126845]|https://rt.perl.org/Ticket/Display.html?id=126845>

=item *

=begin original

C<::> has been replaced by C<__> in C<ExtUtils::ParseXS>, like it's done for
parameters/return values. This is more consistent, and simplifies writing XS
code wrapping C++ classes into a nested Perl namespace (it requires only
a typedef for C<Foo__Bar> rather than two, one for C<Foo_Bar> and the other
for C<Foo::Bar>).

=end original

C<ExtUtils::ParseXS> で C<::> は C<__> に置き換えるようになりました;
これは引数/返り値に対してと同様に行われます。
これにより一貫性が増し、
また C++ クラスをネストした Perl 名前空間にラッピングする XS コードを書くのが
単純化されました (C<Foo_Bar> のためと C<Foo::Bar> のための二つではなく、
C<Foo__Bar> のための一つだけ typedef が必要になりました)。

=item *

=begin original

The C<to_utf8_case()> function is now deprecated.  Instead use
C<toUPPER_utf8>, C<toTITLE_utf8>, C<toLOWER_utf8>, and C<toFOLD_utf8>.
(See L<http://nntp.perl.org/group/perl.perl5.porters/233287>.)

=end original

C<to_utf8_case()> 関数は廃止予定になりました。
代わりに C<toUPPER_utf8>, C<toTITLE_utf8>, C<toLOWER_utf8>, C<toFOLD_utf8> を
使ってください。
(L<http://nntp.perl.org/group/perl.perl5.porters/233287> を参照してください。)

=item *

=begin original

Perl core code and the threads extension have been annotated so that,
if Perl is configured to use threads, then during compile-time clang (3.6
or later) will warn about suspicious uses of mutexes.
See L<http://clang.llvm.org/docs/ThreadSafetyAnalysis.html> for more
information.

=end original

Perl コードと threads エクステンションはアノテーションが付けられました;
Perl がスレッドを使うように設定されていると、
コンパイル時に clang (3.6) 以降はミューテックスの疑わしい使用法について
警告を出していました。
さらなる情報については
L<http://clang.llvm.org/docs/ThreadSafetyAnalysis.html> を参照してください。

=item *

=begin original

The C<signbit()> emulation has been enhanced.  This will help older
and/or more exotic platforms or configurations.

=end original

C<signbit()> エミュレーションが拡張されました。
これはより古い、あるいはより変わったプラットフォームや設定の助けになります。

=item *

=begin original

Most EBCDIC-specific code in the core has been unified with non-EBCDIC
code, to avoid repetition and make maintenance easier.

=end original

コアにあるほとんどの EBCDIC 固有のコードは非 EBCDIC コードと統一化されました;
繰り返しを避けて保守をより容易にするためです。

=item *

=begin original

MSWin32 code for C<$^X> has been moved out of the F<win32> directory to
F<caretx.c>, where other operating systems set that variable.

=end original

C<$^X> のための MSWin32 コードは F<win32> ディレクトリから F<caretx.c> に
移されました; 他のオペレーティングシステムもこの変数を設定します。

=item *

=begin original

C<< sv_ref() >> is now part of the API.

=end original

C<< sv_ref() >> は API の一部になりました。

=item *

=begin original

L<perlapi/sv_backoff> had its return type changed from C<int> to C<void>.  It
previously has always returned C<0> since Perl 5.000 stable but that was
undocumented.  Although C<sv_backoff> is marked as public API, XS code is not
expected to be impacted since the proper API call would be through public API
C<sv_setsv(sv, &PL_sv_undef)>, or quasi-public C<SvOOK_off>, or non-public
C<SvOK_off> calls, and the return value of C<sv_backoff> was previously a
meaningless constant that can be rewritten as C<(sv_backoff(sv),0)>.

=end original

L<perlapi/sv_backoff> の返り型は C<int> から C<void> に変更されました。
これは以前は Perl 5.000 stable から常に C<0> を返していましたが、
文書化されていませんでした。
C<sv_backoff> は公式 API としてマークされていましたが、XS コードに影響は
ないと想定しています;
適切な API 呼び出しは公式 API C<sv_setsv(sv, &PL_sv_undef)>, または
疑似公式 API  C<SvOOK_off> または非公式 API C<SvOK_off> を通していて、
以前は C<sv_backoff> の返り値は意味がない定数で、C<(sv_backoff(sv),0)> と
書き直せるものだったからです。

=item *

=begin original

The C<EXTEND> and C<MEXTEND> macros have been improved to avoid various issues
with integer truncation and wrapping.  In particular, some casts formerly used
within the macros have been removed.  This means for example that passing an
unsigned C<nitems> argument is likely to raise a compiler warning now
(it's always been documented to require a signed value; formerly int,
lately SSize_t).

=end original

C<EXTEND> と C<MEXTEND> マクロは、整数の切り詰めとラッピングに関する様々な
問題を避けるために改良されました。
特に、以前マクロの中で使われていたいくつかのキャストが取り除かれました。
これにより、例えば、符号なしの C<nitems> 引数を渡すとおそらくコンパイル警告が
発生するようになります(これは常に符号付き値を要求するように
文書化されています; 以前は int、最近は SSize_t でした)。

=item *

=begin original

C<PL_sawalias> and C<GPf_ALIASED_SV> have been removed.

=end original

C<PL_sawalias> と C<GPf_ALIASED_SV> は取り除かれました。

=item *

=begin original

C<GvASSIGN_GENERATION> and C<GvASSIGN_GENERATION_set> have been removed.

=end original

C<GvASSIGN_GENERATION> と C<GvASSIGN_GENERATION_set> は取り除かれました。

=back

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=over 4

=item *

=begin original

It now works properly to specify a user-defined property, such as

=end original

以下のようにユーザー定義特性の場合で:

 qr/\p{mypkg1::IsMyProperty}/i

=begin original

with C</i> caseless matching, an explicit package name, and
I<IsMyProperty> not defined at the time of the pattern compilation.

=end original

C</i> 大文字小文字無視、明示的なパッケージ名指定があり、
I<IsMyProperty> がパターンのコンパイル時に未定義でも正しく
動作するようになりました。

=item *

=begin original

Perl's C<memcpy()>, C<memmove()>, C<memset()> and C<memcmp()> fallbacks are now
more compatible with the originals.  [perl #127619]

=end original

Perl の C<memcpy()>, C<memmove()>, C<memset()>, C<memcmp()> フォールバックは
オリジナルとの互換性が向上しました。
[perl #127619]

=item *

=begin original

Fixed the issue where a C<< s///r >>) with B<< -DPERL_NO_COW >> attempts
to modify the source SV, resulting in the program dying. [perl #127635]

=end original

Fixed the issue where a  with 
B<< -DPERL_NO_COW >> の時に C<< s///r >>) がソース SV を変更しようとして、
プログラムが死ぬ問題が修正されました。
[perl #127635]

=item *

=begin original

Fixed an EBCDIC-platform-only case where a pattern could fail to match. This
occurred when matching characters from the set of C1 controls when the
target matched string was in UTF-8.

=end original

パターンがマッチングに失敗するという EBCDIC プラットフォームのみでの
問題が修正されました。
これは、マッチングのターゲット文字列が UTF-8 で、マッチング文字が C1
制御文字の集合のときに起こっていました。

=item *

=begin original

Narrow the filename check in F<strict.pm> and F<warnings.pm>. Previously,
it assumed that if the filename (without the F<.pmc?> extension) differed
from the package name, if was a misspelled use statement (i.e. C<use Strict>
instead of C<use strict>). We now check whether there's really a 
miscapitalization happening, and not some other issue.

=end original

F<strict.pm> と F<warnings.pm> でのファイル名チェックが狭められました。
以前は、(F<.pmc?> 拡張子抜きの) ファイル名がパッケージ名が違う場合、
スペルミスした use 文 (つまり C<use strict> のつもりで C<use Strict> と
書いた) と仮定していました。
今回、これが本当に大文字小文字を間違えたものかをチェックして、その他のものは
チェックしなくなりました。

=item *

=begin original

Turn an assertion into a more user friendly failure when parsing
regexes. [perl #127599]

=end original

正規表現のパース時のアサート失敗がよりユーザーフレンドリーになりました。
[perl #127599]

=item *

=begin original

Correctly raise an error when trying to compile patterns with 
unterminated character classes while there are trailing backslashes.
[perl #126141].

=end original

文字クラスが終端していないけれども末尾に逆スラッシュがあるパターンを
コンパイルしようとしたときに正しくエラーを発生させるようになりました。
[perl #126141]。

=item *

=begin original

Line numbers larger than 2**31-1 but less than 2**32 are no longer
returned by C<caller()> as negative numbers.  [perl #126991]

=end original

行番号が 2**31-1 よりも大きいけれども 2**32 よりも小さいとき、
C<caller()> は負数を返さなくなりました。
[perl #126991]

=item *

=begin original

C<< unless ( I<assignment> ) >> now properly warns when syntax
warnings are enabled.  [perl #127122]

=end original

文法警告が有効のとき、C<< unless ( I<assignment> ) >> は適切に
警告するようになりました。
[perl #127122]

=item *

=begin original

Setting an C<ISA> glob to an array reference now properly adds
C<isaelem> magic to any existing elements.  Previously modifying such
an element would not update the ISA cache, so method calls would call
the wrong function.  Perl would also crash if the C<ISA> glob was
destroyed, since new code added in 5.23.7 would try to release the
C<isaelem> magic from the elements.  [perl #127351]

=end original

C<ISA> グロブに配列リファレンスを設定したときに、全ての存在する要素に
適切に C<isaelem> magic が追加されるようになりました。
以前はこのような要素の変更は ISA キャッシュを更新していなかったので、
メソッド呼び出しで間違った関数を呼び出すことがありました。
また、C<ISA> グロブが壊されると perl がクラッシュしていました;
5.23.7 で追加された新しいコードが要素から C<isaelem> magic を
解放しようとするからです。
[perl #127351]

=item *

=begin original

If a here-doc was found while parsing another operator, the parser had
already read end of file, and the here-doc was not terminated, perl
could produce an assertion or a segmentation fault.  This now reliably
complains about the unterminated here-doc.  [perl #125540]

=end original

他の演算子のパース中にヒヤドキュメントが見つかり、パーサが既にファイルの
末尾まで読み込んでいて、ヒヤドキュメントが終端していないとき、perl は
アサートしたりセグメンテーションフォルトしたりすることがありました。
終端していないヒヤドキュメントに関するエラーを確実に出力するようになりました。
[perl #125540]

=item *

=begin original

C<untie()> would sometimes return the last value returned by the C<UNTIE()>
handler as well as it's normal value, messing up the stack.  [perl
#126621]

=end original

C<untie()> は時々通常の値と同様 C<UNTIE()> ハンドラが返した最後の値を
返すことがあり、スタックを壊していました。
[perl #126621]

=item *

=begin original

Fixed an operator precedence problem when C< castflags & 2> is true.
[perl #127474]

=end original

C< castflags & 2> が真のときの演算子の優先順位の問題が修正されました。
[perl #127474]

=item *

=begin original

Caching of DESTROY methods could result in a non-pointer or a
non-STASH stored in the C<SvSTASH()> slot of a stash, breaking the B
C<STASH()> method.  The DESTROY method is now cached in the MRO metadata
for the stash.  [perl #126410]

=end original

DESTROY メソッドをキャッシュすると、スタッシュの C<SvSTASH()> スロットに
ポインタや STASH でないものが保管されることがあり、これにより
L<B> の C<STASH()> メソッドが壊れていました。
DESTROY メソッドはスタッシュのための MRO メタデータに
キャッシュされるようになりました。
[perl #126410]

=item *

=begin original

The AUTOLOAD method is now called when searching for a DESTROY method,
and correctly sets C<$AUTOLOAD> too.  [perl #124387]  [perl #127494]

=end original

AUTOLOAD メソッドは DESTROY メソッドを探すときに呼び出されるようになり、
正しく C<$AUTOLOAD> を設定するようになりました。
[perl #124387]  [perl #127494]

=item *

=begin original

Avoid parsing beyond the end of the buffer when processing a C<#line>
directive with no filename.  [perl #127334]

=end original

ファイル名なしの C<#line> 指示子を処理するときにバッファの末尾を越えて
パースしなくなりました。
[perl #127334]

=item *

=begin original

Perl now raises a warning when a regular expression pattern looks like
it was supposed to contain a POSIX class, like C<qr/[[:alpha:]]/>, but
there was some slight defect in its specification which causes it to
instead be treated as a regular bracketed character class.  An example
would be missing the second colon in the above like this:
C<qr/[[:alpha]]/>.  This compiles to match a sequence of two characters.
The second is C<"]">, and the first is any of: C<"[">, C<":">, C<"a">,
C<"h">, C<"l">, or C<"p">.   This is unlikely to be the intended
meaning, and now a warning is raised.  No warning is raised unless the
specification is very close to one of the 14 legal POSIX classes.  (See
L<perlrecharclass/POSIX Character Classes>.)
[perl #8904]

=end original

正規表現パターンが C<qr/[[:alpha:]]/> のような POSIX クラスを含んでいるように
見えるけれども、その指定に問題があって通常の大かっこ文字クラスとして
扱われるような場合、Perl は警告を出すようになりました。
例の一つは、次のように 2 番目のコロンがない場合です:
C<qr/[[:alpha]]/>.
これは二つの文字の並びにマッチングするようにコンパイルされます。
二つ目は C<"]"> で、一つ目は C<"[">, C<":">, C<"a">, C<"h">, C<"l">,
C<"p"> のいずれかです。
これはおそらく意図した意味とは違うので、警告が発生するようになりました。
指定が 14 の正当な POSIX クラスととても近い場合以外は警告は発生しません。
(L<perlrecharclass/POSIX Character Classes> を参照してください。)
[perl #8904]

=item *

=begin original

Certain regex patterns involving a complemented POSIX class in an
inverted bracketed character class, and matching something else
optionally would improperly fail to match.  An example of one that could
fail is C<qr/_?[^\Wbar]\x{100}/>.  This has been fixed.
[perl #127537]

=end original

否定の大かっこ文字クラスの中に反転 POSIX クラスがあり、何か他にオプションで
マッチングするような特定の正規表現パターンは、
間違ってマッチングに失敗することがありました。
失敗を引き起こすものの例は C<qr/_?[^\Wbar]\x{100}/> です。
これは修正されました。
[perl #127537]

=item *

=begin original

Perl 5.22 added support to the C99 hexadecimal floating point notation,
but sometimes misparses hex floats. This has been fixed.
[perl #127183]

=end original

Perl 5.22 では C99 の 16 進浮動小数点記法対応が追加されましたが、時々
16 進小数を間違ってパースしていました。
これは修正されました。
[perl #127183]

=item *

=begin original

A regression that allowed undeclared barewords in hash keys to work despite
strictures has been fixed.
L<[perl #126981]|https://rt.perl.org/Ticket/Display.html?id=126981>

=end original

strict が指定されているにも関わらずハッシュキーとして未定義の裸の単語が
許されるという退行が修正されました。
L<[perl #126981]|https://rt.perl.org/Ticket/Display.html?id=126981>

=item *

=begin original

Calls to the placeholder C<&PL_sv_yes> used internally when an C<import()>
or C<unimport()> method isn't found now correctly handle scalar context.
L<[perl #126042]|https://rt.perl.org/Ticket/Display.html?id=126042>

=end original

C<import()> や C<unimport()> メソッドが見つからないときに内部で使われる
C<&PL_sv_yes> プレースホルダの呼び出しは、正しくスカラコンテキストを
扱えるようになりました。
L<[perl #126042]|https://rt.perl.org/Ticket/Display.html?id=126042>

=item *

=begin original

Report more context when we see an array where we expect to see an
operator and avoid an assertion failure.
L<[perl #123737]|https://rt.perl.org/Ticket/Display.html?id=123737>

=end original

演算子が想定される場所に配列があったときにより多くの情報を報告し、
アサート失敗を避けるようになりました。
L<[perl #123737]|https://rt.perl.org/Ticket/Display.html?id=123737>

=item *

=begin original

Modifying an array that was previously a package C<@ISA> no longer
causes assertion failures or crashes.
L<[perl #123788]|https://rt.perl.org/Ticket/Display.html?id=123788>

=end original

以前パッケージ C<@ISA> だった配列を変更しても、アサート失敗やクラッシュを
引き起こさなくなりました。
L<[perl #123788]|https://rt.perl.org/Ticket/Display.html?id=123788>

=item *

=begin original

Retain binary compatibility across plain and DEBUGGING perl builds.
L<[perl #127212]|https://rt.perl.org/Ticket/Display.html?id=127212>

=end original

通常と DEBUGGING perl ビルドのバイナリ互換性を維持するようになりました。
L<[perl #127212]|https://rt.perl.org/Ticket/Display.html?id=127212>

=item *

=begin original

Avoid leaking memory when setting C<$ENV{foo}> on darwin.
L<[perl #126240]|https://rt.perl.org/Ticket/Display.html?id=126240>

=end original

darwin で C<$ENV{foo}> を設定するときのメモリリークを修正しました。
L<[perl #126240]|https://rt.perl.org/Ticket/Display.html?id=126240>

=item *

=begin original

C</...\G/> no longer crashes on utf8 strings. When C<\G> is a fixed number
of characters from the start of the regex, perl needs to count back that
many characters from the current C<pos()> position and start matching from
there. However, it was counting back bytes rather than characters, which
could lead to panics on utf8 strings.

=end original

C</...\G/> は utf8 文字列でクラッシュしなくなりました。
C<\G> が正規表現の先頭からの固定長の文字列の場合、perl は現在の C<pos()> の
位置から何文字戻るかをカウントして、そこからマッチングを開始する必要が
あります。
しかし、この戻りカウントは文字でなくバイトで行われていたので、
utf8 文字列では panic を引き起こしていました。

=item *

=begin original

In some cases operators that return integers would return negative
integers as large positive integers.
L<[perl #126635]|https://rt.perl.org/Ticket/Display.html?id=126635>

=end original

整数を返す演算子が負の整数を大きな正の整数として返す場合がありました。
L<[perl #126635]|https://rt.perl.org/Ticket/Display.html?id=126635>

=item *

=begin original

The C<pipe()> operator would assert for DEBUGGING builds instead of
producing the correct error message.  The condition asserted on is
detected and reported on correctly without the assertions, so the
assertions were removed.
L<[perl #126480]|https://rt.perl.org/Ticket/Display.html?id=126480>

=end original

C<pipe()> 演算子は C<DEBUGGING> ビルドのとき、正しいエラーメッセージを
出力せずにアサートを起こすことがありました。
アサートされる条件はアサートなしで正しく検出および報告されるので、
アサートは削除されました。
L<[perl #126480]|https://rt.perl.org/Ticket/Display.html?id=126480>

=item *

=begin original

In some cases, failing to parse a here-doc would attempt to use freed
memory.  This was caused by a pointer not being restored correctly.
L<[perl #126443]|https://rt.perl.org/Ticket/Display.html?id=126443>

=end original

場合によっては、ヒヤドキュメントのパースの失敗時に解放されたメモリを
使おうとすることがありました。
これはポインタが正しく復元されないために起きていました。
L<[perl #126443]|https://rt.perl.org/Ticket/Display.html?id=126443>

=item *

=begin original

C<< @x = sort { *a = 0; $a <=> $b } 0 .. 1 >> no longer frees the GP
for *a before restoring its SV slot.
L<[perl #124097]|https://rt.perl.org/Ticket/Display.html?id=124097>

=end original

C<< @x = sort { *a = 0; $a <=> $b } 0 .. 1 >> としても *a の SV スロットを
復元する前に GP を解放しなくなりました。
L<[perl #124097]|https://rt.perl.org/Ticket/Display.html?id=124097>

=item *

=begin original

Multiple problems with the new hexadecimal floating point printf
format C<%a> were fixed:
L<[perl #126582]|https://rt.perl.org/Ticket/Display.html?id=126582>,
L<[perl #126586]|https://rt.perl.org/Ticket/Display.html?id=126586>,
L<[perl #126822]|https://rt.perl.org/Ticket/Display.html?id=126822>

=end original

新しい 16 進浮動小数点 printf フォーマット C<%a> に関する複数の問題が
修正されました:
L<[perl #126582]|https://rt.perl.org/Ticket/Display.html?id=126582>,
L<[perl #126586]|https://rt.perl.org/Ticket/Display.html?id=126586>,
L<[perl #126822]|https://rt.perl.org/Ticket/Display.html?id=126822>

=item *

=begin original

Calling C<mg_set()> in C<leave_scope()> no longer leaks.

=end original

C<leave_scope()> で C<mg_set()> を呼び出してもリークしなくなりました。

=item *

=begin original

A regression from Perl v5.20 was fixed in which debugging output of regular
expression compilation was wrong.  (The pattern was correctly compiled, but
what got displayed for it was wrong.)

=end original

正規表現コンパイルのデバッグ出力が間違っているという Perl v5.20 からの
退行が修正されました。
(パターンは正しくコンパイルされていましたが、表示されているものが
間違っていました。)

=item *

=begin original

C<\b{sb}> works much better.  In Perl v5.22.0, this new construct didn't
seem to give the expected results, yet passed all the tests in the
extensive suite furnished by Unicode.  It turns out that it was because
these were short input strings, and the failures had to do with longer
inputs.

=end original

C<\b{sb}> はより良く動作するようになりました。
Perl v5.22.0 では、新しい構文は想定通りの結果を出力しないように見えましたが、
それでも Unicode による広範囲なテスト全てを通過していました。
これらは短い入力文字列で、長い文字列では失敗することが分かりました。

=item *

=begin original

Certain syntax errors in
L<perlrecharclass/Extended Bracketed Character Classes> caused panics
instead of the proper error message.  This has now been fixed. [perl
#126481]

=end original

L<perlrecharclass/Extended Bracketed Character Classes> でのある種の
文法エラーで、適切なエラーメッセージが表示されずに panic していました。
これは修正されました。
[perl #126481]

=item *

=begin original

Perl 5.20 added a message when a quantifier in a regular
expression was useless, but then caused the parser to skip it;
this caused the surplus quantifier to be silently ignored, instead
of throwing an error. This is now fixed. [perl #126253]

=end original

Perl 5.20 では正規表現の量指定子が無意味なときのメッセージを追加しましたが、
それによってパーサがそれを飛ばすようになりました; これにより、過剰な
量指定子が、エラーにならずに暗黙に無視されていました。
これは修正されました。
[perl #126253]

=item *

=begin original

The switch to building non-XS modules last in win32/makefile.mk (introduced
by design as part of the changes to enable parallel building) caused the
build of POSIX to break due to problems with the version module. This
is now fixed.

=end original

win32/makefile.mk での、非 XS モジュールを最後にビルドする変更 (平行ビルドを
有効にするための変更の一部として意図的に導入されたもの) によって、
version モジュールの問題によって POSIX のビルドが壊れていました。
これは修正されました。

=item *

=begin original

Improved parsing of hex float constants.

=end original

16 進浮動小数定数のパースが改良されました。

=item *

=begin original

Fixed an issue with C<< pack >> where C<< pack "H" >> (and C<< pack "h" >>)
could read past the source when given a non-utf8 source, and a utf8 target.
[perl #126325]

=end original

C<< pack "H" >> (および C<< pack "h" >>) が、非 utf8 のソースと utf8 の
ターゲットを与えられたとき、ソースの先頭より前を読むことがあるという
C<pack()> の問題が修正されました。
[perl #126325]

=item *

=begin original

Fixed several cases where perl would abort due to a segmentation fault,
or a C-level assert. [perl #126615], [perl #126602], [perl #126193].

=end original

セグメンテーションフォルトや C レベルのアサートで perl が異常終了する
いくつかのケースが修正されました。
[perl #126615], [perl #126602], [perl #126193].

=item *

=begin original

There were places in regular expression patterns where comments (C<(?#...)>)
weren't allowed, but should have been.  This is now fixed.
L<[perl #116639]|https://rt.perl.org/Ticket/Display.html?id=116639>

=end original

正規表現パターン中に、コメント (C<(?#...)>) が書けるべきところで
書けなくなっていました。
これは修正されました。
L<[perl #116639]|https://rt.perl.org/Ticket/Display.html?id=116639>

=item *

=begin original

Some regressions from Perl 5.20 have been fixed, in which some syntax errors in
L<C<(?[...])>|perlrecharclass/Extended Bracketed Character Classes> constructs
within regular expression patterns could cause a segfault instead of a proper
error message.
L<[perl #126180]|https://rt.perl.org/Ticket/Display.html?id=126180>
L<[perl #126404]|https://rt.perl.org/Ticket/Display.html?id=126404>

=end original

正規表現中の
L<C<(?[...])>|perlrecharclass/Extended Bracketed Character Classes> 構文に
文法エラーがあると、適切なエラーメッセージが表示されずに
セグメンテーションフォルトを引き起こすという、Perl 5.20 からの退行が
修正されました。
L<[perl #126180]|https://rt.perl.org/Ticket/Display.html?id=126180>
L<[perl #126404]|https://rt.perl.org/Ticket/Display.html?id=126404>

=item *

=begin original

Another problem with
L<C<(?[...])>|perlrecharclass/Extended Bracketed Character Classes>
constructs has been fixed wherein things like C<\c]> could cause panics.
L<[perl #126181]|https://rt.perl.org/Ticket/Display.html?id=126181>

=end original

C<\c]> のようなものが panic を引き起こすという、
L<C<(?[...])>|perlrecharclass/Extended Bracketed Character Classes> 構文の
もう一つの問題が修正されました。
L<[perl #126181]|https://rt.perl.org/Ticket/Display.html?id=126181>

=item *

=begin original

Some problems with attempting to extend the perl stack to around 2G or 4G
entries have been fixed.  This was particularly an issue on 32-bit perls built
to use 64-bit integers, and was easily noticeable with the list repetition
operator, e.g.

=end original

perl スタックを 2G 近辺や 4G 近辺に拡張しようとするときの問題が
修正されました。
これは特に 32 ビットでビルドされた perl が 64 ビット整数を使うときに
問題となり、次のようなリスト繰り返し演算子で簡単に気付くことができました:

    @a = (1) x $big_number

=begin original

Formerly perl may have crashed, depending on the exact value of C<$big_number>;
now it will typically raise an exception.
L<[perl #125937]|https://rt.perl.org/Ticket/Display.html?id=125937>

=end original

以前は、perl は C<$big_number> の正確な値によっては
クラッシュすることがありました;
これは典型的には例外を発生させるようになりました。
L<[perl #125937]|https://rt.perl.org/Ticket/Display.html?id=125937>

=item *

=begin original

In a regex conditional expression C<(?(condition)yes-pattern|no-pattern)>, if
the condition is C<(?!)> then perl failed the match outright instead of
matching the no-pattern.  This has been fixed.
L<[perl #126222]|https://rt.perl.org/Ticket/Display.html?id=126222>

=end original

条件正規表現 C<(?(condition)yes-pattern|no-pattern)> で、
条件が C<(?!)> の場合、パターンなしにマッチングするのではなく、まったく
マッチングしなくなっていました。
これは修正されました。
L<[perl #126222]|https://rt.perl.org/Ticket/Display.html?id=126222>

=item *

=begin original

The special backtracking control verbs C<(*VERB:ARG)> now all allow an optional
argument and set C<REGERROR>/C<REGMARK> appropriately as well.
L<[perl #126186]|https://rt.perl.org/Ticket/Display.html?id=126186>

=end original

特殊バックトラック制御動詞 C<(*VERB:ARG)> は引数が全てオプションとなり、
C<REGERROR>/C<REGMARK> を適切に設定するようになりました。
L<[perl #126186]|https://rt.perl.org/Ticket/Display.html?id=126186>

=item *

=begin original

Several bugs, including a segmentation fault, have been fixed with the boundary
checking constructs (introduced in Perl 5.22) C<\b{gcb}>, C<\b{sb}>, C<\b{wb}>,
C<\B{gcb}>, C<\B{sb}>, and C<\B{wb}>.  All the C<\B{}> ones now match an empty
string; none of the C<\b{}> ones do.
L<[perl #126319]|https://rt.perl.org/Ticket/Display.html?id=126319>

=end original

(Perl 5.22 で導入された) 境界チェック構文 C<\b{gcb}>, C<\b{sb}>, C<\b{wb}>,
C<\B{gcb}>, C<\B{sb}>, C<\B{wb}> での、セグメンテーションフォルトを含む
いくつかのバグが修正されました。
全ての C<\B{}> で空文字列がマッチングするようになり、全ての C<\b{}> で
空文字列がマッチングしないようになりました。
L<[perl #126319]|https://rt.perl.org/Ticket/Display.html?id=126319>

=item *

=begin original

Duplicating a closed file handle for write no longer creates a
filename of the form F<GLOB(0xXXXXXXXX)>.  [perl #125115]

=end original

書き込み用の閉じたファイルハンドルを複製しても、もはや
F<GLOB(0xXXXXXXXX)> の形のファイル名を作らなくなりました。
[perl #125115]

=item *

=begin original

Warning fatality is now ignored when rewinding the stack.  This
prevents infinite recursion when the now fatal error also causes
rewinding of the stack.  [perl #123398]

=end original

警告の致命的エラー化は、スタックを巻き戻すときには無視されるようになりました。
これにより、致命的エラーがスタックを巻き戻すときの無限ループを防ぎます。
[perl #123398]

=item * 

=begin original

In perl v5.22.0, the logic changed when parsing a numeric parameter to the -C
option, such that the successfully parsed number was not saved as the option
value if it parsed to the end of the argument.  [perl #125381]

=end original

Perl 5.22.0 では、-C オプションへの数値引数をパースするときのロジックが
変更され、正しくパース出来た数値が引数の末尾としてパースされた場合、その値が
オプションの値として保存されていませんでした。
[perl #125381]

=item *

=begin original

The PadlistNAMES macro is an lvalue again.

=end original

PadlistNAMES マクロは再び左辺値になりました。

=item *

=begin original

Zero -DPERL_TRACE_OPS memory for sub-threads.

=end original

サブスレッドのために -DPERL_TRACE_OPS メモリを
Zero 初期化するようになりました。

=begin original

C<perl_clone_using()> was missing Zero init of PL_op_exec_cnt[].  This
caused sub-threads in threaded -DPERL_TRACE_OPS builds to spew exceedingly
large op-counts at destruct.  These counts would print %x as "ABABABAB",
clearly a mem-poison value.

=end original

C<perl_clone_using()> は PL_op_exec_cnt[] の Zero 初期化が抜けていました。
これにより、スレッド化 -DPERL_TRACE_OPS ビルドのサブスレッドが大きすぎる
op-counts を破壊時に出力していました。
これらのカウントは print %x すると "ABABABAB" という明らかに汚染されている
値が表示されます。

=item *

=begin original

A leak in the XS typemap caused one scalar to be leaked each time a C<FILE *>
or a C<PerlIO *> was C<OUTPUT:>ed or imported to Perl, since perl 5.000. These
particular typemap entries are thought to be extremely rarely used by XS
modules. [perl #124181]

=end original

perl 5.000 から、XS typemap でリークがありました; C<FILE *> や C<PerlIO *> が
C<OUTPUT:> されるか Perl にインポートされる度に一つのスカラが
リークしていました。
これらの特定の typemap エントリは XS モジュールで使われるのは極めて稀だと
考えられます。
[perl #124181]

=item *

=begin original

C<alarm()> and C<sleep()> will now warn if the argument is a negative number
and return undef. Previously they would pass the negative value to the
underlying C function which may have set up a timer with a surprising value.

=end original

C<alarm()> と C<sleep()> は、引数が負数で undef を返す場合に警告を
出すようになりました。
以前はこれらは負の値を基礎となる C 関数に渡していて、驚くべき値でタイマーを
設定することがありました。

=item *

=begin original

Perl can again be compiled with any Unicode version.  This used to
(mostly) work, but was lost in v5.18 through v5.20.  The property
C<Name_Alias> did not exist prior to Unicode 5.0.  L<Unicode::UCD>
incorrectly said it did.  This has been fixed.

=end original

Perl は再び全ての Unicode のバージョンでコンパイルできるようになりました。
これは(ほとんど)動作していましたが、v5.18 から v5.20 まで
動作していませんでした。
C<Name_Alias> 特性は Unicode 5.0 以前には存在していませんでした。
L<Unicode::UCD> では間違ってこれがあるとしていました。
これは修正されました。

=item *

=begin original

Very large code-points (beyond Unicode) in regular expressions no
longer cause a buffer overflow in some cases when converted to UTF-8.
L<[perl #125826]|https://rt.perl.org/Ticket/Display.html?id=125826>

=end original

正規表現中の(Unicode を越える)とても大きい符号位置は、UTF-8 に変換するときに
ときどきバッファオーバーフローを起こしていましたが、起こさなくなりました。
L<[perl #125826]|https://rt.perl.org/Ticket/Display.html?id=125826>

=item *

=begin original

The integer overflow check for the range operator (...) in list
context now correctly handles the case where the size of the range is
larger than the address space.  This could happen on 32-bits with
-Duse64bitint.
L<[perl #125781]|https://rt.perl.org/Ticket/Display.html?id=125781>

=end original

リストコンテキストの範囲演算子 (...) での整数オーバーフローチェックは、
範囲のサイズがアドレス空間よりも大きい場合を正しく扱えるようになりました。
これは 32 ビットでの -Duse64bitint で起こることがありました。
L<[perl #125781]|https://rt.perl.org/Ticket/Display.html?id=125781>

=item *

=begin original

A crash with C<< %::=(); J->${\"::"} >> has been fixed.
L<[perl #125541]|https://rt.perl.org/Ticket/Display.html?id=125541>

=end original

C<< %::=(); J->${\"::"} >> でのクラッシュは修正されました。
L<[perl #125541]|https://rt.perl.org/Ticket/Display.html?id=125541>

=item *

=begin original

C<qr/(?[ () ])/> no longer segfaults, giving a syntax error message instead.
[perl #125805]

=end original

C<qr/(?[ () ])/> はもはやセグメンテーションフォルトを起こさず、代わりに
文法エラーを出すようになりました。
[perl #125805]

=item *

=begin original

Regular expression possessive quantifier v5.20 regression now fixed.
C<qr/>I<PAT>C<{>I<min>,I<max>C<}+>C</> is supposed to behave identically
to C<qr/(?E<gt>>I<PAT>C<{>I<min>,I<max>C<})/>.  Since v5.20, this didn't
work if I<min> and I<max> were equal.  [perl #125825]

=end original

正規表現所有量指定子の Perl 5.20 での退行は修正されました。
C<qr/>I<PAT>C<{>I<min>,I<max>C<}+>C</> は
C<qr/(?E<gt>>I<PAT>C<{>I<min>,I<max>C<})/> と同じように振る舞うことが
想定されていました。
Perl 5.20 から、I<min> と I<max> が同じ場合は動作していませんでした。
[perl #125825]

=item *

=begin original

C<< BEGIN <> >> no longer segfaults and properly produces an error
message.  [perl #125341]

=end original

C<< BEGIN <> >> はもはやセグメンテーションフォルトを起こさず、適切に
エラーメッセージを出力するようになりました。
[perl #125341]

=item *

=begin original

In C<tr///> an illegal backwards range like C<tr/\x{101}-\x{100}//> was
not always detected, giving incorrect results.  This is now fixed.

=end original

C<tr///> で、C<tr/\x{101}-\x{100}//> のような不正な後方範囲が
検出できないことがあり、間違った結果になることがありました。
これは修正されました。

=back

=head1 Known Problems

(既知の問題)

=over 4

=item *

=begin original

Some modules have been broken by the L<context stack rework|/Internal Changes>.
These modules were relying on non-guaranteed implementation details in perl.
Their maintainers have been informed, and should contact perl5-porters for
advice if needed.  Below is a subset of these modules:

=end original

L<コンテキストスタックの再作業|/Internal Changes> によって一部のモジュールが
壊れています。
これらのモジュールは perl の中の保証されていない実装詳細に依存していました。
メンテナには連絡されていて、必要なら perl5-porters に連絡しています。
以下はこれらのモジュールの一部です:

=over 4

=item L<Algorithm::Permute>

=item L<Coro>

=begin original

L<Coro> and perl v5.22.0 were already incompatible due to a change in the perl,
and the reworking on the perl context stack creates a further incompatibility.
perl5-porters has L<discussed the issue on the mailing
list|http://www.nntp.perl.org/group/perl.perl5.porters/2016/05/msg236174.html>.

=end original

L<Coro> と perl v5.22.0 は perl の変更によって既に非互換でした; perl
コンテキストスタックの再作業によってさらに非互換になりました。
perl5-porters は L<メーリングリストでこの問題について議論しています
|http://www.nntp.perl.org/group/perl.perl5.porters/2016/05/msg236174.html>.

=item L<Data::Alias>

=item L<RPerl>

=item L<Scope::Upper>

=item L<TryCatch>

=back

=item *

=begin original

The module L<lexical::underscore> no longer works on perl v5.24.0, because perl
no longer has a lexical C<$_>!

=end original

L<lexical::underscore> モジュールはもはや perl v5.24.0 で動作しなくなりました;
なぜならもはや perl はレキシカルな C<$_> を持たないからです!

=item *

=begin original

C<mod_perl> has been patched for compatibility for v5.22.0 and later but no
release has been made.  The relevant patch (and other changes) can be found in
their source code repository, L<mirrored at
GitHub|https://github.com/apache/mod_perl/commit/82827132efd3c2e25cc413c85af61bb63375da6e>.

=end original

C<mod_perl> は v5.22.0 以降のためにパッチが当てられましたが、リリースは
されていません。
関連するパッチ (およびその他の変更) は
L<GitHub にミラーされている|https://github.com/apache/mod_perl/commit/82827132efd3c2e25cc413c85af61bb63375da6e>.
ソースコードレポジトリにあります。

=back

=head1 Acknowledgements

=begin original

Perl 5.24.0 represents approximately 11 months of development since Perl 5.22.0
and contains approximately 360,000 lines of changes across 1,800 files from 77
authors.

=end original

Perl 5.24.0 は、Perl 5.22.0 以降、77 人の作者によって、
1,800 のファイルに約 360,000 行の変更を加えて、
約 11 ヶ月開発されてきました。

=begin original

Excluding auto-generated files, documentation and release tools, there were
approximately 250,000 lines of changes to 1,200 .pm, .t, .c and .h files.

=end original

自動生成ファイル、文書、リリースツールを除くと、1,200 の .pm, .t, .c,
.h ファイルに約 250,000 行の変更を加えました。

=begin original

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers. The following people are known to have contributed the
improvements that became Perl 5.24.0:

=end original

Perl は、活気のあるユーザーと開発者のコミュニティのおかげで 20 年を超えて
繁栄しています。
以下の人々が、Perl 5.24.0 になるための改良に貢献したことが分かっています:

Aaron Crane, Aaron Priven, Abigail, Achim Gratz, Alexander DE<39>Archangel, Alex
Vandiver, Andreas KE<ouml>nig, Andy Broad, Andy Dougherty, Aristotle Pagaltzis,
Chase Whitener, Chas. Owens, Chris E<39>BinGOsE<39> Williams, Craig A. Berry, Dagfinn
Ilmari MannsE<aring>ker, Dan Collins, Daniel Dragan, David Golden, David Mitchell,
Dominic Hargreaves, Doug Bell, Dr.Ruud, Ed Avis, Ed J, Father Chrysostomos,
Herbert Breunung, H.Merijn Brand, Hugo van der Sanden, Ivan Pozdeev, James E
Keenan, Jan Dubois, Jarkko Hietaniemi, Jerry D. Hedden, Jim Cromie, John
Peacock, John SJ Anderson, Karen Etheridge, Karl Williamson, kmx, Leon
Timmermans, Ludovic E. R. Tolhurst-Cleaver, Lukas Mai, Martijn Lievaart,
Matthew Horsfall, Mattia Barbon, Max Maischein, Mohammed El-Afifi, Nicholas
Clark, Nicolas R., Niko Tyni, Peter John Acklam, Peter Martini, Peter
Rabbitson, Pip Cet, Rafael Garcia-Suarez, Reini Urban, Renee Baecker, Ricardo
Signes, Sawyer X, Shlomi Fish, Sisyphus, Stanislaw Pusep, Steffen ME<uuml>ller,
Stevan Little, Steve Hay, Sullivan Beck, Thomas Sibley, Todd Rinaldo, Tom
Hukins, Tony Cook, Unicode Consortium, Victor Adam, Vincent Pit, Vladimir
Timofeev, Yves Orton, Zachary Storer, Zefram.

=begin original

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

=end original

これはバージョンコントロール履歴から自動的に生成しているので、ほぼ確実に
不完全です。
特に、Perl バグトラッカーに問題を報告をしてくれた (とてもありがたい)貢献者の
名前を含んでいません。

=begin original

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

=end original

このバージョンに含まれている変更の多くは、Perl コアに含まれている CPAN
モジュール由来のものです。
私たちは Perl の発展を助けている CPAN コミュニティ全体に感謝します。

=begin original

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=end original

全ての Perl の歴史的な貢献者のより完全な一覧については、どうか Perl ソース
配布に含まれている F<AUTHORS> を参照してください。

=head1 Reporting Bugs

(バグ報告)

=begin original

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

=end original

もしバグと思われるものを見つけたら、comp.lang.perl.misc ニュースグループに
最近投稿された記事や https://rt.perl.org/ にある perl バグ
データベースを確認してください。
Perl ホームページ、http://www.perl.org/ にも情報があります。

=begin original

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

=end original

もしまだ報告されていないバグだと確信したら、そのリリースに含まれている
L<perlbug> プログラムを実行してください。
バグの再現スクリプトを十分小さく、しかし有効なコードに切りつめることを
意識してください。
バグレポートは C<perl -V> の出力と一緒に perlbug@perl.org に送られ
Perl porting チームによって解析されます。

=begin original

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=end original

報告しようとしているバグがセキュリティに関するもので、公開されている
メーリングリストに送るのが不適切なものなら、バグの報告方法の詳細について
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION> を参照してください。

=head1 SEE ALSO

=begin original

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

=end original

変更点の完全な詳細を見る方法については F<Changes> ファイル。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

Perl のビルド方法については F<INSTALL> ファイル。

=begin original

The F<README> file for general stuff.

=end original

一般的なことについては F<README> ファイル。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

著作権情報については F<Artistic> 及び F<Copying> ファイル。

=cut

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: completed

=end meta

