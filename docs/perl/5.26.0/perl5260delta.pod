
=encoding euc-jp

=head1 NAME

=begin original

perldelta - what is new for perl v5.26.0

=end original

perl5260delta - perl v5.26.0 での変更点

=head1 DESCRIPTION

=begin original

This document describes the differences between the 5.24.0 release and the
5.26.0 release.

=end original

この文書は 5.24.0 リリースと 5.26.0 リリースの変更点を記述しています。

=head1 Notice

(注意)

=begin original

This release includes three updates with widespread effects:

=end original

このリリースには広範囲に影響を与える三つの更新を含んでいます:

=over 4

=item * C<"."> no longer in C<@INC>

(C<"."> はもはや C<@INC> に含まれません)

=begin original

For security reasons, the current directory (C<".">) is no longer included
by default at the end of the module search path (C<@INC>). This may have
widespread implications for the building, testing and installing of
modules, and for the execution of scripts.  See the section
L<< Removal of the current directory (C<".">) from C<@INC> >>
for the full details.

=end original

セキュリティ上の理由により、カレントディレクトリ (C<".">) はもはや
デフォルトでモジュール検索パス (C<@INC>) の末尾に含まれなくなりました。
これはモジュールのビルド、テスト、インストールと、スクリプトの実行に
広範囲に関連するかもしれません。
完全な詳細については
L<< Removal of the current directory (C<".">) from C<@INC> >> の章を
参照してください。

=item * C<do> may now warn

(C<do> は警告を出すことがあるようになりました)

=begin original

C<do> now gives a deprecation warning when it fails to load a file which
it would have loaded had C<"."> been in C<@INC>.

=end original

C<do> は、C<@INC> に C<"."> があったときに読み込めていたファイルの読み込みに
失敗したときに廃止予定警告を出すようになりました。

=item * In regular expression patterns, a literal left brace C<"{">
should be escaped

(正規表現中では、リテラルな左中かっこ C<"{"> はエスケープする必要があります)

=begin original

See L</Unescaped literal C<"{"> characters in regular expression patterns are no longer permissible>.

=end original

L</Unescaped literal C<"{"> characters in regular expression patterns are no longer permissible> を
参照してください。

=back

=head1 Core Enhancements

(コアの拡張)

=head2 Lexical subroutines are no longer experimental

(レキシカルサブルーチンはもはや実験的ではなくなりました)

=begin original

Using the C<lexical_subs> feature introduced in v5.18 no longer emits a warning.  Existing
code that disables the C<experimental::lexical_subs> warning category
that the feature previously used will continue to work.  The
C<lexical_subs> feature has no effect; all Perl code can use lexical
subroutines, regardless of what feature declarations are in scope.

=end original

v5.18 で導入された C<lexical_subs> 機能はもはや警告を出さなくなりました。
以前使われていた機能の C<experimental::lexical_subs> 警告カテゴリを無効にした
コードはそのまま動作します。
C<lexical_subs> 機能はなんの効果もありません; 全ての Perl コードは、
スコープ内にどの機能宣言があるかどうかに関わらず、レキシカルサブルーチンを
使えます。

=head2 Indented Here-documents

(インデントされたヒヤドキュメント)

=begin original

This adds a new modifier C<"~"> to here-docs that tells the parser
that it should look for C</^\s*$DELIM\n/> as the closing delimiter.

=end original

ヒヤドキュメントに新しい修飾子 C<"~"> が追加されました; これはパーサに、
閉じ区切り文字として C</^\s*$DELIM\n/> を探すように伝えるものです。

=begin original

These syntaxes are all supported:

=end original

以下の文法全てに対応しています:

    <<~EOF;
    <<~\EOF;
    <<~'EOF';
    <<~"EOF";
    <<~`EOF`;
    <<~ 'EOF';
    <<~ "EOF";
    <<~ `EOF`;

=begin original

The C<"~"> modifier will strip, from each line in the here-doc, the
same whitespace that appears before the delimiter.

=end original

C<"~"> 修飾子は、ヒヤドキュメントの各行から区切り文字の前にあるのと同じ
空白を取り除きます。

=begin original

Newlines will be copied as-is, and lines that don't include the
proper beginning whitespace will cause perl to croak.

=end original

改行はそのままコピーされ、行の先頭に適切な空白を含んでいない場合は
perl は croak します。

=begin original

For example:

=end original

例えば:

    if (1) {
      print <<~EOF;
        Hello there
        EOF
    }

=begin original

prints "Hello there\n" with no leading whitespace.

=end original

これは先頭の空白なしで "Hello there\n" を表示します。

=head2 New regular expression modifier C</xx>

(新しい正規表現修飾子 C</xx>)

=begin original

Specifying two C<"x"> characters to modify a regular expression pattern
does everything that a single one does, but additionally TAB and SPACE
characters within a bracketed character class are generally ignored and
can be added to improve readability, like
S<C</[ ^ A-Z d-f p-x ]/xx>>.  Details are at
L<perlre/E<sol>x and E<sol>xx>.

=end original

正規表現を修正するために二つの C<"x"> 文字を指定すると、一つ指定したときの
全ての効果に加えて、大かっこ文字クラスの中の TAB と SPACE は一般的に
無視されるようになるので、次のように可読性を改善するためにこれらを
追加できるようになります:
S<C</[ ^ A-Z d-f p-x ]/xx>> 。
詳細は L<perlre/E<sol>x and E<sol>xx> にあります。

=head2 C<@{^CAPTURE}>, C<%{^CAPTURE}>, and C<%{^CAPTURE_ALL}>

(C<@{^CAPTURE}>, C<%{^CAPTURE}>, C<%{^CAPTURE_ALL}>)

=begin original

C<@{^CAPTURE}> exposes the capture buffers of the last match as an
array.  So C<$1> is C<${^CAPTURE}[0]>.  This is a more efficient equivalent
to code like C<substr($matched_string,$-[0],$+[0]-$-[0])>, and you don't
have to keep track of the C<$matched_string> either.  This variable has no
single character equivalent.  Note that, like the other regex magic variables,
the contents of this variable is dynamic; if you wish to store it beyond
the lifetime of the match you must copy it to another array.

=end original

C<@{^CAPTURE}> は最後のマッチングの捕捉バッファを配列として晒します。
つまり C<$1> は C<${^CAPTURE}[0]> です。
これは C<substr($matched_string,$-[0],$+[0]-$-[0])> のようなコードと
等価でより効果的で、どちらも C<$matched_string> を追跡する必要はありません。
この変数には一文字の等価なものはありません。
他の正規表現マジック変数と同様、この変数の内容は動的であることに
注意してください; マッチングの生存期間を超えて値を補完したい場合、
他の配列にコピーしなければなりません。

=begin original

C<%{^CAPTURE}> is equivalent to C<%+> (I<i.e.>, named captures).  Other than
being more self-documenting there is no difference between the two forms.

=end original

C<%{^CAPTURE}> は C<%+> (I<つまり>、名前付き捕捉) と等価です。
より自己説明的であることを覗いて二つの型式に違いはありません。

=begin original

C<%{^CAPTURE_ALL}> is equivalent to C<%-> (I<i.e.>, all named captures).
Other than being more self-documenting there is no difference between the
two forms.

=end original

C<%{^CAPTURE_ALL}> は C<%-> (I<つまり>、全ての名前付き捕捉) と等価です。
より自己説明的であることを覗いて二つの型式に違いはありません。

=head2 Declaring a reference to a variable

(変数へのリファレンスの宣言)

=begin original

As an experimental feature, Perl now allows the referencing operator to come
after L<C<my()>|perlfunc/my>, L<C<state()>|perlfunc/state>,
L<C<our()>|perlfunc/our>, or L<C<local()>|perlfunc/local>.  This syntax must
be enabled with C<use feature 'declared_refs'>.  It is experimental, and will
warn by default unless C<no warnings 'experimental::refaliasing'> is in effect.
It is intended mainly for use in assignments to references.  For example:

=end original

実験的機能として、Perl は L<C<my()>|perlfunc/my>,
L<C<state()>|perlfunc/state>, L<C<our()>|perlfunc/our>,
L<C<local()>|perlfunc/local> の後にリファレンス演算子を許すようになりました。
この文法は C<use feature 'declared_refs'> で有効にされなければなりません。
これは実験的で、C<no warnings 'experimental::refaliasing'> が有効でない限り、
デフォルトで警告が出ます。
これは主にリファレンスへの代入に使うことを意図しています。
例えば:

    use experimental 'refaliasing', 'declared_refs';
    my \$a = \$b;

=begin original

See L<perlref/Assigning to References> for more details.

=end original

より詳しくは L<perlref/Assigning to References> を参照してください。

=head2 Unicode 9.0 is now supported

(Unicode 9.0 に対応しました)

=begin original

A list of changes is at L<http://www.unicode.org/versions/Unicode9.0.0/>.
Modules that are shipped with core Perl but not maintained by p5p do not
necessarily support Unicode 9.0.  L<Unicode::Normalize> does work on 9.0.

=end original

変更の一覧は L<http://www.unicode.org/versions/Unicode9.0.0/> にあります。
コア Perl と共に出荷されているけれども p5p によって保守されていない
モジュールは必ずしも Unicode 9.0 に対応しているとは限りません。
L<Unicode::Normalize> は 9.0 で動作します。

=head2 Use of C<\p{I<script>}> uses the improved Script_Extensions property

(C<\p{I<script>}> を使うと改良された Script_Extensions 特性を使います)

=begin original

Unicode 6.0 introduced an improved form of the Script (C<sc>) property, and
called it Script_Extensions (C<scx>).  Perl now uses this improved
version when a property is specified as just C<\p{I<script>}>.  This
should make programs more accurate when determining if a character is
used in a given script, but there is a slight chance of breakage for
programs that very specifically needed the old behavior.  The meaning of
compound forms, like C<\p{sc=I<script>}> are unchanged.  See
L<perlunicode/Scripts>.

=end original

Unicode 6.0 は Script (C<sc>) 特性の改良された型式を導入しました;
これは Script_Extensions (C<scx>) と呼ばれます。
Perl は、特性を単に C<\p{I<script>}> として指定された場合はこの
改良版を使うようになりました。
これにより、ある文字が特定の用字で使われているかを判定するプログラムが
より正確になるはずですが、特に具体的に古い振る舞いが必要なプログラムを
壊す可能性が僅かにあります。
C<\p{sc=I<script>}> のような複合形式の意味は変わりません。
L<perlunicode/Scripts> を参照してください。

=head2 Perl can now do default collation in UTF-8 locales on platforms
that support it

(Perl は、対応しているプラットフォームでは UTF-8 ロケールのデフォルト照合を使うようになりました)

=begin original

Some platforms natively do a reasonable job of collating and sorting in
UTF-8 locales.  Perl now works with those.  For portability and full
control, L<Unicode::Collate> is still recommended, but now you may
not need to do anything special to get good-enough results, depending on
your application.  See
L<perllocale/Category C<LC_COLLATE>: Collation: Text Comparisons and Sorting>.

=end original

一部のプラットフォームでは UTF-8 ロケールでの照合とソートにおいて
妥当な仕事をしています。
Perl はこれらで動作するようになりました。
移植性と完全な制御のために、L<Unicode::Collate> がまだ推奨されますが、
アプリケーションによっては、十分によい結果を得るために何も特別なことを
する必要がなくなったかもしれません。
L<perllocale/Category C<LC_COLLATE>: Collation: Text Comparisons and Sorting>
を参照してください。

=head2 Better locale collation of strings containing embedded C<NUL>
characters

(埋め込みの C<NUL> 文字を含む文字列に対するよりよいロケール照合)

=begin original

In locales that have multi-level character weights, C<NUL>s are now
ignored at the higher priority ones.  There are still some gotchas in
some strings, though.  See
L<perllocale/Collation of strings containing embedded C<NUL> characters>.

=end original

複数レベルの文字ウェイトを持つロケールでは、C<NUL> はより高い優先順位の
ものでは無視されるようになりました。
しかし、一部の文字列ではまだいくつかのこつがあります。
L<perllocale/Collation of strings containing embedded C<NUL> characters> を
参照してください。

=head2 C<CORE> subroutines for hash and array functions callable via
reference

(ハッシュと配列の関数のための C<CORE> サブルーチンはリファレンス経由で呼び出せるようになりました)

=begin original

The hash and array functions in the C<CORE> namespace (C<keys>, C<each>,
C<values>, C<push>, C<pop>, C<shift>, C<unshift> and C<splice>) can now
be called with ampersand syntax (C<&CORE::keys(\%hash>) and via reference
(C<< my $k = \&CORE::keys; $k-E<gt>(\%hash) >>).  Previously they could only be
used when inlined.

=end original

C<CORE> 名前空間でのハッシュと配列の関数 (C<keys>, C<each>,
C<values>, C<push>, C<pop>, C<shift>, C<unshift>, C<splice>) は
アンパサンド文法 (C<&CORE::keys(\%hash>) とリファレンス経由
(C<< my $k = \&CORE::keys; $k-E<gt>(\%hash) >>) で呼び出せるようになりました。
以前はインライン化される場合にのみ可能でした。

=head2 New Hash Function For 64-bit Builds

(64 ビットビルドのための新しいハッシュ関数)

=begin original

We have switched to a hybrid hash function to better balance
performance for short and long keys.

=end original

短いキーと長いキーのより良いバランスの性能のために複合ハッシュ関数に
切り替えました。

=begin original

For short keys, 16 bytes and under, we use an optimised variant of
One At A Time Hard, and for longer keys we use Siphash 1-3.  For very
long keys this is a big improvement in performance.  For shorter keys
there is a modest improvement.

=end original

16 バイト以下の短いキーでは、最適化版の One At A Time Hard を使い、
より長いキーでは Siphash 1-3 を使います。
すごく長いキーの場合、これは性能が大きく改善します。
より短いキーではこれは緩やかな改善です。

=head1 Security

(セキュリティ)

=head2 Removal of the current directory (C<".">) from C<@INC>

(C<@INC> からの現在のディレクトリ (C<".">) の除去)

=begin original

The perl binary includes a default set of paths in C<@INC>.  Historically
it has also included the current directory (C<".">) as the final entry,
unless run with taint mode enabled (C<perl -T>).  While convenient, this has
security implications: for example, where a script attempts to load an
optional module when its current directory is untrusted (such as F</tmp>),
it could load and execute code from under that directory.

=end original

perl バイナリは C<@INC> にパスのデフォルト集合を含んでいます。
歴史的に、汚染モード (C<perl -T>) が有効でない限り、最終的なエントリとして
カレントディレクトリ (C<".">) も含んでいました。
これは便利ですが、セキュリティ上の問題がありました: 例えば、
カレントディレクトリが(F</tmp> のように)信頼できない場合、
スクリプトが追加のモジュールを読み込もうとすると、そのディレクトリの下から
コードを読み込んで実行する可能性があります。

=begin original

Starting with v5.26, C<"."> is always removed by default, not just under
tainting.  This has major implications for installing modules and executing
scripts.

=end original

v5.26 から、C<"."> は汚染モードの場合だけではなく、常にデフォルトで
除去されるようになりました。
これはモジュールのインストールとスクリプトの実行に大きな影響を与えます。

=begin original

The following new features have been added to help ameliorate these
issues.

=end original

これらの問題を改善するために、以下の新しい機能が追加されました。

=over

=item * F<Configure -Udefault_inc_excludes_dot>

=begin original

There is a new F<Configure> option, C<default_inc_excludes_dot> (enabled
by default) which builds a perl executable without C<".">; unsetting this
option using C<-U> reverts perl to the old behaviour.  This may fix your
path issues but will reintroduce all the security concerns, so don't
build a perl executable like this unless you're I<really> confident that
such issues are not a concern in your environment.

=end original

C<"."> なしで perl 実行ファイルをビルドするための
新しい F<Configure> オプションである C<default_inc_excludes_dot>
(デフォルトで有効) があります; C<-U> を使ってアンセットすることで
perl は古い振る舞いに戻ります。
これはあなたのパスの問題を修正するかもしれませんが、全てのセキュリティ問題が
再導入されるので、このような問題があなたの環境で問題にならないと言うことに
I<本当に> 自信がない限りこのような perl 実行ファイルをビルドしないでください。

=item * C<PERL_USE_UNSAFE_INC>

=begin original

There is a new environment variable recognised by the perl interpreter.
If this variable has the value 1 when the perl interpreter starts up,
then C<"."> will be automatically appended to C<@INC> (except under tainting).

=end original

これは perl インタプリタによって認識される新しい環境変数です。
perl インタプリタの起動時にこの値が 1 なら、(汚染モードでない限り)
C<"."> が自動的に C<@INC> に追加されます。

=begin original

This allows you restore the old perl interpreter behaviour on a
case-by-case basis.  But note that this is intended to be a temporary crutch,
and this feature will likely be removed in some future perl version.
It is currently set by the C<cpan> utility and C<Test::Harness> to
ease installation of CPAN modules which have not been updated to handle the
lack of dot.  Once again, don't use this unless you are sure that this
will not reintroduce any security concerns.

=end original

これにより、場合毎に古い perl インタプリタの振る舞いを復元できます。
これは一時的な補助を意図しており、この機能はおそらく将来の perl バージョンで
削除されることに注意してください。
ドットがない状態を扱えるようにまだ更新されていない CPAN モジュールの
インストールを容易にするために、これは現在のところ
C<cpan> ユーティリティと C<Test::Harness> によって設定されています。
再び、これによりセキュリティ問題が再導入されないことに自信がない限り
これを使わないでください。

=item * A new deprecation warning issued by C<do>.

(C<do> によって出力される廃止予定警告。)

=begin original

While it is well-known that C<use> and C<require> use C<@INC> to search
for the file to load, many people don't realise that C<do "file"> also
searches C<@INC> if the file is a relative path.  With the removal of C<".">,
a simple C<do "file.pl"> will fail to read in and execute C<file.pl> from
the current directory.  Since this is commonly expected behaviour, a new
deprecation warning is now issued whenever C<do> fails to load a file which
it otherwise would have found if a dot had been in C<@INC>.

=end original

C<use> と C<require> がファイルの読み込みに C<@INC> を使うことは
よく知られていますが、多くの人々は、C<do "file"> もファイルが相対パスの場合は
C<@INC> を探すことに気付いていません。
C<"."> の除去によって、単に C<do "file.pl"> とすると、
現在のディレクトリから C<file.pl> を読み込んで実行するのに失敗します。
これは一般的に想定された振る舞いなので、
C<@INC> にドットが含まれていれば見つかるファイルの読み込みに C<do> が
失敗した場合に新しい廃止予定警告が出力されるようになりました。

=back

=begin original

Here are some things script and module authors may need to do to make
their software work in the new regime.

=end original

新しい型式でソフトウェアが動作するために、スクリプトやモジュールの作者が
する必要があるかもしれないことがいくつかあります。

=over

=item * Script authors

(スクリプト作者)

=begin original

If the issue is within your own code (rather than within included
modules), then you have two main options.  Firstly, if you are confident
that your script will only be run within a trusted directory (under which
you expect to find trusted files and modules), then add C<"."> back into the
path; I<e.g.>:

=end original

もし(インクルードしたモジュールの中ではなく)自分自身のコードの中でこれが
問題になるなら、主に二つの選択肢があります。
最初に、あなたのスクリプトが (信頼できるファイルとモジュールが
発見できることが想定される)信頼できるディレクトリの中でのみ実行されるという
自信があるなら、パスに C<"."> を追加します;
I<例えば>:

    BEGIN {
        my $dir = "/some/trusted/directory";
        chdir $dir or die "Can't chdir to $dir: $!\n";
        # safe now
        push @INC, '.';
    }

    use "Foo::Bar"; # may load /some/trusted/directory/Foo/Bar.pm
    do "config.pl"; # may load /some/trusted/directory/config.pl

=begin original

On the other hand, if your script is intended to be run from within
untrusted directories (such as F</tmp>), then your script suddenly failing
to load files may be indicative of a security issue.  You most likely want
to replace any relative paths with full paths; for example,

=end original

一方、あなたのスクリプトが (F</tmp> のような) 信頼できないディレクトリの
中で実行されることを意図しているなら、突然ファイルの読み込みに
失敗するようになったのはセキュリティ問題があることを
意味しているかもしれません。
おそらく全ての相対パスをフルパスで置換した方がよいでしょう; 例えば:

    do "foo_config.pl"

=begin original

might become

=end original

というのは以下のようにします

    do "$ENV{HOME}/foo_config.pl"

=begin original

If you are absolutely certain that you want your script to load and
execute a file from the current directory, then use a C<./> prefix; for
example:

=end original

スクリプトの読み込みとファイルの実行を現在のディレクトリから
読み込みたいということが完全に確実なら、C<./> 接頭辞を使ってください;
例えば:

    do "./foo_config.pl"

=item * Installing and using CPAN modules

(CPAN モジュールをインストールして使う)

=begin original

If you install a CPAN module using an automatic tool like C<cpan>, then
this tool will itself set the C<PERL_USE_UNSAFE_INC> environment variable
while building and testing the module, which may be sufficient to install
a distribution which hasn't been updated to be dot-aware.  If you want to
install such a module manually, then you'll need to replace the
traditional invocation:

=end original

C<cpan> のような自動化ツールを使って CPAN モジュールをインストールする場合、
このツールはモジュールのビルドとテストの間は
自分自身で C<PERL_USE_UNSAFE_INC> 環境変数を設定します;
ドットを認識するように更新されていないディストリビューションを
インストールするにはこれで十分でしょう。
もしこのようなモジュールを手動でインストールしたい場合、
次のような伝統的な起動法を置き換える必要があります:

    perl Makefile.PL && make && make test && make install

=begin original

with something like

=end original

というのは以下のようにします

    (export PERL_USE_UNSAFE_INC=1; \
     perl Makefile.PL && make && make test && make install)

=begin original

Note that this only helps build and install an unfixed module.  It's
possible for the tests to pass (since they were run under
C<PERL_USE_UNSAFE_INC=1>), but for the module itself to fail to perform
correctly in production.  In this case, you may have to temporarily modify
your script until a fixed version of the module is released.
For example:

=end original

これは未修正のモジュールのビルドとインストールにのみ助けになることに
注意してください。
(C<PERL_USE_UNSAFE_INC=1> の基で実行されることになるので)
これでテストがパスするようになりますが、モジュール自身の製品版は
正しく動作するのに失敗します。
この場合、修正版のモジュールがリリースされるまでスクリプトを一時的に
修正する必要があるかもしれません。
例えば:

    use Foo::Bar;
    {
        local @INC = (@INC, '.');
        # assuming read_config() needs '.' in @INC
        $config = Foo::Bar->read_config();
    }

=begin original

This is only rarely expected to be necessary.  Again, if doing this,
assess the resultant risks first.

=end original

これが必要な場合はとても稀です。
再び、これをする場合は、結果のリスクをまず考えてください。

=item * Module Authors

(モジュール作者)

=begin original

If you maintain a CPAN distribution, it may need updating to run in
a dotless environment.  Although C<cpan> and other such tools will
currently set the C<PERL_USE_UNSAFE_INC> during module build, this is a
temporary workaround for the set of modules which rely on C<"."> being in
C<@INC> for installation and testing, and this may mask deeper issues.  It
could result in a module which passes tests and installs, but which
fails at run time.

=end original

あなたが CPAN ディストリビューションを保守している場合、ドットなし環境で
実行するように更新する必要があるかもしれません。
C<cpan> やその他の同様のツールは現在のところモジュールビルド中に
C<PERL_USE_UNSAFE_INC> を設定しますが、
インストールとテスト時に C<@INC> に C<"."> があることに依存している
モジュールに対する一時的な回避手段であり、より深い問題を
隠してしまうかもしれません。
モジュールがテストとインストールには成功するけれども、実行時に
失敗することになる可能性があります。

=begin original

During build, test, and install, it will normally be the case that any perl
processes will be executing directly within the root directory of the
untarred distribution, or a known subdirectory of that, such as F<t/>.  It
may well be that F<Makefile.PL> or F<t/foo.t> will attempt to include
local modules and configuration files using their direct relative
filenames, which will now fail.

=end original

ビルド、テスト、インストールの間、あらゆる perl の処理は
tar 展開されたディストリビューションのルートディレクトリの中か、
F<t/> のような既知のサブディレクトリの中で直接実行されるというのは
通常真実です。
F<Makefile.PL> や F<t/foo.t> がこのような直接相対ファイル名を使って
ローカルなモジュールや設定ファイルを読み込もうとすると失敗します。

=begin original

However, as described above, automatic tools like F<cpan> will (for now)
set the C<PERL_USE_UNSAFE_INC> environment variable, which introduces
dot during a build.

=end original

しかし、前述したように、F<cpan> のような自動化ツールは (今のところ)
C<PERL_USE_UNSAFE_INC> 環境変数を設定するので、ビルド中ドットが
導入されます。

=begin original

This makes it likely that your existing build and test code will work, but
this may mask issues with your code which only manifest when used after
install.  It is prudent to try and run your build process with that
variable explicitly disabled:

=end original

これによりおそらくあなたの既存のビルド及びテストコードは動作しますが、
これはあなたのコードにある、インストール後使うときのみに明らかになる
問題を隠蔽するかもしれません。
慎重に行くなら、この変数を明示的に無効にしてビルドプロセスを試します:

    (export PERL_USE_UNSAFE_INC=0; \
     perl Makefile.PL && make && make test && make install)

=begin original

This is more likely to show up any potential problems with your module's
build process, or even with the module itself.  Fixing such issues will
ensure both that your module can again be installed manually, and that
it will still build once the C<PERL_USE_UNSAFE_INC> crutch goes away.

=end original

これはおそらく、あなたのモジュールのビルドプロセスや、モジュール自身の
潜在的な問題を明らかにします。
このような問題を修正したあと、モジュールが再び手動でインストール出来ることと、
C<PERL_USE_UNSAFE_INC> の補助がなくなってもまだビルドできることを確認します。

=begin original

When fixing issues in tests due to the removal of dot from C<@INC>,
reinsertion of dot into C<@INC> should be performed with caution, for this
too may suppress real errors in your runtime code.  You are encouraged
wherever possible to apply the aforementioned approaches with explicit
absolute/relative paths, or to relocate your needed files into a
subdirectory and insert that subdirectory into C<@INC> instead.

=end original

C<@INC> からドットが除去されたことによるテストの問題を修正するとき、
C<@INC> にドットを再挿入するのは慎重に行うべきです、
これも実行時コードの実際の問題を抑制するかもしれないからです。
可能な限り、明示的な絶対/相対パスを使うという前述した手法を適用するか、
必要なファイルをサブディレクトリに再配置して、代わりに
そのサブディレクトリを C<@INC> に追加することを勧めます。

=begin original

If your runtime code has problems under the dotless C<@INC>, then the comments
above on how to fix for script authors will mostly apply here too.  Bear in
mind though that it is considered bad form for a module to globally add a dot to
C<@INC>, since it introduces both a security risk and hides issues of
accidentally requiring dot in C<@INC>, as explained above.

=end original

もしあなたのランタイムコードがドットなしの C<@INC> で問題があるなら、
前述したスクリプト作者のための修正方法のコメントを普通はここでも適用します。
しかし、モジュールにとってグローバルに C<@INC> にドットを追加するのは
悪い型式であると言うことを心に留めてください; これは前述したように、
セキュリティリスクおよび間違って C<@INC> にドットを要求しているという
問題を隠蔽するからです。

=back

=head2 Escaped colons and relative paths in PATH

(PATHの中のエスケープされたコロンと相対パス)

=begin original

On Unix systems, Perl treats any relative paths in the C<PATH> environment
variable as tainted when starting a new process.  Previously, it was
allowing a backslash to escape a colon (unlike the OS), consequently
allowing relative paths to be considered safe if the PATH was set to
something like C</\:.>.  The check has been fixed to treat C<"."> as tainted
in that example.

=end original

Unix システムでは、Perl は新しいプロセスが開始するときに C<PATH> 環境変数の
全ての相対パスを汚染されているものとして扱います。
以前は、(OS と違って) コロンを逆スラッシュでエスケープすることができ、
結果として PATH に C</\:.> のようなものが設定されている場合に
相対パスを安全なものとして扱うことができました。
このチェックは修正され、この例では C<"."> を汚染されているものとして
扱うようになりました。

=head2 New C<-Di> switch is now required for PerlIO debugging output

(PerlIO デバッグ出力には新しい C<-Di> オプションが必要になりました)

=begin original

This is used for debugging of code within PerlIO to avoid recursive
calls.  Previously this output would be sent to the file specified
by the C<PERLIO_DEBUG> environment variable if perl wasn't running
setuid and the C<-T> or C<-t> switches hadn't been parsed yet.

=end original

これは再帰呼び出しを避けるために PerlIO の中のコードをデバッグするために
使われています。
以前は、perl が setuid 付きで実行されておらず、C<-T> or C<-t> オプションが
まだパースされていない場合は、この出力は C<PERLIO_DEBUG> 環境変数で
指定されたファイルに送られていました。

=begin original

If perl performed output at a point where it hadn't yet parsed its
switches this could result in perl creating or overwriting the file
named by C<PERLIO_DEBUG> even when the C<-T> switch had been supplied.

=end original

まだこのオプションがパースされていない時点で perl が出力を行うとき、
これにより、たとえ C<-T> オプションが指定されていても、perl が
C<PERLIO_DEBUG> の名前のファイルを作ったり上書きすることがありました。

=begin original

Perl now requires the C<-Di> switch to be present before it will produce
PerlIO debugging
output.  By default this is written to C<stderr>, but can optionally
be redirected to a file by setting the C<PERLIO_DEBUG> environment
variable.

=end original

Perl は PerlIO デバッグ出力を行う前に C<-Di> オプションがあることを
要求するようになりました。
デフォルトではこれは C<stderr> に書き込まれますが、
オプションとして C<PERLIO_DEBUG> 環境変数を設定することでファイルに
リダイレクトすることができます。

=begin original

If perl is running setuid or the C<-T> switch was supplied,
C<PERLIO_DEBUG> is ignored and the debugging output is sent to
C<stderr> as for any other C<-D> switch.

=end original

perl が setuid 付きで実行されているか C<-T> オプションが指定されている場合、
C<PERLIO_DEBUG> は無視されて、デバッグ出力はその他の C<-D> オプションと同様
C<stderr> に送られます。

=head1 Incompatible Changes

(互換性のない変更)

=head2 Unescaped literal C<"{"> characters in regular expression
patterns are no longer permissible

(正規表現中のエスケープされていないリテラルの C<"{"> 文字はもはや許されなくなりました)

=begin original

You have to now say something like C<"\{"> or C<"[{]"> to specify to
match a LEFT CURLY BRACKET; otherwise, it is a fatal pattern compilation
error.  This change will allow future extensions to the language.

=end original

LEFT CURLY BRACKET にマッチングするためには C<"\{"> や C<"[{]"> のように
指定する必要があるようになりました;
さもなければ、致命的なパターンコンパイルエラーとなります。
この変更により、将来の言語拡張を可能にします。

=begin original

These have been deprecated since v5.16, with a deprecation message
raised for some uses starting in v5.22.  Unfortunately, the code added
to raise the message was buggy and failed to warn in some cases where
it should have.  Therefore, enforcement of this ban for these cases is
deferred until Perl 5.30, but the code has been fixed to raise a
default-on deprecation message for them in the meantime.

=end original

これらは v5.16 から廃止予定で、一部の使用法では v5.22 から廃止予定
メッセージが発生していました。
残念ながら、メッセージを発生されるために追加されたコードにはバグがあり、
警告するべき場合の一部で警告できていませんでした。
従って、これらの場合のこの廃止の強制は Perl 5.30 まで延期されますが、
このようなコードはデフォルトでオンの廃止予定メッセージが出力されるように
修正されました。

=begin original

Some uses of literal C<"{"> occur in contexts where we do not foresee
the meaning ever being anything but the literal, such as the very first
character in the pattern, or after a C<"|"> meaning alternation.  Thus

=end original

パターンの先頭の文字や、代替を意味する C<"|"> の直後のような、
リテラルとして以外の意味を予測することができない位置でのリテラルな
C<"{"> の使用も起こります。
従って

 qr/{fee|{fie/

=begin original

matches either of the strings C<{fee> or C<{fie>.  To avoid forcing
unnecessary code changes, these uses do not need to be escaped, and no
warning is raised about them, and there are no current plans to change this.

=end original

というのは C<{fee> と C<{fie> のどちらかの文字列にマッチングします。
不必要なコード変更の強制を避けるために、これらの使用法では
エスケープする必要はなく、これらに関する警告は発生せず、
現在これを変更する予定はありません。

=begin original

But it is always correct to escape C<"{">, and the simple rule to
remember is to always do so.

=end original

しかし、C<"{"> をエスケープするのは常に正しく、覚えておくべき単純な規則は、
常にそうすることです。

=begin original

See L<Unescaped left brace in regex is illegal here|perldiag/Unescaped left brace in regex is illegal here in regex; marked by S<E<lt>-- HERE> in mE<sol>%sE<sol>>.

=end original

L<Unescaped left brace in regex is illegal here|perldiag/Unescaped left brace in regex is illegal here in regex; marked by S<E<lt>-- HERE> in mE<sol>%sE<sol>> を
参照してください。

=head2 C<scalar(%hash)> return signature changed

(C<scalar(%hash)> 返り値シグネチャの変更)

=begin original

The value returned for C<scalar(%hash)> will no longer show information about
the buckets allocated in the hash.  It will simply return the count of used
keys.  It is thus equivalent to C<0+keys(%hash)>.

=end original

C<scalar(%hash)> の返り値はもはやハッシュで割り当てられたバケツに関する
情報ではなくなりました。
これは単に使ったキーのカウントを返します。
従ってこれは C<0+keys(%hash)> と等価です。

=begin original

A form of backward compatibility is provided via
L<C<Hash::Util::bucket_ratio()>|Hash::Util/bucket_ratio> which provides
the same behavior as
C<scalar(%hash)> provided in Perl 5.24 and earlier.

=end original

後方互換性の型式は、Perl 5.24 以前のが提供する C<scalar(%hash)> と
同じ振る舞いを提供する
L<C<Hash::Util::bucket_ratio()>|Hash::Util/bucket_ratio> 経由で提供されます。

=head2 C<keys> returned from an lvalue subroutine

(左辺値サブルーチンから返される C<keys>)

=begin original

C<keys> returned from an lvalue subroutine can no longer be assigned
to in list context.

=end original

左辺値サブルーチンから返される C<keys> はリストコンテキストでは
代入されなくなりました。

    sub foo : lvalue { keys(%INC) }
    (foo) = 3; # death
    sub bar : lvalue { keys(@_) }
    (bar) = 3; # also an error

=begin original

This makes the lvalue sub case consistent with C<(keys %hash) = ...> and
C<(keys @_) = ...>, which are also errors.
L<[perl #128187]|https://rt.perl.org/Public/Bug/Display.html?id=128187>

=end original

これにより、左辺値サブルーチンの場合は、
同様にエラーである C<(keys %hash) = ...> や C<(keys @_) = ...> と
一貫性を持つようになりました。
L<[perl #128187]|https://rt.perl.org/Public/Bug/Display.html?id=128187>

=head2 The C<${^ENCODING}> facility has been removed

(C<${^ENCODING}> 機能は除去されました)

=begin original

The special behaviour associated with assigning a value to this variable
has been removed.  As a consequence, the L<encoding> pragma's default mode
is no longer supported.  If
you still need to write your source code in encodings other than UTF-8, use a
source filter such as L<Filter::Encoding> on CPAN or L<encoding>'s C<Filter>
option.

=end original

この変数へ値を代入することと関連付けられている特別な振る舞いは除去されました。
結果として、L<encoding> プラグマのデフォルトモードはもはやサポートされません。
まだ UTF-8 以外のエンコーディングでソースコードを書く必要がある場合は、
CPAN の L<Filter::Encoding> や L<encoding> の C<Filter> のような
ソースフィルタを使ってください。

=head2 C<POSIX::tmpnam()> has been removed

(C<POSIX::tmpnam()> は除去されました)

=begin original

The fundamentally unsafe C<tmpnam()> interface was deprecated in
Perl 5.22 and has now been removed.  In its place, you can use,
for example, the L<File::Temp> interfaces.

=end original

基本的に安全でない C<tmpnam()> インターフェースは Perl 5.22 で廃止予定に
なりましたが、今回除去されました。
このような場合、例えば、L<File::Temp> インターフェースを使えます。

=head2 require ::Foo::Bar is now illegal.

(require ::Foo::Bar は不正になりました。)

=begin original

Formerly, C<require ::Foo::Bar> would try to read F</Foo/Bar.pm>.  Now any
bareword require which starts with a double colon dies instead.

=end original

以前は、C<require ::Foo::Bar> は F</Foo/Bar.pm> を読み込もうとしていました。
コロン二つで始まる裸の単語の require は全て die するようになりました。

=head2 Literal control character variable names are no longer permissible

(リテラル制御文字変数名はもはや許されなくなりました)

=begin original

A variable name may no longer contain a literal control character under
any circumstances.  These previously were allowed in single-character
names on ASCII platforms, but have been deprecated there since Perl
5.20.  This affects things like C<$I<\cT>>, where I<\cT> is a literal
control (such as a C<NAK> or C<NEGATIVE ACKNOWLEDGE> character) in the
source code.

=end original

変数名には、どのような場合でもリテラル名制御文字を含むことは
できなくなりました。
以前は ASCII プラットフォームでの 1 文字名は許されていましたが、
Perl 5.20 から廃止予定でした。
これは C<$I<\cT>> のようなもの (I<\cT> はソースコード中のリテラルな
制御文字 (C<NAK> や C<NEGATIVE ACKNOWLEDGE> 文字)) に影響します。

=head2 C<NBSP> is no longer permissible in C<\N{...}>

(C<\N{...}> 内での C<NBSP> はもはや許されなくなりました)

=begin original

The name of a character may no longer contain non-breaking spaces.  It
has been deprecated to do so since Perl 5.22.

=end original

文字の名前にはもはやノンブレークスペースを含むことができなくなりました。
これは Perl 5.22 から廃止予定になっていました。

=head1 Deprecations

(廃止予定)

=head2 String delimiters that aren't stand-alone graphemes are now deprecated

(単体書記素でない文字列区切り文字は廃止予定になりました)

=begin original

For Perl to eventually allow string delimiters to be Unicode
grapheme clusters (which look like a single character, but may be
a sequence of several ones), we have to stop allowing a single character
delimiter that isn't a grapheme by itself.  These are unlikely to exist
in actual code, as they would typically display as attached to the
character in front of them.

=end original

Perl が最終的に書記素クラスタ (単一の文字のように見えるけれども複数の文字の
並びであるもの) を文字列区切りとして認めるようになるためには、
それ自身が書記素でない単一区切り文字を許すのを止める必要がありました。
これらは実際のコードではありそうにありません; これらは典型的には
ある文字の前に付いているものだからです。

=head2 C<\cI<X>> that maps to a printable is no longer deprecated

(表示可能文字にマッピングされる C<\cI<X>> はもはや廃止予定ではなくなりました)

=begin original

This means we have no plans to remove this feature.  It still raises a
warning, but only if syntax warnings are enabled.  The feature was
originally intended to be a way to express non-printable characters that
don't have a mnemonic (C<\t> and C<\n> are mnemonics for two
non-printable characters, but most non-printables don't have a
mnemonic.)  But the feature can be used to specify a few printable
characters, though those are more clearly expressed as the printable
itself.  See
L<http://www.nntp.perl.org/group/perl.perl5.porters/2017/02/msg242944.html>.

=end original

つまり、この機能を除去する予定はありません。
これはまだ警告を出しますが、文法警告が有効の場合のみです。
この機能は元々ニーモニックを持たない非表示文字を表現するための方法を
意図していました  (C<\t> と C<\n> は二つの非表示文字のための
ニーモニックでしたが、ほとんどの非表示文字にはニーモニックがありません)。
しかし、この機能はより明らかに、いくつかの表示可能な文字を指定するために
使われています;
L<http://www.nntp.perl.org/group/perl.perl5.porters/2017/02/msg242944.html>
を参照してください。

=head1 Performance Enhancements

(性能改善)

=over 4

=item *

=begin original

A hash in boolean context is now sometimes faster, I<e.g.>

=end original

ブール値コンテキストでのハッシュは時々より早くなりました; I<例えば>

    if (!%h) { ... }

=begin original

This was already special-cased, but some cases were missed (such as
C<grep %$_, @AoH>), and even the ones which weren't have been improved.

=end original

これは既に特別扱いしていましたが、C<grep %$_, @AoH> のような) 一部の場合が
漏れていました;
以前は特別扱いしていなかった場合も改善されました。

=item * New Faster Hash Function on 64 bit builds

(64 ビットビルドでの新しいより良いハッシュ関数)

=begin original

We use a different hash function for short and long keys.  This should
improve performance and security, especially for long keys.

=end original

短いキーと長いキーで異なるハッシュ関数を使います。
これにより性能とセキュリティが、特に長いキーで改善するはずです。

=item * readline is faster

(readline はより速くなりました)

=begin original

Reading from a file line-by-line with C<readline()> or C<< E<lt>E<gt> >> should
now typically be faster due to a better implementation of the code that
searches for the next newline character.

=end original

C<readline()> や C<< E<lt>E<gt> >> を使った 1 行ずつのファイル読み込みは、
次の改行文字を検索するコードの実装の改良により、典型的には
高速になっているはずです。

=item *

=begin original

Assigning one reference to another, I<e.g.> C<$ref1 = $ref2> has been
optimized in some cases.

=end original

あるリファレンスから別のリファレンスへの代入、I<例えば> C<$ref1 = $ref2> は
一部の場合で最適化されるようになりました。

=item *

=begin original

Remove some exceptions to creating Copy-on-Write strings. The string
buffer growth algorithm has been slightly altered so that you're less
likely to encounter a string which can't be COWed.

=end original

Copy-on-Write 文字列の作成時のいくつかの例外を除去しました。
文字列バッファを拡大するアルゴリズムは少し変更されたので、
COW できない文字列に出会うことはより少なくなりました。

=item *

=begin original

Better optimise array and hash assignment: where an array or hash appears
in the LHS of a list assignment, such as C<(..., @a) = (...);>, it's
likely to be considerably faster, especially if it involves emptying the
array/hash. For example, this code runs about a third faster compared to
Perl 5.24.0:

=end original

配列とハッシュの代入の最適化の改善:
where an array or hash appears
in the LHS of a list assignment, such as 
C<(..., @a) = (...);> のように、リスト代入の左側に配列やハッシュがある場合、
特にこれが配列/ハッシュを空にすることに関連する場合、おそらくかなり
早くなりました。
例えば、このコードは Perl 5.24.0 と比べて約 3 倍高速に実行します:

    my @a;
    for my $i (1..10_000_000) {
        @a = (1,2,3);
        @a = ();
    }

=item *

=begin original

Converting a single-digit string to a number is now substantially faster.

=end original

数字 1 桁の文字列から数値への変換は大幅に速くなりました。

=item *

=begin original

The C<split> builtin is now slightly faster in many cases: in particular
for the two specially-handled forms

=end original

C<split> 組み込み関数は、多くの場合(特に二つの特別扱いされる型式)で少し
速くなりました:

    my    @a = split ...;
    local @a = split ...;

=item *

=begin original

The rather slow implementation for the experimental subroutine signatures
feature has been made much faster; it is now comparable in speed with the
traditional C<my ($a, $b, @c) = @_>.

=end original

実験的なサブルーチンシグネチャ機能のやや遅い実装は遥かに速くなりました;
伝統的な C<my ($a, $b, @c) = @_> と速度を比較できる程度になりました。

=item *

=begin original

Bareword constant strings are now permitted to take part in constant
folding.  They were originally exempted from constant folding in August 1999,
during the development of Perl 5.6, to ensure that C<use strict "subs">
would still apply to bareword constants.  That has now been accomplished a
different way, so barewords, like other constants, now gain the performance
benefits of constant folding.

=end original

裸の単語の文字列定数は定数畳み込みの一部として許されるようになりました。
これはもともと C<use strict "subs"> が裸の単語の定数にも適用されるように、
Perl 5.6 開発中の 1999 年 8 月から定数畳み込みから免除されていました。
これは異なった方法で実現されることになったので、裸の単語も他の定数と同様に
定数畳み込みによる性能的な利益を得られるようになりました。

=begin original

This also means that void-context warnings on constant expressions of
barewords now report the folded constant operand, rather than the operation;
this matches the behaviour for non-bareword constants.

=end original

これはまた、裸の単語の定数表現での無効コンテキスト警告は
操作ではなく畳み込まれた定数オペランドを報告するようになったことを意味します;
これは裸の単語の定数の振る舞いと一致します。

=back

=head1 Modules and Pragmata

(モジュールとプラグマ)

=head2 Updated Modules and Pragmata

(更新されたモジュールとプラグマ)

=over 4

=item *

=begin original

IO::Compress has been upgraded from version 2.069 to 2.074.

=end original

IO::Compress はバージョン 2.069 から 2.074 に更新されました。

=item *

=begin original

L<Archive::Tar> has been upgraded from version 2.04 to 2.24.

=end original

L<Archive::Tar> はバージョン 2.04 から 2.24 に更新されました。

=item *

=begin original

L<arybase> has been upgraded from version 0.11 to 0.12.

=end original

L<arybase> はバージョン 0.11 から 0.12 に更新されました。

=item *

=begin original

L<attributes> has been upgraded from version 0.27 to 0.29.

=end original

L<attributes> はバージョン 0.27 から 0.29 に更新されました。

=begin original

The deprecation message for the C<:unique> and C<:locked> attributes
now mention that they will disappear in Perl 5.28.

=end original

C<:unique> と C<:locked> 属性の廃止予定メッセージは、これらが Perl 5.28 で
消えることに言及するようになりました。

=item *

=begin original

L<B> has been upgraded from version 1.62 to 1.68.

=end original

L<B> はバージョン 1.62 から 1.68 に更新されました。

=item *

=begin original

L<B::Concise> has been upgraded from version 0.996 to 0.999.

=end original

L<B::Concise> はバージョン 0.996 から 0.999 に更新されました。

=begin original

Its output is now more descriptive for C<op_private> flags.

=end original

この出力は C<op_private> フラグについてより説明的になりました。

=item *

=begin original

L<B::Debug> has been upgraded from version 1.23 to 1.24.

=end original

L<B::Debug> はバージョン 1.23 から 1.24 に更新されました。

=item *

=begin original

L<B::Deparse> has been upgraded from version 1.37 to 1.40.

=end original

L<B::Deparse> はバージョン 1.37 から 1.40 に更新されました。

=item *

=begin original

L<B::Xref> has been upgraded from version 1.05 to 1.06.

=end original

L<B::Xref> はバージョン 1.05 から 1.06 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<base> has been upgraded from version 2.23 to 2.25.

=end original

L<base> はバージョン 2.23 から 2.25 に更新されました。

=item *

=begin original

L<bignum> has been upgraded from version 0.42 to 0.47.

=end original

L<bignum> はバージョン 0.42 から 0.47 に更新されました。

=item *

=begin original

L<Carp> has been upgraded from version 1.40 to 1.42.

=end original

L<Carp> はバージョン 1.40 から 1.42 に更新されました。

=item *

=begin original

L<charnames> has been upgraded from version 1.43 to 1.44.

=end original

L<charnames> はバージョン 1.43 から 1.44 に更新されました。

=item *

=begin original

L<Compress::Raw::Bzip2> has been upgraded from version 2.069 to 2.074.

=end original

L<Compress::Raw::Bzip2> はバージョン 2.069 から 2.074 に更新されました。

=item *

=begin original

L<Compress::Raw::Zlib> has been upgraded from version 2.069 to 2.074.

=end original

L<Compress::Raw::Zlib> はバージョン 2.069 から 2.074 に更新されました。

=item *

=begin original

L<Config::Perl::V> has been upgraded from version 0.25 to 0.28.

=end original

L<Config::Perl::V> はバージョン 0.25 から 0.28 に更新されました。

=item *

=begin original

L<CPAN> has been upgraded from version 2.11 to 2.18.

=end original

L<CPAN> はバージョン 2.11 から 2.18 に更新されました。

=item *

=begin original

L<CPAN::Meta> has been upgraded from version 2.150005 to 2.150010.

=end original

L<CPAN::Meta> はバージョン 2.150005 から 2.150010 に更新されました。

=item *

=begin original

L<Data::Dumper> has been upgraded from version 2.160 to 2.167.

=end original

L<Data::Dumper> はバージョン 2.160 から 2.167 に更新されました。

=begin original

The XS implementation now supports Deparse.

=end original

XS 実装は Deparse に対応するようになりました。

=item *

=begin original

L<DB_File> has been upgraded from version 1.835 to 1.840.

=end original

L<DB_File> はバージョン 1.835 から 1.840 に更新されました。

=item *

=begin original

L<Devel::Peek> has been upgraded from version 1.23 to 1.26.

=end original

L<Devel::Peek> はバージョン 1.23 から 1.26 に更新されました。

=item *

=begin original

L<Devel::PPPort> has been upgraded from version 3.32 to 3.35.

=end original

L<Devel::PPPort> はバージョン 3.32 から 3.35 に更新されました。

=item *

=begin original

L<Devel::SelfStubber> has been upgraded from version 1.05 to 1.06.

=end original

L<Devel::SelfStubber> はバージョン 1.05 から 1.06 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<diagnostics> has been upgraded from version 1.34 to 1.36.

=end original

L<diagnostics> はバージョン 1.34 から 1.36 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<Digest> has been upgraded from version 1.17 to 1.17_01.

=end original

L<Digest> はバージョン 1.17 から 1.17_01 に更新されました。

=item *

=begin original

L<Digest::MD5> has been upgraded from version 2.54 to 2.55.

=end original

L<Digest::MD5> はバージョン 2.54 から 2.55 に更新されました。

=item *

=begin original

L<Digest::SHA> has been upgraded from version 5.95 to 5.96.

=end original

L<Digest::SHA> はバージョン 5.95 から 5.96 に更新されました。

=item *

=begin original

L<DynaLoader> has been upgraded from version 1.38 to 1.42.

=end original

L<DynaLoader> はバージョン 1.38 から 1.42 に更新されました。

=item *

=begin original

L<Encode> has been upgraded from version 2.80 to 2.88.

=end original

L<Encode> はバージョン 2.80 から 2.88 に更新されました。

=item *

=begin original

L<encoding> has been upgraded from version 2.17 to 2.19.

=end original

L<encoding> はバージョン 2.17 から 2.19 に更新されました。

=begin original

This module's default mode is no longer supported.  It now
dies when imported, unless the C<Filter> option is being used.

=end original

このモジュールのデフォルトモードはもはやサポートされなくなりました。
C<Filter> オプションが使われない限り、インポートされたときに
die するようになりました。

=item *

=begin original

L<encoding::warnings> has been upgraded from version 0.12 to 0.13.

=end original

L<encoding::warnings> はバージョン 0.12 から 0.13 に更新されました。

=begin original

This module is no longer supported.  It emits a warning to
that effect and then does nothing.

=end original

このモジュールはもはやサポートされません。
この効果と、従って何もしないという警告を出力します。

=item *

=begin original

L<Errno> has been upgraded from version 1.25 to 1.28.

=end original

L<Errno> はバージョン 1.25 から 1.28 に更新されました。

=begin original

It now documents that using C<%!> automatically loads Errno for you.

=end original

C<%!> を使うと Errno を読み込むことが文書化されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<ExtUtils::Embed> has been upgraded from version 1.33 to 1.34.

=end original

L<ExtUtils::Embed> はバージョン 1.33 から 1.34 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<ExtUtils::MakeMaker> has been upgraded from version 7.10_01 to 7.24.

=end original

L<ExtUtils::MakeMaker> はバージョン 7.10_01 から 7.24 に更新されました。

=item *

=begin original

L<ExtUtils::Miniperl> has been upgraded from version 1.05 to 1.06.

=end original

L<ExtUtils::Miniperl> はバージョン 1.05 から 1.06 に更新されました。

=item *

=begin original

L<ExtUtils::ParseXS> has been upgraded from version 3.31 to 3.34.

=end original

L<ExtUtils::ParseXS> はバージョン 3.31 から 3.34 に更新されました。

=item *

=begin original

L<ExtUtils::Typemaps> has been upgraded from version 3.31 to 3.34.

=end original

L<ExtUtils::Typemaps> はバージョン 3.31 から 3.34 に更新されました。

=item *

=begin original

L<feature> has been upgraded from version 1.42 to 1.47.

=end original

L<feature> はバージョン 1.42 から 1.47 に更新されました。

=item *

=begin original

L<File::Copy> has been upgraded from version 2.31 to 2.32.

=end original

L<File::Copy> はバージョン 2.31 から 2.32 に更新されました。

=item *

=begin original

L<File::Fetch> has been upgraded from version 0.48 to 0.52.

=end original

L<File::Fetch> はバージョン 0.48 から 0.52 に更新されました。

=item *

=begin original

L<File::Glob> has been upgraded from version 1.26 to 1.28.

=end original

L<File::Glob> はバージョン 1.26 から 1.28 に更新されました。

=begin original

It now Issues a deprecation message for C<File::Glob::glob()>.

=end original

C<File::Glob::glob()> の廃止予定メッセージを出力するようになりました。

=item *

=begin original

L<File::Spec> has been upgraded from version 3.63 to 3.67.

=end original

L<File::Spec> はバージョン 3.63 から 3.67 に更新されました。

=item *

=begin original

L<FileHandle> has been upgraded from version 2.02 to 2.03.

=end original

L<FileHandle> はバージョン 2.02 から 2.03 に更新されました。

=item *

=begin original

L<Filter::Simple> has been upgraded from version 0.92 to 0.93.

=end original

L<Filter::Simple> はバージョン 0.92 から 0.93 に更新されました。

=begin original

It no longer treats C<no MyFilter> immediately following C<use MyFilter> as
end-of-file.
L<[perl #107726]|https://rt.perl.org/Public/Bug/Display.html?id=107726>

=end original

もはや C<no MyFilter> の直後の C<use MyFilter> をファイル末尾として
扱わなくなりました。
L<[perl #107726]|https://rt.perl.org/Public/Bug/Display.html?id=107726>

=item *

=begin original

L<Getopt::Long> has been upgraded from version 2.48 to 2.49.

=end original

L<Getopt::Long> はバージョン 2.48 から 2.49 に更新されました。

=item *

=begin original

L<Getopt::Std> has been upgraded from version 1.11 to 1.12.

=end original

L<Getopt::Std> はバージョン 1.11 から 1.12 に更新されました。

=item *

=begin original

L<Hash::Util> has been upgraded from version 0.19 to 0.22.

=end original

L<Hash::Util> はバージョン 0.19 から 0.22 に更新されました。

=item *

=begin original

L<HTTP::Tiny> has been upgraded from version 0.056 to 0.070.

=end original

L<HTTP::Tiny> はバージョン 0.056 から 0.070 に更新されました。

=begin original

Internal 599-series errors now include the redirect history.

=end original

内部の 599 シリーズエラーはリダイレクト履歴を含むようになりました。

=item *

=begin original

L<I18N::LangTags> has been upgraded from version 0.40 to 0.42.

=end original

L<I18N::LangTags> はバージョン 0.40 から 0.42 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<IO> has been upgraded from version 1.36 to 1.38.

=end original

L<IO> はバージョン 1.36 から 1.38 に更新されました。

=item *

=begin original

L<IO::Socket::IP> has been upgraded from version 0.37 to 0.38.

=end original

L<IO::Socket::IP> はバージョン 0.37 から 0.38 に更新されました。

=item *

=begin original

L<IPC::Cmd> has been upgraded from version 0.92 to 0.96.

=end original

L<IPC::Cmd> はバージョン 0.92 から 0.96 に更新されました。

=item *

=begin original

L<IPC::SysV> has been upgraded from version 2.06_01 to 2.07.

=end original

L<IPC::SysV> はバージョン 2.06_01 から 2.07 に更新されました。

=item *

=begin original

L<JSON::PP> has been upgraded from version 2.27300 to 2.27400_02.

=end original

L<JSON::PP> はバージョン 2.27300 から 2.27400_02 に更新されました。

=item *

=begin original

L<lib> has been upgraded from version 0.63 to 0.64.

=end original

L<lib> はバージョン 0.63 から 0.64 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<List::Util> has been upgraded from version 1.42_02 to 1.46_02.

=end original

L<List::Util> はバージョン 1.42_02 から 1.46_02 に更新されました。

=item *

=begin original

L<Locale::Codes> has been upgraded from version 3.37 to 3.42.

=end original

L<Locale::Codes> はバージョン 3.37 から 3.42 に更新されました。

=item *

=begin original

L<Locale::Maketext> has been upgraded from version 1.26 to 1.28.

=end original

L<Locale::Maketext> はバージョン 1.26 から 1.28 に更新されました。

=item *

=begin original

L<Locale::Maketext::Simple> has been upgraded from version 0.21 to 0.21_01.

=end original

L<Locale::Maketext::Simple> はバージョン 0.21 から 0.21_01 に更新されました。

=item *

=begin original

L<Math::BigInt> has been upgraded from version 1.999715 to 1.999806.

=end original

L<Math::BigInt> はバージョン 1.999715 から 1.999806 に更新されました。

=item *

=begin original

L<Math::BigInt::FastCalc> has been upgraded from version 0.40 to 0.5005.

=end original

L<Math::BigInt::FastCalc> はバージョン 0.40 から 0.5005 に更新されました。

=item *

=begin original

L<Math::BigRat> has been upgraded from version 0.260802 to 0.2611.

=end original

L<Math::BigRat> はバージョン 0.260802 から 0.2611 に更新されました。

=item *

=begin original

L<Math::Complex> has been upgraded from version 1.59 to 1.5901.

=end original

L<Math::Complex> はバージョン 1.59 から 1.5901 に更新されました。

=item *

=begin original

L<Memoize> has been upgraded from version 1.03 to 1.03_01.

=end original

L<Memoize> はバージョン 1.03 から 1.03_01 に更新されました。

=item *

=begin original

L<Module::CoreList> has been upgraded from version 5.20170420 to 5.20170530.

=end original

L<Module::CoreList> はバージョン 5.20170420 から 5.20170530 に更新されました。

=item *

=begin original

L<Module::Load::Conditional> has been upgraded from version 0.64 to 0.68.

=end original

L<Module::Load::Conditional> はバージョン 0.64 から 0.68 に更新されました。

=item *

=begin original

L<Module::Metadata> has been upgraded from version 1.000031 to 1.000033.

=end original

L<Module::Metadata> はバージョン 1.000031 から 1.000033 に更新されました。

=item *

=begin original

L<mro> has been upgraded from version 1.18 to 1.20.

=end original

L<mro> はバージョン 1.18 から 1.20 に更新されました。

=item *

=begin original

L<Net::Ping> has been upgraded from version 2.43 to 2.55.

=end original

L<Net::Ping> はバージョン 2.43 から 2.55 に更新されました。

=begin original

IPv6 addresses and C<AF_INET6> sockets are now supported, along with several
other enhancements.

=end original

その他の拡張と共に、IPv6 アドレスと C<AF_INET6> ソケットに
対応するようになりました。

=item *

=begin original

L<NEXT> has been upgraded from version 0.65 to 0.67.

=end original

L<NEXT> はバージョン 0.65 から 0.67 に更新されました。

=item *

=begin original

L<Opcode> has been upgraded from version 1.34 to 1.39.

=end original

L<Opcode> はバージョン 1.34 から 1.39 に更新されました。

=item *

=begin original

L<open> has been upgraded from version 1.10 to 1.11.

=end original

L<open> はバージョン 1.10 から 1.11 に更新されました。

=item *

=begin original

L<OS2::Process> has been upgraded from version 1.11 to 1.12.

=end original

L<OS2::Process> はバージョン 1.11 から 1.12 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<overload> has been upgraded from version 1.26 to 1.28.

=end original

L<overload> はバージョン 1.26 から 1.28 に更新されました。

=begin original

Its compilation speed has been improved slightly.

=end original

コンパイル速度が少し向上しました。

=item *

=begin original

L<parent> has been upgraded from version 0.234 to 0.236.

=end original

L<parent> はバージョン 0.234 から 0.236 に更新されました。

=item *

=begin original

L<perl5db.pl> has been upgraded from version 1.50 to 1.51.

=end original

L<perl5db.pl> はバージョン 1.50 から 1.51 に更新されました。

=begin original

It now ignores F</dev/tty> on non-Unix systems.
L<[perl #113960]|https://rt.perl.org/Public/Bug/Display.html?id=113960>

=end original

非 Unix システムでは F</dev/tty> を無視するようになりました。
L<[perl #113960]|https://rt.perl.org/Public/Bug/Display.html?id=113960>

=item *

=begin original

L<Perl::OSType> has been upgraded from version 1.009 to 1.010.

=end original

L<Perl::OSType> はバージョン 1.009 から 1.010 に更新されました。

=item *

=begin original

L<perlfaq> has been upgraded from version 5.021010 to 5.021011.

=end original

L<perlfaq> はバージョン 5.021010 から 5.021011 に更新されました。

=item *

=begin original

L<PerlIO> has been upgraded from version 1.09 to 1.10.

=end original

L<PerlIO> はバージョン 1.09 から 1.10 に更新されました。

=item *

=begin original

L<PerlIO::encoding> has been upgraded from version 0.24 to 0.25.

=end original

L<PerlIO::encoding> はバージョン 0.24 から 0.25 に更新されました。

=item *

=begin original

L<PerlIO::scalar> has been upgraded from version 0.24 to 0.26.

=end original

L<PerlIO::scalar> はバージョン 0.24 から 0.26 に更新されました。

=item *

=begin original

L<Pod::Checker> has been upgraded from version 1.60 to 1.73.

=end original

L<Pod::Checker> はバージョン 1.60 から 1.73 に更新されました。

=item *

=begin original

L<Pod::Functions> has been upgraded from version 1.10 to 1.11.

=end original

L<Pod::Functions> はバージョン 1.10 から 1.11 に更新されました。

=item *

=begin original

L<Pod::Html> has been upgraded from version 1.22 to 1.2202.

=end original

L<Pod::Html> はバージョン 1.22 から 1.2202 に更新されました。

=item *

=begin original

L<Pod::Perldoc> has been upgraded from version 3.25_02 to 3.28.

=end original

L<Pod::Perldoc> はバージョン 3.25_02 から 3.28 に更新されました。

=item *

=begin original

L<Pod::Simple> has been upgraded from version 3.32 to 3.35.

=end original

L<Pod::Simple> はバージョン 3.32 から 3.35 に更新されました。

=item *

=begin original

L<Pod::Usage> has been upgraded from version 1.68 to 1.69.

=end original

L<Pod::Usage> はバージョン 1.68 から 1.69 に更新されました。

=item *

=begin original

L<POSIX> has been upgraded from version 1.65 to 1.76.

=end original

L<POSIX> はバージョン 1.65 から 1.76 に更新されました。

=begin original

This remedies several defects in making its symbols exportable.
L<[perl #127821]|https://rt.perl.org/Public/Bug/Display.html?id=127821>

=end original

シンボルをエクスポート可能にするときのいくつかの不具合を修正しました。
L<[perl #127821]|https://rt.perl.org/Public/Bug/Display.html?id=127821>

=begin original

The C<POSIX::tmpnam()> interface has been removed,
see L</"POSIX::tmpnam() has been removed">.

=end original

C<POSIX::tmpnam()> インターフェースは除去されました;
L</"POSIX::tmpnam() has been removed"> を参照してください。

=begin original

The following deprecated functions have been removed:

=end original

以下の廃止予定関数が除去されました:

    POSIX::isalnum
    POSIX::isalpha
    POSIX::iscntrl
    POSIX::isdigit
    POSIX::isgraph
    POSIX::islower
    POSIX::isprint
    POSIX::ispunct
    POSIX::isspace
    POSIX::isupper
    POSIX::isxdigit
    POSIX::tolower
    POSIX::toupper

=begin original

Trying to import POSIX subs that have no real implementations
(like C<POSIX::atend()>) now fails at import time, instead of
waiting until runtime.

=end original

(C<POSIX::atend()> のように)実際の実装がない POSIX 関数を
インポートしようとすると、実行時まで待つのではなく、インポート時に
失敗するようになりました。

=item *

=begin original

L<re> has been upgraded from version 0.32 to 0.34

=end original

L<re> はバージョン 0.32 から 0.3 に更新されました。

=begin original

This adds support for the new L<C<E<47>xx>|perlre/E<sol>x and E<sol>xx>
regular expression pattern modifier, and a change to the L<S<C<use re
'strict'>>|re/'strict' mode> experimental feature.  When S<C<re
'strict'>> is enabled, a warning now will be generated for all
unescaped uses of the two characters C<"}"> and C<"]"> in regular
expression patterns (outside bracketed character classes) that are taken
literally.  This brings them more in line with the C<")"> character which
is always a metacharacter unless escaped.  Being a metacharacter only
sometimes, depending on an action at a distance, can lead to silently
having the pattern mean something quite different than was intended,
which the S<C<re 'strict'>> mode is intended to minimize.

=end original

これは新しい L<C<E<47>xx>|perlre/E<sol>x and E<sol>xx> 正規表現パターン修飾子
対応を追加し、L<S<C<use re 'strict'>>|re/'strict' mode> 実験的機能に
変更します。
S<C<re 'strict'>> が有効のとき、正規表現中のリテラルに取られる
(大かっこ文字クラスの外側の) 二つの文字 C<"}"> と C<"]"> をエスケープせずに
使うと全て警告が出力されます。
これにより、エスケープしない限り常にメタ文字として扱われる C<")"> 文字と
さらに一致します。
遠い位置の行動に依存して時々メタ文字になるというのは、パターンが暗黙の内に
想定とかなり違う何かになる可能性があります;
S<C<re 'strict'>> モードはこれを最小化することを意図しています。

=item *

=begin original

L<Safe> has been upgraded from version 2.39 to 2.40.

=end original

L<Safe> はバージョン 2.39 から 2.40 に更新されました。

=item *

=begin original

L<Scalar::Util> has been upgraded from version 1.42_02 to 1.46_02.

=end original

L<Scalar::Util> はバージョン 1.42_02 から 1.46_02 に更新されました。

=item *

=begin original

L<Storable> has been upgraded from version 2.56 to 2.62.

=end original

L<Storable> はバージョン 2.56 から 2.62 に更新されました。

=begin original

Fixes
L<[perl #130098]|https://rt.perl.org/Public/Bug/Display.html?id=130098>.

=end original

L<[perl #130098]|https://rt.perl.org/Public/Bug/Display.html?id=130098> を
修正しました。

=item *

=begin original

L<Symbol> has been upgraded from version 1.07 to 1.08.

=end original

L<Symbol> はバージョン 1.07 から 1.08 に更新されました。

=item *

=begin original

L<Sys::Syslog> has been upgraded from version 0.33 to 0.35.

=end original

L<Sys::Syslog> はバージョン 0.33 から 0.35 に更新されました。

=item *

=begin original

L<Term::ANSIColor> has been upgraded from version 4.04 to 4.06.

=end original

L<Term::ANSIColor> はバージョン 4.04 から 4.06 に更新されました。

=item *

=begin original

L<Term::ReadLine> has been upgraded from version 1.15 to 1.16.

=end original

L<Term::ReadLine> はバージョン 1.15 から 1.16 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<Test> has been upgraded from version 1.28 to 1.30.

=end original

L<Test> はバージョン 1.28 から 1.30 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<Test::Harness> has been upgraded from version 3.36 to 3.38.

=end original

L<Test::Harness> はバージョン 3.36 から 3.38 に更新されました。

=item *

=begin original

L<Test::Simple> has been upgraded from version 1.001014 to 1.302073.

=end original

L<Test::Simple> はバージョン 1.001014 から 1.302073 に更新されました。

=item *

=begin original

L<Thread::Queue> has been upgraded from version 3.09 to 3.12.

=end original

L<Thread::Queue> はバージョン 3.09 から 3.12 に更新されました。

=item *

=begin original

L<Thread::Semaphore> has been upgraded from 2.12 to 2.13.

=end original

L<Thread::Semaphore> はバージョン 2.12 から 2.13 に更新されました。

=begin original

Added the C<down_timed> method.

=end original

C<down_timed> メソッドを追加しました。

=item *

=begin original

L<threads> has been upgraded from version 2.07 to 2.15.

=end original

L<threads> はバージョン 2.07 から 2.15 に更新されました。

=item *

=begin original

L<threads::shared> has been upgraded from version 1.51 to 1.56.

=end original

L<threads::shared> はバージョン 1.51 から 1.56 に更新されました。

=item *

=begin original

L<Tie::Hash::NamedCapture> has been upgraded from version 0.09 to 0.10.

=end original

L<Tie::Hash::NamedCapture> はバージョン 0.09 から 0.10 に更新されました。

=item *

=begin original

L<Time::HiRes> has been upgraded from version 1.9733 to 1.9741.

=end original

L<Time::HiRes> はバージョン 1.9733 から 1.9741 に更新されました。

=begin original

It now builds on systems with C++11 compilers (such as G++ 6 and Clang++
3.9).

=end original

(G++ 6 や Clang++ 3.9 のような) C++11 コンパイラのシステムで
ビルドできるようになりました。

=begin original

Now uses C<clockid_t>.

=end original

C<clockid_t> を使うようになりました。

=item *

=begin original

L<Time::Local> has been upgraded from version 1.2300 to 1.25.

=end original

L<Time::Local> はバージョン 1.2300 から 1.25 に更新されました。

=item *

=begin original

L<Unicode::Collate> has been upgraded from version 1.14 to 1.19.

=end original

L<Unicode::Collate> はバージョン 1.14 から 1.19 に更新されました。

=item *

=begin original

L<Unicode::UCD> has been upgraded from version 0.64 to 0.68.

=end original

L<Unicode::UCD> はバージョン 0.64 から 0.68 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<version> has been upgraded from version 0.9916 to 0.9917.

=end original

L<version> はバージョン 0.9916 から 0.9917 に更新されました。

=item *

=begin original

L<VMS::DCLsym> has been upgraded from version 1.06 to 1.08.

=end original

L<VMS::DCLsym> はバージョン 1.06 から 1.08 に更新されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=item *

=begin original

L<warnings> has been upgraded from version 1.36 to 1.37.

=end original

L<warnings> はバージョン 1.36 から 1.37 に更新されました。

=item *

=begin original

L<XS::Typemap> has been upgraded from version 0.14 to 0.15.

=end original

L<XS::Typemap> はバージョン 0.14 から 0.15 に更新されました。

=item *

=begin original

L<XSLoader> has been upgraded from version 0.21 to 0.27.

=end original

L<XSLoader> はバージョン 0.21 から 0.27 に更新されました。

=begin original

Fixed a security hole in which binary files could be loaded from a path
outside of L<C<@INC>|perlvar/@INC>.

=end original

バイナリファイルが L<C<@INC>|perlvar/@INC> の外側のパスから読み込まれる
可能性があるセキュリティホールが修正されました。

=begin original

It now uses 3-arg C<open()> instead of 2-arg C<open()>.
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=end original

2 引数 C<open()> ではなく 3 引数 C<open()> を使うようになりました。
L<[perl #130122]|https://rt.perl.org/Public/Bug/Display.html?id=130122>

=back

=head1 Documentation

(文書)

=head2 New Documentation

(新しい文書)

=head3 L<perldeprecation>

=begin original

This file documents all upcoming deprecations, and some of the deprecations
which already have been removed.  The purpose of this documentation is
two-fold: document what will disappear, and by which version, and serve
as a guide for people dealing with code which has features that no longer
work after an upgrade of their perl.

=end original

このファイルは全ての将来の廃止予定、および既に除去された廃止予定の一部を
文書化しています。
この文書の目的は二つです:
何がどのバージョンから除去されたのかを文書化することと、perl の
アップグレード後に動作しなくなる機能があるコードを扱う人々へのガイドを
提供することです。

=head2 Changes to Existing Documentation

(既存の文書の変更)

=begin original

We have attempted to update the documentation to reflect the changes
listed in this document.  If you find any we have missed, send email to
L<perlbug@perl.org|mailto:perlbug@perl.org>.

=end original

私たちはこの文書にリストされた修正を反映するように文書を
更新しようとしています。
もし見逃しているものに気付いたなら、
L<perlbug@perl.org|mailto:perlbug@perl.org> にメールを送ってください。

=begin original

Additionally, all references to Usenet have been removed, and the
following selected changes have been made:

=end original

さらに、全ての Usenet への参照は取り除かれ、また以下に抜粋した変更が
行われました:

=head3 L<perlfunc>

=over 4

=item *

=begin original

Removed obsolete text about L<C<defined()>|perlfunc/defined>
on aggregates that should have been deleted earlier, when the feature
was removed.

=end original

集合に対する L<C<defined()>|perlfunc/defined> に関する古い文章が
除去されました; これは機能が除去された時点でもっと早く削除されるべきでした。

=item *

=begin original

Corrected documentation of L<C<eval()>|perlfunc/eval>,
and L<C<evalbytes()>|perlfunc/evalbytes>.

=end original

L<C<eval()>|perlfunc/eval> と L<C<evalbytes()>|perlfunc/evalbytes> の
文書が修正されました。

=item *

=begin original

Clarified documentation of L<C<seek()>|perlfunc/seek>,
L<C<tell()>|perlfunc/tell> and L<C<sysseek()>|perlfunc/sysseek>
emphasizing that positions are in bytes and not characters.
L<[perl #128607]|https://rt.perl.org/Public/Bug/Display.html?id=128607>

=end original

位置はバイト単位であって文字単位ではないことを強調するために、
L<C<seek()>|perlfunc/seek>,
L<C<tell()>|perlfunc/tell>, L<C<sysseek()>|perlfunc/sysseek>
の文書を明確化しました。
L<[perl #128607]|https://rt.perl.org/Public/Bug/Display.html?id=128607>

=item *

=begin original

Clarified documentation of L<C<sort()>|perlfunc/sort LIST> concerning
the variables C<$a> and C<$b>.

=end original

変数 C<$a> と C<$b> に関する L<C<sort()>|perlfunc/sort LIST> の文書が
明確化されました。

=item *

=begin original

In L<C<split()>|perlfunc/split> noted that certain pattern modifiers are
legal, and added a caution about its use in Perls before v5.11.

=end original

L<C<split()>|perlfunc/split> で、一部のパターン修飾子は正当であることが
記され、これを v5.11 以前の Perl で使うことに関する注意が追加されました。

=item *

=begin original

Removed obsolete documentation of L<C<study()>|perlfunc/study>, noting
that it is now a no-op.

=end original

L<C<study()>|perlfunc/study> の古い文書が除去され、今は何もしないことが
記されました。

=item *

=begin original

Noted that L<C<vec()>|perlfunc/vec> doesn't work well when the string
contains characters whose code points are above 255.

=end original

符号位置が 255 を越える文字が含まれている文字列に対しては
L<C<vec()>|perlfunc/vec> がうまく動作しないことが記されました。

=back

=head3 L<perlguts>

=over 4

=item *

=begin original

Added advice on
L<formatted printing of operands of C<Size_t> and C<SSize_t>|perlguts/Formatted Printing of Size_t and SSize_t>

=end original

L<C<Size_t> と C<SSize_t> のオペランドのフォーマット表示|perlguts/Formatted Printing of Size_t and SSize_t> に
助言が追加されました。

=back

=head3 L<perlhack>

=over 4

=item *

=begin original

Clarify what editor tab stop rules to use, and note that we are
migrating away from using tabs, replacing them with sequences of SPACE
characters.

=end original

どのエディタタブストップ規則を使うかを明確化し、タブを使わずに SPACE 文字の
並びに置き換えようとしていることを記しました。

=back

=head3 L<perlhacktips>

=over 4

=item *

=begin original

Give another reason to use C<cBOOL> to cast an expression to boolean.

=end original

式をブール値にキャストするために C<cBOOL> を使うもう一つの理由を
提供しました。

=item *

=begin original

Note that the macros C<TRUE> and C<FALSE> are available to express
boolean values.

=end original

C<TRUE> と C<FALSE> はブール値を表現するのに利用可能であることを
記述しました。

=back

=head3 L<perlinterp>

=over 4

=item *

=begin original

L<perlinterp> has been expanded to give a more detailed example of how to
hunt around in the parser for how a given operator is handled.

=end original

L<perlinterp> は、演算子がどのように扱われるかについてパーサを追う方法に関する
より詳細な例を追加することで拡張されました。

=back

=head3 L<perllocale>

=over 4

=item *

=begin original

Some locales aren't compatible with Perl.  Note that these can cause
core dumps.

=end original

一部のロケールは Perl と互換性がありません。
これらはコアダンプを引き起こすことを記述しました。

=back

=head3 L<perlmod>

=over 4

=item *

=begin original

Various clarifications have been added.

=end original

様々な明確化が追加されました。

=back

=head3 L<perlmodlib>

=over 4

=item *

=begin original

Updated the site mirror list.

=end original

サイトミラーの一覧を更新しました。

=back

=head3 L<perlobj>

=over 4

=item *

=begin original

Added a section on calling methods using their fully qualified names.

=end original

完全修飾名を使ったメソッド呼び出しの章を追加しました。

=item *

=begin original

Do not discourage manual C<@ISA>.

=end original

手動の C<@ISA> は非推奨ではありません。

=back

=head3 L<perlootut>

=over 4

=item *

=begin original

Mention C<Moo> more.

=end original

C<Moo> についてさらに言及しました。

=back

=head3 L<perlop>

=over 4

=item *

=begin original

Note that white space must be used for quoting operators if the
delimiter is a word character (I<i.e.>, matches C<\w>).

=end original

区切り文字が単語文字 (I<つまり>、C<\w> にマッチングする文字) の場合、
クォート演算子として空白を使わなければならないことを記述しました。

=item *

=begin original

Clarify that in regular expression patterns delimited by single quotes,
no variable interpolation is done.

=end original

シングルクォートで区切られた正規表現パターンでは変数展開が行われないことを
明確化しました。

=back

=head3 L<perlre>

=over 4

=item *

=begin original

The first part was extensively rewritten to incorporate various basic
points, that in earlier versions were mentioned in sort of an appendix
on Version 8 regular expressions.

=end original

最初の部分は様々な基本的な点が組み入れられるように広範囲に書き直されました;
以前のバージョンでは、第 8 版正規表現の付録で言及されていたようなものです。

=item *

=begin original

Note that it is common to have the C</x> modifier and forget that this
means that C<"#"> has to be escaped.

=end original

C</x> 修飾子を使って、これは C<"#"> をエスケープする必要があることを
忘れることがよくあることを記しました。

=back

=head3 L<perlretut>

=over 4

=item *

=begin original

Add introductory material.

=end original

導入的な内容が追加されました。

=item *

=begin original

Note that a metacharacter occurring in a context where it can't mean
that, silently loses its meta-ness and matches literally.
L<C<use re 'strict'>|re/'strict' mode> can catch some of these.

=end original

その意味を持てないコンテキストにメタ文字があると、暗黙にメタの意味が
失われリテラルにマッチングすることを記しました。
L<C<use re 'strict'>|re/'strict' mode> はこの一部を捕らえます。

=back

=head3 L<perlunicode>

=over 4

=item *

=begin original

Corrected the text about Unicode BYTE ORDER MARK handling.

=end original

Unicode のバイト順マークの扱いに関する文章が修正されました。

=item *

=begin original

Updated the text to correspond with changes in Unicode UTS#18, concerning
regular expressions, and Perl compatibility with what it says.

=end original

Unicode UTS#18 の変更に対応した文章、正規表現の考慮、書いてあることの
Perl との互換性について更新されました。

=back

=head3 L<perlvar>

=over 4

=item *

=begin original

Document C<@ISA>.  It was documented in other places, but not in L<perlvar>.

=end original

C<@ISA> が文書化されました。
これは他の場所はに文書化されていましたが、L<perlvar> にはありませんでした。

=back

=head1 Diagnostics

(診断メッセージ)

=head2 New Diagnostics

(新しい診断メッセージ)

=head3 New Errors

(新しいエラー)

=over 4

=item *

L<A signature parameter must start with C<'$'>, C<'@'> or C<'%'>
|perldiag/A signature parameter must start with C<'$'>, C<'@'> or C<'%'>>

=item *

L<Bareword in require contains "%s"|perldiag/"Bareword in require contains "%s"">

=item *

L<Bareword in require maps to empty filename|perldiag/"Bareword in require maps to empty filename">

=item *

L<Bareword in require maps to disallowed filename "%s"|perldiag/"Bareword in require maps to disallowed filename "%s"">

=item *

L<Bareword in require must not start with a double-colon: "%s"|perldiag/"Bareword in require must not start with a double-colon: "%s"">

=item *

L<%s: command not found|perldiag/"%s: command not found">

=begin original

(A) You've accidentally run your script through B<bash> or another shell
instead of Perl.  Check the C<#!> line, or manually feed your script into
Perl yourself.  The C<#!> line at the top of your file could look like:

=end original

(A) 間違って Perl ではなく B<bash> やその他のシェルでスクリプトを
実行しました。
C<#!> 行をチェックするか、手動で Perl にスクリプトを指定してください。
ファイルの先頭の C<#!> 行は次のようなものです:

  #!/usr/bin/perl

=item *

L<%s: command not found: %s|perldiag/"%s: command not found: %s">

=begin original

(A) You've accidentally run your script through B<zsh> or another shell
instead of Perl.  Check the C<#!> line, or manually feed your script into
Perl yourself.  The C<#!> line at the top of your file could look like:

=end original

(A) 間違って Perl ではなく B<zsh> やその他のシェルでスクリプトを
実行しました。
C<#!> 行をチェックするか、手動で Perl にスクリプトを指定してください。
ファイルの先頭の C<#!> 行は次のようなものです:

  #!/usr/bin/perl

=item *

L<The experimental declared_refs feature is not enabled|perldiag/"The experimental declared_refs feature is not enabled">

=begin original

(F) To declare references to variables, as in C<my \%x>, you must first enable
the feature:

=end original

(F) C<my \%x> のように変数へのリファレンスを宣言するためには、最初に
この機能を有効にしなければなりません:

    no warnings "experimental::declared_refs";
    use feature "declared_refs";

=begin original

See L</Declaring a reference to a variable>.

=end original

L</Declaring a reference to a variable> を参照してください。

=item *

L<Illegal character following sigil in a subroutine signature
|perldiag/Illegal character following sigil in a subroutine signature>

=item *

L<Indentation on line %d of here-doc doesn't match delimiter
|perldiag/Indentation on line %d of here-doc doesn't match delimiter>

=item *

L<Infinite recursion via empty pattern|perldiag/"Infinite recursion via empty pattern">.

=begin original

Using the empty pattern (which re-executes the last successfully-matched
pattern) inside a code block in another regex, as in C</(?{ s!!new! })/>, has
always previously yielded a segfault.  It now produces this error.

=end original

あるコードブロックの他の正規表現で (C</(?{ s!!new! })/> のように)
空パターンを使う(最後にマッチングに成功したパターンを再実行する)と、
以前は常にセグメンテーションフォルトになっていました。
今回はこのエラーが出るようになりました。

=item *

L<Malformed UTF-8 string in "%s"
|perldiag/Malformed UTF-8 string in "%s">

=item *

L<Multiple slurpy parameters not allowed
|perldiag/Multiple slurpy parameters not allowed>

=item *

L<C<'#'> not allowed immediately following a sigil in a subroutine signature
|perldiag/C<'#'> not allowed immediately following a sigil in a subroutine signature>

=item *

L<panic: unknown OA_*: %x
|perldiag/panic: unknown OA_*: %x>

=item *

L<Unescaped left brace in regex is illegal here|perldiag/Unescaped left brace in regex is illegal here in regex; marked by S<E<lt>-- HERE> in mE<sol>%sE<sol>>

=begin original

Unescaped left braces are now illegal in some contexts in regular expression
patterns.  In other contexts, they are still just deprecated; they will
be illegal in Perl 5.30.

=end original

正規表現パターンの一部のコンテキストでは、エスケープされていない
左中かっこは不正になりました。
その他のコンテキストでは、まだ単なる廃止予定です; これは
Perl 5.30 で不正になります。

=item *

L<Version control conflict marker|perldiag/"Version control conflict marker">

=begin original

(F) The parser found a line starting with C<E<lt>E<lt>E<lt>E<lt>E<lt>E<lt>E<lt>>,
C<E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>>, or C<=======>.  These may be left by a
version control system to mark conflicts after a failed merge operation.

=end original

(F) パーサは C<E<lt>E<lt>E<lt>E<lt>E<lt>E<lt>E<lt>>,
C<E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>E<gt>>, C<=======> で始まる行を発見しました。
これはマージ操作に失敗した後衝突をマークするために
バージョンコントロールシステムが残した可能性があります。

=back

=head3 New Warnings

(新しい警告)

=over 4

=item *

L<Can't determine class of operator %s, assuming C<BASEOP>
|perldiag/Can't determine class of operator %s, assuming C<BASEOP>>

=item *

L<Declaring references is experimental|perldiag/"Declaring references is experimental">

=begin original

(S experimental::declared_refs) This warning is emitted if you use a reference
constructor on the right-hand side of C<my()>, C<state()>, C<our()>, or
C<local()>.  Simply suppress the warning if you want to use the feature, but
know that in doing so you are taking the risk of using an experimental feature
which may change or be removed in a future Perl version:

=end original

(S experimental::declared_refs) この警告は、C<my()>, C<state()>, C<our()>,
C<local()> の右側でリファレンスコンストラクタを使ったときに起こります。
この機能を使用したいけれども、そうすることで将来の Perl バージョンで
変更や削除される可能性がある実験的な機能を使うリスクを取る場合は、
単に警告を抑制してください:

    no warnings "experimental::declared_refs";
    use feature "declared_refs";
    $fooref = my \$foo;

=begin original

See L</Declaring a reference to a variable>.

=end original

L</Declaring a reference to a variable> を参照してください。

=item *

L<do "%s" failed, '.' is no longer in @INC|perldiag/do "%s" failed, '.' is no longer in @INC; did you mean do ".E<sol>%s"?>

=begin original

Since C<"."> is now removed from C<@INC> by default, C<do> will now trigger a warning recommending to fix the C<do> statement.

=end original

デフォルトでは C<"."> が C<@INC> から除去されたので、
C<do> は C<do> 文を修正することを勧める警告を出すようになりました。

=item *

L<C<File::Glob::glob()> will disappear in perl 5.30. Use C<File::Glob::bsd_glob()> instead.
|perldiag/C<File::Glob::glob()> will disappear in perl 5.30. Use C<File::Glob::bsd_glob()> instead.>

=item *

L<Unescaped literal '%c' in regex; marked by E<lt>-- HERE in mE<sol>%sE<sol>
|perldiag/Unescaped literal '%c' in regex; marked by <-- HERE in mE<sol>%sE<sol>>

=item *

L<Use of unassigned code point or non-standalone grapheme for a delimiter will be a fatal error starting in Perl 5.30|perldiag/"Use of unassigned code point or non-standalone grapheme for a delimiter will be a fatal error starting in Perl 5.30">

=begin original

See L</Deprecations>

=end original

L</Deprecations> を参照してください。

=back

=head2 Changes to Existing Diagnostics

(既存の診断メッセージの変更)

=over 4

=item *

=begin original

When a C<require> fails, we now do not provide C<@INC> when the C<require>
is for a file instead of a module.

=end original

C<require> がモジュールのためではなくファイルのための場合、
C<require> が失敗したときに C<@INC> を提供しなくなりました。

=item *

=begin original

When C<@INC> is not scanned for a C<require> call, we no longer display
C<@INC> to avoid confusion.

=end original

C<require> 呼び出しで C<@INC> を調べない場合、混乱を防ぐために
もはや C<@INC> を表示しなくなりました。

=item *

L<Attribute "locked" is deprecated, and will disappear in Perl 5.28
|perldiag/Attribute "locked" is deprecated, and will disappear in Perl 5.28>

=begin original

This existing warning has had the I<and will disappear> text added in this
release.

=end original

この既存の警告は、このリリースから I<and will disappear> という文章が
追加されました。

=item *

L<Attribute "unique" is deprecated, and will disappear in Perl 5.28
|perldiag/Attribute "unique" is deprecated, and will disappear in Perl 5.28>

=begin original

This existing warning has had the I<and will disappear> text added in this
release.

=end original

この既存の警告は、このリリースから I<and will disappear> という文章が
追加されました。

=item *

Calling POSIX::%s() is deprecated

=begin original

This warning has been removed, as the deprecated functions have been
removed from POSIX.

=end original

廃止予定の関数が POSIX から除去されたので、この警告は除去されました。

=item *

L<Constants from lexical variables potentially modified elsewhere are deprecated. This will not be allowed in Perl 5.32
|perldiag/Constants from lexical variables potentially modified elsewhere are deprecated. This will not be allowed in Perl 5.32>

=begin original

This existing warning has had the I<this will not be allowed> text added
in this release.

=end original

この既存の警告は、このリリースから I<this will not be allowed> という文章が
追加されました。

=item *

L<Deprecated use of C<my()> in false conditional. This will be a fatal error in Perl 5.30
|perldiag/Deprecated use of C<my()> in false conditional. This will be a fatal error in Perl 5.30>

=begin original

This existing warning has had the I<this will be a fatal error> text added
in this release.

=end original

この既存の警告は、このリリースから I<this will be a fatal error> という文章が
追加されました。

=item *

L<C<dump()> better written as C<CORE::dump()>. C<dump()> will no longer be available in Perl 5.30
|perldiag/C<dump()> better written as C<CORE::dump()>. C<dump()> will no longer be available in Perl 5.30>

=begin original

This existing warning has had the I<no longer be available> text added in
this release.

=end original

この既存の警告は、このリリースから I<no longer be available> という文章が
追加されました。

=item *

L<Experimental %s on scalar is now forbidden
|perldiag/Experimental %s on scalar is now forbidden>

=begin original

This message is now followed by more helpful text.
L<[perl #127976]|https://rt.perl.org/Public/Bug/Display.html?id=127976>

=end original

このメッセージは、より助けになる文章が引き続くようになりました。
L<[perl #127976]|https://rt.perl.org/Public/Bug/Display.html?id=127976>

=item *

Experimental "%s" subs not enabled

=begin original

This warning was been removed, as lexical subs are no longer experimental.

=end original

レキシカルサブルーチンはもはや実験的ではなくなったので、この警告は
除去されました。

=item *

Having more than one /%c regexp modifier is deprecated

=begin original

This deprecation warning has been removed, since C</xx> now has a new
meaning.

=end original

C</xx> は新しい意味を持つようになったので、廃止予定警告は除去されました。

=item *

L<%s() is deprecated on C<:utf8> handles. This will be a fatal error in Perl 5.30
|perldiag/%s() is deprecated on C<:utf8> handles. This will be a fatal error in Perl 5.30>.

=begin original

where "%s" is one of C<sysread>, C<recv>, C<syswrite>, or C<send>.

=end original

ここで "%s" は C<sysread>, C<recv>, C<syswrite>, C<send> のいずれかです。

=begin original

This existing warning has had the I<this will be a fatal error> text added
in this release.

=end original

この既存の警告は、このリリースから I<this will be a fatal error> という文章が
追加されました。

=begin original

This warning is now enabled by default, as all C<deprecated> category
warnings should be.

=end original

この警告は、全ての C<deprecated> カテゴリの警告がそうであるべきように、
デフォルトで有効になりました。

=item *

L<C<$*> is no longer supported. Its use will be fatal in Perl 5.30
|perldiag/C<$*> is no longer supported. Its use will be fatal in Perl 5.30>

=begin original

This existing warning has had the I<its use will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<its use will be fatal> という文章が
追加されました。

=item *

L<C<$#> is no longer supported. Its use will be fatal in Perl 5.30
|perldiag/C<$#> is no longer supported. Its use will be fatal in Perl 5.30>

=begin original

This existing warning has had the I<its use will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<its use will be fatal> という文章が
追加されました。

=item *

L<Malformed UTF-8 character%s
|perldiag/Malformed UTF-8 character%s>

=begin original

Details as to the exact problem have been added at the end of this
message

=end original

正確な問題のための詳細がメッセージの末尾に追加されました

=item *

L<Missing or undefined argument to %s
|perldiag/Missing or undefined argument to %s>

=begin original

This warning used to warn about C<require>, even if it was actually C<do>
which being executed. It now gets the operation name right.

=end original

この警告は、実際に実行されたのが C<do> であっても、C<require> に関して
警告していました。
これは正しく実装した名前を使うようになりました。

=item *

NO-BREAK SPACE in a charnames alias definition is deprecated

=begin original

This warning has been removed as the behavior is now an error.

=end original

この振る舞いはエラーになったので、この警告は除去されました。

=item *

L<Odd nameE<sol>value argument for subroutine '%s'
|perldiag/"Odd nameE<sol>value argument for subroutine '%s'">

=begin original

This warning now includes the name of the offending subroutine.

=end original

この警告は問題のあるサブルーチンの名前を含むようになりました。

=item *

L<Opening dirhandle %s also as a file. This will be a fatal error in Perl 5.28
|perldiag/Opening dirhandle %s also as a file. This will be a fatal error in Perl 5.28>

=begin original

This existing warning has had the I<this will be a fatal error> text added
in this release.

=end original

この既存の警告は、このリリースから I<this will be a fatal error> という文章が
追加されました。

=item *

L<Opening filehandle %s also as a directory. This will be a fatal error in Perl 5.28
|perldiag/Opening filehandle %s also as a directory. This will be a fatal error in Perl 5.28>

=begin original

This existing warning has had the I<this will be a fatal error> text added
in this release.

=end original

この既存の警告は、このリリースから I<this will be a fatal error> という文章が
追加されました。

=item *

panic: ck_split, type=%u

panic: pp_split, pm=%p, s=%p

=begin original

These panic errors have been removed.

=end original

これらの panic エラーは除去されました。

=item *

Passing malformed UTF-8 to "%s" is deprecated

=begin original

This warning has been changed to the fatal
L<Malformed UTF-8 string in "%s"
|perldiag/Malformed UTF-8 string in "%s">

=end original

この警告は致命的な
L<Malformed UTF-8 string in "%s"
|perldiag/Malformed UTF-8 string in "%s">
に変更されました。

=item *

L<Setting C<< $E<sol> >> to a reference to %s as a form of slurp is deprecated, treating as undef. This will be fatal in Perl 5.28
|perldiag/Setting C<< $E<sol> >> to a reference to %s as a form of slurp is deprecated, treating as undef. This will be fatal in Perl 5.28>

=begin original

This existing warning has had the I<this will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<this will be fatal> という文章が
追加されました。

=item *

L<C<${^ENCODING}> is no longer supported. Its use will be fatal in Perl 5.28|perldiag/"${^ENCODING} is no longer supported. Its use will be fatal in Perl 5.28">

=begin original

This warning used to be: "Setting C<${^ENCODING}> is deprecated".

=end original

この警告は以下のような形でした: "Setting C<${^ENCODING}> is deprecated"

=begin original

The special action of the variable C<${^ENCODING}> was formerly used to
implement the C<encoding> pragma. As of Perl 5.26, rather than being
deprecated, assigning to this variable now has no effect except to issue
the warning.

=end original

C<${^ENCODING}> 変数の特別な行動は以前は C<encoding> プラグマの実装に
使われていました。
Perl 5.26 から、廃止予定にするのではなく、この変数への代入は
警告が発生する以外に何の効果もないようになりました。

=item *

L<Too few arguments for subroutine '%s'
|perldiag/Too few arguments for subroutine '%s'>

=begin original

This warning now includes the name of the offending subroutine.

=end original

この警告は問題のあるサブルーチンの名前を含むようになりました。

=item *

L<Too many arguments for subroutine '%s'
|perldiag/Too many arguments for subroutine '%s'>

=begin original

This warning now includes the name of the offending subroutine.

=end original

この警告は問題のあるサブルーチンの名前を含むようになりました。

=item *

L<Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.30), passed through in regex; marked by S<< E<lt>-- HERE >> in mE<sol>%sE<sol>
|perldiag/Unescaped left brace in regex is deprecated here (and will be fatal in Perl 5.30), passed through in regex; marked by S<< E<lt>-- HERE >> in mE<sol>%sE<sol>>

=begin original

This existing warning has had the I<here (and will be fatal...)> text
added in this release.

=end original

この既存の警告は、このリリースから I<here (and will be fatal...)> という文章が
追加されました。

=item *

L<Unknown charname '' is deprecated. Its use will be fatal in Perl 5.28
|perldiag/Unknown charname '' is deprecated. Its use will be fatal in Perl 5.28>

=begin original

This existing warning has had the I<its use will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<its use will be fatal> という文章が
追加されました。

=item *

L<Use of bare E<lt>E<lt> to mean E<lt>E<lt>"" is deprecated. Its use will be fatal in Perl 5.28
|perldiag/Use of bare E<lt>E<lt> to mean E<lt>E<lt>"" is deprecated. Its use will be fatal in Perl 5.28>

=begin original

This existing warning has had the I<its use will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<its use will be fatal> という文章が
追加されました。

=item *

L<Use of code point 0x%s is deprecated; the permissible max is 0x%s.  This will be fatal in Perl 5.28
|perldiag/Use of code point 0x%s is deprecated; the permissible max is 0x%s.  This will be fatal in Perl 5.28>

=begin original

This existing warning has had the I<this will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<this will be fatal> という文章が
追加されました。

=item *

L<Use of comma-less variable list is deprecated. Its use will be fatal in Perl 5.28
|perldiag/Use of comma-less variable list is deprecated. Its use will be fatal in Perl 5.28>

=begin original

This existing warning has had the I<its use will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<its use will be fatal> という文章が
追加されました。

=item *

L<Use of inherited C<AUTOLOAD> for non-method %s() is deprecated. This will be fatal in Perl 5.28
|perldiag/Use of inherited C<AUTOLOAD> for non-method %s() is deprecated. This will be fatal in Perl 5.28>

=begin original

This existing warning has had the I<this will be fatal> text added in
this release.

=end original

この既存の警告は、このリリースから I<this will be fatal> という文章が
追加されました。

=item *

L<Use of strings with code points over 0xFF as arguments to %s operator is deprecated. This will be a fatal error in Perl 5.28
|perldiag/Use of strings with code points over 0xFF as arguments to %s operator is deprecated. This will be a fatal error in Perl 5.28>

=begin original

This existing warning has had the I<this will be a fatal error> text added in
this release.

=end original

この既存の警告は、このリリースから I<this will be a fatal error> という文章が
追加されました。

=back

=head1 Utility Changes

(ツールの変更)

=head2 F<c2ph> and F<pstruct>

=over 4

=item *

=begin original

These old utilities have long since superceded by L<h2xs>, and are
now gone from the distribution.

=end original

これらの古いツールは L<h2xs> に置き換えられて長い時間が経っています; そして
今回配布から取り除かれました。

=back

=head2 F<Porting/pod_lib.pl>

=over 4

=item *

=begin original

Removed spurious executable bit.

=end original

誤った実行ビットが除去されました。

=item *

=begin original

Account for the possibility of DOS file endings.

=end original

DOS ファイル終端の可能性を考慮するようになりました。

=back

=head2 F<Porting/sync-with-cpan>

=over 4

=item *

=begin original

Many improvements.

=end original

多くの改良が行われました。

=back

=head2 F<perf/benchmarks>

=over 4

=item *

=begin original

Tidy file, rename some symbols.

=end original

ファイルが整理され、一部のシンボルの名前が変わりました。

=back

=head2 F<Porting/checkAUTHORS.pl>

=over 4

=item *

=begin original

Replace obscure character range with C<\w>.

=end original

不明瞭な文字範囲が C<\w> で置き換えられました。

=back

=head2 F<t/porting/regen.t>

=over 4

=item *

=begin original

Try to be more helpful when tests fail.

=end original

テストに失敗したときにより助けになろうとするようになりました。

=back

=head2 F<utils/h2xs.PL>

=over 4

=item *

=begin original

Avoid infinite loop for enums.

=end original

enum の無限ループが回避されました。

=back

=head2 L<perlbug>

=over 4

=item *

=begin original

Long lines in the message body are now wrapped at 900 characters, to stay
well within the 1000-character limit imposed by SMTP mail transfer agents.
This is particularly likely to be important for the list of arguments to
F<Configure>, which can readily exceed the limit if, for example, it names
several non-default installation paths.  This change also adds the first unit
tests for perlbug.
L<[perl #128020]|https://rt.perl.org/Public/Bug/Display.html?id=128020>

=end original

メッセージ本体の長い行は 900 文字でラップされるようになりました; 
SMTP メール転送エージェントに課されている 1000 文字制限に余裕を持って
納めるためです。
これは特に、F<Configure> への引数のリストで重要です;
例えば、複数の非デフォルトインストールパスを指定するとすぐに制限を
超えることがあるからです。
この変更により perlbug への最初の単体テストが追加されました。
L<[perl #128020]|https://rt.perl.org/Public/Bug/Display.html?id=128020>

=back

=head1 Configuration and Compilation

(設定とコンパイル)

=over 4

=item *

=begin original

C<-Ddefault_inc_excludes_dot> has added, and enabled by default.

=end original

C<-Ddefault_inc_excludes_dot> が追加され、デフォルトで有効になりました。

=item *

=begin original

The C<dtrace> build process has further changes
L<[perl #130108]|https://rt.perl.org/Public/Bug/Display.html?id=130108>:

=end original

C<dtrace> ビルドプロセスはさらに変更されました:
L<[perl #130108]|https://rt.perl.org/Public/Bug/Display.html?id=130108>:

=over

=item *

=begin original

If the C<-xnolibs> is available, use that so a F<dtrace> perl can be
built within a FreeBSD jail.

=end original

C<-xnolibs> が有効なら、これを使うので、F<dtrace> perl は
FreeBSD jail の中でビルド出来るようになります。

=item *

=begin original

On systems that build a F<dtrace> object file (FreeBSD, Solaris, and
SystemTap's dtrace emulation), copy the input objects to a separate
directory and process them there, and use those objects in the link,
since C<dtrace -G> also modifies these objects.

=end original

F<dtrace> オブジェクトファイルをビルドするシステム (FreeBSD, Solaris,
SystemTap の dtrace エミュレーション) では、
入力オブジェクトを別のディレクトリにコピーしてそこで処理し、
リンク時にそのオブジェクトを使うようになりました;
なぜなら C<dtrace -G> もこれらのオブジェクトを変更するからです。

=item *

=begin original

Add F<libelf> to the build on FreeBSD 10.x, since F<dtrace> adds
references to F<libelf> symbols.

=end original

FreeBSD 10.x でビルドするために F<libelf> を追加します;
F<dtrace> は F<libelf> シンボルへの参照を追加するからです。

=item *

=begin original

Generate a dummy F<dtrace_main.o> if C<dtrace -G> fails to build it.  A
default build on Solaris generates probes from the unused inline
functions, while they don't on FreeBSD, which causes C<dtrace -G> to
fail.

=end original

C<dtrace -G> がビルドに失敗すると、ダミーの F<dtrace_main.o> を生成します。
Solaris のデフォルトビルドは未使用のインライン関数からのプローブを
生成する一方、FreeBSD では生成しないので C<dtrace -G> が失敗します。

=back

=item *

=begin original

You can now disable perl's use of the C<PERL_HASH_SEED> and
C<PERL_PERTURB_KEYS> environment variables by configuring perl with
C<-Accflags=NO_PERL_HASH_ENV>.

=end original

perl を C<-Accflags=NO_PERL_HASH_ENV> と設定することで、
perl が C<PERL_HASH_SEED> と C<PERL_PERTURB_KEYS> 環境変数を使うのを
無効化できるようになりました。

=item *

=begin original

You can now disable perl's use of the C<PERL_HASH_SEED_DEBUG> environment
variable by configuring perl with
C<-Accflags=-DNO_PERL_HASH_SEED_DEBUG>.

=end original

perl を C<-Accflags=-DNO_PERL_HASH_SEED_DEBUG> と設定することで、
perl が C<PERL_HASH_SEED_DEBUG> 環境変数を使うのを
無効化できるようになりました。

=item *

=begin original

F<Configure> now zeroes out the alignment bytes when calculating the bytes
for 80-bit C<NaN> and C<Inf> to make builds more reproducible.
L<[perl #130133]|https://rt.perl.org/Public/Bug/Display.html?id=130133>

=end original

F<Configure> は、より再現可能なビルドを行うために、
80 ビット C<NaN> と C<Inf> のバイトを計算するときにアライメントバイトを
ゼロにするようになりました。
L<[perl #130133]|https://rt.perl.org/Public/Bug/Display.html?id=130133>

=item *

=begin original

Since v5.18, for testing purposes we have included support for
building perl with a variety of non-standard, and non-recommended
hash functions.  Since we do not recommend the use of these functions,
we have removed them and their corresponding build options.  Specifically
this includes the following build options:

=end original

v5.18 から、テストのために私たちは様々な非標準で非推奨なハッシュ関数を
使った perl のビルド対応を含んでいました。
私たちはこれらの関数の使用を勧めていないので、これらと対応する
ビルドオプションを除去しました。
特に、これには以下のビルドオプションを含みます:

    PERL_HASH_FUNC_SDBM
    PERL_HASH_FUNC_DJB2
    PERL_HASH_FUNC_SUPERFAST
    PERL_HASH_FUNC_MURMUR3
    PERL_HASH_FUNC_ONE_AT_A_TIME
    PERL_HASH_FUNC_ONE_AT_A_TIME_OLD
    PERL_HASH_FUNC_MURMUR_HASH_64A
    PERL_HASH_FUNC_MURMUR_HASH_64B

=item *

=begin original

Remove "Warning: perl appears in your path"

=end original

"Warning: perl appears in your path" の除去

=begin original

This install warning is more or less obsolete, since most platforms already
B<will> have a F</usr/bin/perl> or similar provided by the OS.

=end original

このインストール警告は多かれ少なかれ古いものです;
ほとんどのプラットフォームでは既に OS によって提供されている
F</usr/bin/perl> のようなものが B<ある> からです。

=item *

=begin original

Reduce verbosity of C<make install.man>

=end original

C<make install.man> の詳細度の減少

=begin original

Previously, two progress messages were emitted for each manpage: one by
installman itself, and one by the function in F<install_lib.pl> that it calls to
actually install the file.  Disabling the second of those in each case saves
over 750 lines of unhelpful output.

=end original

以前は、二つの進捗メッセージがそれぞれの man ページに出力されていました;
一つは installman 自身、もう一つは実際にファイルをインストールするために
呼び出される F<install_lib.pl> の関数によるものです。
それぞれの場合で二つ目を無効にすることで助けにならない 750 行以上の
出力が省略されました。

=item *

=begin original

Cleanup for C<clang -Weverything> support.
L<[perl #129961]|https://rt.perl.org/Public/Bug/Display.html?id=129961>

=end original

C<clang -Weverything> 対応のための整理。
L<[perl #129961]|https://rt.perl.org/Public/Bug/Display.html?id=129961>

=item *

=begin original

F<Configure>: signbit scan was assuming too much, stop assuming negative 0.

=end original

F<Configure>: 符号ミットのスキャンは多くを仮定しすぎていました;
負の 0 を仮定するのを止めました。

=item *

=begin original

Various compiler warnings have been silenced.

=end original

様々なコンパイラ警告が黙らされました。

=item *

=begin original

Several smaller changes have been made to remove impediments to compiling
under C++11.

=end original

C+11 でコンパイルするための障害を除去するためのいくつかの小さな変更が
行われました。

=item *

=begin original

Builds using C<USE_PAD_RESET> now work again; this configuration had
bit-rotted.

=end original

C<USE_PAD_RESET> を使ったビルドは再び動作するようになりました;
この設定は少しおかしくなっていました。

=item *

=begin original

A probe for C<gai_strerror> was added to F<Configure> that checks if
the C<gai_strerror()> routine is available and can be used to
translate error codes returned by C<getaddrinfo()> into human
readable strings.

=end original


C<gai_strerror()> ルーチンが利用可能で、C<getaddrinfo()> から返された
エラーコードから人間可読な文字列への変換に使えるかどうかをチェックする
C<gai_strerror> プローブが F<Configure> に追加されました。

=item *

=begin original

F<Configure> now aborts if both C<-Duselongdouble> and C<-Dusequadmath> are
requested.
L<[perl #126203]|https://rt.perl.org/Public/Bug/Display.html?id=126203>

=end original

F<Configure> は、C<-Duselongdouble> と C<-Dusequadmath> の両方が
要求された場合は中断するようになりました。
L<[perl #126203]|https://rt.perl.org/Public/Bug/Display.html?id=126203>

=item *

=begin original

Fixed a bug in which F<Configure> could append C<-quadmath> to the
archname even if it was already present.
L<[perl #128538]|https://rt.perl.org/Public/Bug/Display.html?id=128538>

=end original

F<Configure> が、既に存在していても archname に C<-quadmath> を
追加することがあるバグが修正されました。
L<[perl #128538]|https://rt.perl.org/Public/Bug/Display.html?id=128538>

=item *

=begin original

Clang builds with C<-DPERL_GLOBAL_STRUCT> or
C<-DPERL_GLOBAL_STRUCT_PRIVATE> have
been fixed (by disabling Thread Safety Analysis for these configurations).

=end original

C<-DPERL_GLOBAL_STRUCT> や C<-DPERL_GLOBAL_STRUCT_PRIVATE> での
Clang のビルドが (これらの設定での Thread Safety Analysis を
無効にすることで) 修正されました。

=item *

=begin original

F<make_ext.pl> no longer updates a module's F<pm_to_blib> file when no
files require updates.  This could cause dependencies, F<perlmain.c>
in particular, to be rebuilt unnecessarily.
L<[perl #126710]|https://rt.perl.org/Public/Bug/Display.html?id=126710>

=end original

F<make_ext.pl> は、必要なファイルが更新されていない場合は、
モジュールの F<pm_to_blib> ファイルを更新しなくなりました。
これにより、依存ファイル、特に F<perlmain.c> が不必要に
再ビルドされることがありました。
L<[perl #126710]|https://rt.perl.org/Public/Bug/Display.html?id=126710>

=item *

=begin original

The output of C<perl -V> has been reformatted so that each configuration
and compile-time option is now listed one per line, to improve
readability.

=end original

C<perl -V> の出力が再構成され、可読性の向上のために、各設定
とコンパイル時オプションが 1 行に一つずつ出力されるようになりました。

=item *

=begin original

F<Configure> now builds C<miniperl> and C<generate_uudmap> if you
invoke it with C<-Dusecrosscompiler> but not C<-Dtargethost=somehost>.
This means you can supply your target platform C<config.sh>, generate
the headers and proceed to build your cross-target perl.
L<[perl #127234]|https://rt.perl.org/Public/Bug/Display.html?id=127234>

=end original

F<Configure> が C<-Dusecrosscompiler> ありかつ
C<-Dtargethost=somehost> なしで起動された場合、
C<miniperl> と C<generate_uudmap> をビルドするようになりました。
これにより、C<config.sh> にターゲットプラットフォームを指定して、
ヘッダを生成し、クロスターゲット perl のビルドを進められるようになりました。
L<[perl #127234]|https://rt.perl.org/Public/Bug/Display.html?id=127234>

=item *

=begin original

Perl built with C<-Accflags=-DPERL_TRACE_OPS> now only dumps the operator
counts when the environment variable C<PERL_TRACE_OPS> is set to a
non-zero integer.  This allows C<make test> to pass on such a build.

=end original

C<-Accflags=-DPERL_TRACE_OPS> 付きでビルドされた Perl は
C<PERL_TRACE_OPS> 環境変数が非 0 整数に設定された場合に演算子カウントのみを
ダンプするようになりました。
これにより、このようなビルドで C<make test> がパスするようになりました。

=item *

=begin original

When building with GCC 6 and link-time optimization (the C<-flto> option to
C<gcc>), F<Configure> was treating all probed symbols as present on the
system, regardless of whether they actually exist.  This has been fixed.
L<[perl #128131]|https://rt.perl.org/Public/Bug/Display.html?id=128131>

=end original

GCC 6 とリンク時最適化 (C<gcc> の C<-flto> オプション) でビルドされたとき、
F<Configure> はプローブされたシンボルに関して、実際に存在するかどうかに
関わらず全て存在するものとして扱っていました。
これは修正されました。
L<[perl #128131]|https://rt.perl.org/Public/Bug/Display.html?id=128131>

=item *

=begin original

The F<t/test.pl> library is used for internal testing of Perl itself, and
also copied by several CPAN modules.  Some of those modules must work on
older versions of Perl, so F<t/test.pl> must in turn avoid newer Perl
features.  Compatibility with Perl 5.8 was inadvertently removed some time
ago; it has now been restored.
L<[perl #128052]|https://rt.perl.org/Public/Bug/Display.html?id=128052>

=end original

F<t/test.pl> ライブラリは Perl 自身の内部テストで使われていて、
いくつかの CPAN モジュールによってコピーされています。
これらのモジュールの一部は古いバージョンの Perl で動作しなければならないので、
F<t/test.pl> は新しい Perl の機能を避けなければなりません。
少し前に不注意で Perl 5.8 との互換性がなくなっていました;
これは回復されました。
L<[perl #128052]|https://rt.perl.org/Public/Bug/Display.html?id=128052>

=item *

=begin original

The build process no longer emits an extra blank line before building each
"simple" extension (those with only F<*.pm> and F<*.pod> files).

=end original

ビルドプロセスはもはやそれぞれの「単純な」(F<*.pm> と F<*.pod> ファイルのみの)
エクステンションのビルドの前に余分な空行を出力しなくなりました。

=back

=head1 Testing

(テスト)

=begin original

Tests were added and changed to reflect the other additions and changes
in this release.  Furthermore, these substantive changes were made:

=end original

テストはこのリリースでのその他の追加や変更を反映して追加や変更されました。
さらに、以下の実質的な変更が行われました:

=over 4

=item *

=begin original

A new test script, F<comp/parser_run.t>, has been added that is like
F<comp/parser.t> but with F<test.pl> included so that C<runperl()> and the
like are available for use.

=end original

F<comp/parser.t> と同様ですが F<test.pl> を含んでいるので
C<runperl()> と同様なものが使える、
新しいテストスクリプトである F<comp/parser_run.t> が追加されました。

=item *

=begin original

Tests for locales were erroneously using locales incompatible with Perl.

=end original

ロケールのテストは誤って Perl と互換性のないロケールを使っていました。

=item *

=begin original

Some parts of the test suite that try to exhaustively test edge cases in the
regex implementation have been restricted to running for a maximum of five
minutes.  On slow systems they could otherwise take several hours, without
significantly improving our understanding of the correctness of the code
under test.

=end original

正規表現の実装に関するエッジケースを徹底的に試すような、テストスイートの
一部のパートは、最大実行時間を 5 分間に制限するようになりました。
さもなければ、テストでのコードの正当性に対する私たちの理解を大幅に
向上させない限り、遅いシステムでは数時間かかることがあります。

=item *

=begin original

A new internal facility allows analysing the time taken by the individual
tests in Perl's own test suite; see F<Porting/harness-timer-report.pl>.

=end original

新しい内部機能により、Perl 自身のテストスイートの個々のテストで
掛かった時間を解析できるようになりました;
F<Porting/harness-timer-report.pl> を参照してください。

=item *

=begin original

F<t/re/regexp_nonull.t> has been added to test that the regular expression
engine can handle scalars that do not have a null byte just past the end of
the string.

=end original

正規表現エンジンが文字列の末尾にヌルバイトがないスカラを扱えることを
テストするための F<t/re/regexp_nonull.t> が追加されました。

=item *

=begin original

A new test script, F<t/op/decl-refs.t>, has been added to test the new feature
L</Declaring a reference to a variable>.

=end original

新しいテストスクリプト F<t/op/decl-refs.t> が、新しい機能
L</Declaring a reference to a variable> をテストするために追加されました。

=item *

=begin original

A new test script, F<t/re/keep_tabs.t> has been added to contain tests
where C<\t> characters should not be expanded into spaces.

=end original

新しいテストスクリプト F<t/re/keep_tabs.t> が、
C<\t> 文字が空白に展開されるべきではないテストのために追加されました。

=item *

=begin original

A new test script, F<t/re/anyof.t>, has been added to test that the ANYOF nodes
generated by bracketed character classes are as expected.

=end original

新しいテストスクリプト F<t/re/anyof.t> が、大かっこ文字列で生成された
ANYOF ノードが想定通りかをテストするために追加されました。

=item *

=begin original

There is now more extensive testing of the Unicode-related API macros
and functions.

=end original

Unicode 関連の API マクロと関数に関してより広範囲に
テストするようになりました。

=item *

=begin original

Several of the longer running API test files have been split into
multiple test files so that they can be run in parallel.

=end original

長時間実行される API テストファイルのいくつかが複数のテストファイルに
分割され、平行して実行できるようになりました。

=item *

=begin original

F<t/harness> now tries really hard not to run tests which are located
outside of the Perl source tree.
L<[perl #124050]|https://rt.perl.org/Public/Bug/Display.html?id=124050>

=end original

F<t/harness> は Perl ソースツリー外にあるテストをできるだけ
実行しないようになりました。
L<[perl #124050]|https://rt.perl.org/Public/Bug/Display.html?id=124050>

=item *

=begin original

Prevent debugger tests (F<lib/perl5db.t>) from failing due to the contents
of C<$ENV{PERLDB_OPTS}>.
L<[perl #130445]|https://rt.perl.org/Public/Bug/Display.html?id=130445>

=end original

デバッガテスト (F<lib/perl5db.t>) が C<$ENV{PERLDB_OPTS}> の内容によって
失敗しないようになりました。
L<[perl #130445]|https://rt.perl.org/Public/Bug/Display.html?id=130445>

=back

=head1 Platform Support

(プラットフォーム対応)

=head2 New Platforms

(新しいプラットフォーム)

=over 4

=item NetBSD/VAX

=begin original

Perl now compiles under NetBSD on VAX machines.  However, it's not
possible for that platform to implement floating-point infinities and
NaNs compatible with most modern systems, which implement the IEEE-754
floating point standard.  The hexadecimal floating point (C<0x...p[+-]n>
literals, C<printf %a>) is not implemented, either.
The C<make test> passes 98% of tests.

=end original

Perl は VAX マシン上の NetBSD でコンパイルできるようになりました。
しかし、このプラットフォームのために、
IEEE-754 浮動小数点数標準を実装しているほとんどのモダンなシステムと
互換性のある浮動小数点数の無限と NaN を実装することはできません。
16 進浮動小数点数 (C<0x...p[+-]n> リテラルと C<printf %a>) も
実装されていません。
C<make test> は、テストの 98% にパスします。

=over 4

=item *

=begin original

Test fixes and minor updates.

=end original

テストの修正と小さい更新。

=item *

=begin original

Account for lack of C<inf>, C<nan>, and C<-0.0> support.

=end original

C<inf>, C<nan>, C<-0.0> がない場合の対応。

=back

=back

=head2 Platform-Specific Notes

(プラットフォーム固有の注意)

=over 4

=item Darwin

=over 4

=item *

=begin original

Don't treat C<-Dprefix=/usr> as special: instead require an extra option
C<-Ddarwin_distribution> to produce the same results.

=end original

C<-Dprefix=/usr> を特別扱いしません: 代わりに、同じ結果を生成するために
追加の C<-Ddarwin_distribution> オプションが必要です。

=item *

=begin original

OS X El Capitan doesn't implement the C<clock_gettime()> or
C<clock_getres()> APIs; emulate them as necessary.

=end original

OS X El Capitan は C<clock_gettime()> や C<clock_getres()> API を
実装していません; 必要な場合これらをエミュレートします。

=item *

=begin original

Deprecated C<syscall(2)> on macOS 10.12.

=end original

macOS 10.12 では C<syscall(2)> は廃止予定です。

=back

=item EBCDIC

=begin original

Several tests have been updated to work (or be skipped) on EBCDIC platforms.

=end original

いくつかのテストは EBCDIC プラットフォームで動作(またはスキップ)するように
更新されました。

=item HP-UX

=begin original

The L<Net::Ping> UDP test is now skipped on HP-UX.

=end original

L<Net::Ping> UDP テストは HP-UX ではスキップするようになりました。

=item Hurd

=begin original

The hints for Hurd have been improved, enabling malloc wrap and reporting the
GNU libc used (previously it was an empty string when reported).

=end original

Hurd のためのヒントが改良され、malloc ラップが有効になり、GNU libc が
使われているように報告します (以前は報告されるときは空文字列でした)。

=item VAX

=begin original

VAX floating point formats are now supported on NetBSD.

=end original

VAX 浮動小数点形式は NetBSD で対応されるようになりました。

=item VMS

=over 4

=item *

=begin original

The path separator for the C<PERL5LIB> and C<PERLLIB> environment entries is
now a colon (C<":">) when running under a Unix shell.  There is no change when
running under DCL (it's still C<"|">).

=end original

C<PERL5LIB> と C<PERLLIB> 環境変数のパス区切りは、Unix シェルの基で
実行されているときはコロン (C<":">) になりました。
DCL の基で実行されているときは変更はありません (C<"|"> のままです)。

=item *

=begin original

F<configure.com> now recognizes the VSI-branded C compiler and no longer
recognizes the "DEC"-branded C compiler (as there hasn't been such a thing for
15 or more years).

=end original

F<configure.com> は VSI ブランドの C コンパイラを認識するようになり、
(もう 15 年以上もそのようなものはないので) もはや "DEC" ブランドの
C コンパイラを認識しなくなりました。

=back

=item Windows

=over 4

=item *

=begin original

Support for compiling perl on Windows using Microsoft Visual Studio 2015
(containing Visual C++ 14.0) has been added.

=end original

(Visual C++ 14.0 を含む) Microsoft Visual Studio 2015 を使った Windows 版
perl のビルド対応が追加されました。

=begin original

This version of VC++ includes a completely rewritten C run-time library, some
of the changes in which mean that work done to resolve a socket
C<close()> bug in
perl #120091 and perl #118059 is not workable in its current state with this
version of VC++.  Therefore, we have effectively reverted that bug fix for
VS2015 onwards on the basis that being able to build with VS2015 onwards is
more important than keeping the bug fix.  We may revisit this in the future to
attempt to fix the bug again in a way that is compatible with VS2015.

=end original

このバージョンの VC++ は完全に書き直された C ランタイムを含んでおり、
perl #120091 and perl #118059 のソケット C<close()> バグの解決のために
行われた変更が現在のバージョンの VC++ の現在の状況では動作しないことを
意味します。
従って、VS2015 以降でビルドできることが、このバグ修正を維持することよりも
重要であるという判断に基づいて、私たちは VS2015 以降ではこのバグ修正を
取り消しました。
私たちは VS2015 との互換性という点でこのバグを再び修正しようとするために
将来ここに戻ってくる予定です。

=begin original

These changes do not affect compilation with GCC or with Visual Studio versions
up to and including VS2013, I<i.e.>, the bug fix is retained (unchanged) for those
compilers.

=end original

この変更は、GCC や VS2013 以前のバージョンの Visual Studio には影響しません;
I<つまり>, これらのコンパイラではバグ修正は(無変更で)残っています。

=begin original

Note that you may experience compatibility problems if you mix a perl built
with GCC or VS E<lt>= VS2013 with XS modules built with VS2015, or if you mix a
perl built with VS2015 with XS modules built with GCC or VS E<lt>= VS2013.
Some incompatibility may arise because of the bug fix that has been reverted
for VS2015 builds of perl, but there may well be incompatibility anyway because
of the rewritten CRT in VS2015 (I<e.g.>, see discussion at
L<http://stackoverflow.com/questions/30412951>).

=end original

GCC や VS E<lt>= VS2013 でビルドした perl と VS2015 でビルドした
XS モジュールを混ぜたり、VS2015 でビルドした perl と GCC や
VS E<lt>= VS2013 でビルドしたXS モジュールを混ぜたりすると、互換性問題を
経験するかもしれないことに注意してください。
非互換性の一部は perl の VS2015 ビルドのためのバグ修正の取消しのために
起こりますが、同様にそもそも VS2015 での CRT の書き直しによる
非互換性もあります (I<例えば>,
L<http://stackoverflow.com/questions/30412951> での議論を参照してください)。

=item *

=begin original

It now automatically detects GCC versus Visual C and sets the VC version
number on Win32.

=end original

Visual C に対する GCC を自動的に検出して、Win32 での VC バージョンを
設定するようになりました。

=back

=item Linux

=begin original

Drop support for Linux F<a.out> executable format. Linux has used ELF for
over twenty years.

=end original

Linux F<a.out> 実行ファイル型式対応が削除されました。
Linux は 20 年以上 ELF を使っています。

=item OpenBSD 6

=begin original

OpenBSD 6 still does not support returning C<pid>, C<gid>, or C<uid> with
C<SA_SIGINFO>.  Make sure to account for it.

=end original

OpenBSD 6 はまだ C<SA_SIGINFO> で C<pid>, C<gid>, C<uid> を返すことに
対応していません。
これを考慮するようになりました。

=item FreeBSD

=begin original

F<t/uni/overload.t>: Skip hanging test on FreeBSD.

=end original

F<t/uni/overload.t>: FreeBSD でのハングテストをスキップします。

=item DragonFly BSD

=begin original

DragonFly BSD now has support for C<setproctitle()>.
L<[perl #130068]|https://rt.perl.org/Public/Bug/Display.html?id=130068>.

=end original

DragonFly BSD は C<setproctitle()> に対応するようになりました。
L<[perl #130068]|https://rt.perl.org/Public/Bug/Display.html?id=130068>.

=back

=head1 Internal Changes

(内部の変更)

=over 4

=item *

=begin original

A new API function L<C<sv_setpv_bufsize()>|perlapi/sv_setpv_bufsize>
allows simultaneously setting the
length and the allocated size of the buffer in an C<SV>, growing the
buffer if necessary.

=end original

新しい API 関数 L<C<sv_setpv_bufsize()>|perlapi/sv_setpv_bufsize> は
C<SV> のバッファの長さと割り当てサイズを同時に設定できます;
必要ならバッファを拡張します。

=item *

=begin original

A new API macro L<C<SvPVCLEAR()>|perlapi/SvPVCLEAR> sets its C<SV>
argument to an empty string,
like Perl-space C<$x = ''>, but with several optimisations.

=end original

新しい API マクロ L<C<SvPVCLEAR()>|perlapi/SvPVCLEAR> は、
Perl 空間での C<$x = ''> のように、その C<SV> 引数に空文字列を代入しますが、
いくつかの最適化が行われます。

=item *

=begin original

Several new macros and functions for dealing with Unicode and
UTF-8-encoded strings have been added to the API, as well as some
changes in the
functionality of existing functions (see L<perlapi/Unicode Support> for
more details):

=end original

Unicode と UTF-8 エンコードされた文字列を扱ういくつかの新しいマクロと
関数が API に追加され、
既存の関数の機能が一部変更されました
(さらなる詳細については L<perlapi/Unicode Support> を参照してください):

=over

=item *

=begin original

New versions of the API macros like C<isALPHA_utf8> and C<toLOWER_utf8>
have been added, each with the suffix C<_safe>, like
L<C<isSPACE_utf8_safe>|perlapi/isSPACE>.  These take an extra
parameter, giving an upper
limit of how far into the string it is safe to read.  Using the old
versions could cause attempts to read beyond the end of the input buffer
if the UTF-8 is not well-formed, and their use now raises a deprecation
warning.  Details are at L<perlapi/Character classification>.

=end original

C<isALPHA_utf8> や C<toLOWER_utf8> ような API マクロに新しいバージョンが
追加されました; L<C<isSPACE_utf8_safe>|perlapi/isSPACE> のように、
それぞれの末尾に C<_safe> が追加されたものです。
これらは追加の引数を取り、文字列を安全に読み込める最大数を指定します。
古いバージョンを使うと、UTF-8 が整形されていない場合に
入力バッファの末尾を越えて読み込もうとする場合があるので、
これらの使用は廃止予定警告が出力されるようになりました。
詳細は L<perlapi/Character classification> にあります。

=item *

=begin original

Macros like L<C<isALPHA_utf8>|perlapi/isALPHA> and
L<C<toLOWER_utf8>|perlapi/toLOWER_utf8> now die if they detect
that their input UTF-8 is malformed.  A deprecation warning had been
issued since Perl 5.18.

=end original

L<C<isALPHA_utf8>|perlapi/isALPHA> や
L<C<toLOWER_utf8>|perlapi/toLOWER_utf8> のようなマクロは、入力 UTF-8 が
不正であることを検出したときに die するようになりました。
廃止予定警告は Perl 5.18 から出力されていました。

=item *

=begin original

Several new macros for analysing the validity of utf8 sequences. These
are:

=end original

utf8 並びの有効性を解析するためのいくつかの新しいマクロ。その一覧は:

L<C<UTF8_GOT_ABOVE_31_BIT>|perlapi/UTF8_GOT_ABOVE_31_BIT>
L<C<UTF8_GOT_CONTINUATION>|perlapi/UTF8_GOT_CONTINUATION>
L<C<UTF8_GOT_EMPTY>|perlapi/UTF8_GOT_EMPTY>
L<C<UTF8_GOT_LONG>|perlapi/UTF8_GOT_LONG>
L<C<UTF8_GOT_NONCHAR>|perlapi/UTF8_GOT_NONCHAR>
L<C<UTF8_GOT_NON_CONTINUATION>|perlapi/UTF8_GOT_NON_CONTINUATION>
L<C<UTF8_GOT_OVERFLOW>|perlapi/UTF8_GOT_OVERFLOW>
L<C<UTF8_GOT_SHORT>|perlapi/UTF8_GOT_SHORT>
L<C<UTF8_GOT_SUPER>|perlapi/UTF8_GOT_SUPER>
L<C<UTF8_GOT_SURROGATE>|perlapi/UTF8_GOT_SURROGATE>
L<C<UTF8_IS_INVARIANT>|perlapi/UTF8_IS_INVARIANT>
L<C<UTF8_IS_NONCHAR>|perlapi/UTF8_IS_NONCHAR>
L<C<UTF8_IS_SUPER>|perlapi/UTF8_IS_SUPER>
L<C<UTF8_IS_SURROGATE>|perlapi/UTF8_IS_SURROGATE>
L<C<UVCHR_IS_INVARIANT>|perlapi/UVCHR_IS_INVARIANT>
L<C<isUTF8_CHAR_flags>|perlapi/isUTF8_CHAR_flags>
L<C<isSTRICT_UTF8_CHAR>|perlapi/isSTRICT_UTF8_CHAR>
L<C<isC9_STRICT_UTF8_CHAR>|perlapi/isC9_STRICT_UTF8_CHAR>

=item *

=begin original

Functions that are all extensions of the C<is_utf8_string_I<*>()> functions,
that apply various restrictions to the UTF-8 recognized as valid:

=end original

全て C<is_utf8_string_I<*>()> の拡張である関数;
UTF-8 が正当であると認識するために様々な制限が適用されます:

L<C<is_strict_utf8_string>|perlapi/is_strict_utf8_string>,
L<C<is_strict_utf8_string_loc>|perlapi/is_strict_utf8_string_loc>,
L<C<is_strict_utf8_string_loclen>|perlapi/is_strict_utf8_string_loclen>,

L<C<is_c9strict_utf8_string>|perlapi/is_c9strict_utf8_string>,
L<C<is_c9strict_utf8_string_loc>|perlapi/is_c9strict_utf8_string_loc>,
L<C<is_c9strict_utf8_string_loclen>|perlapi/is_c9strict_utf8_string_loclen>,

L<C<is_utf8_string_flags>|perlapi/is_utf8_string_flags>,
L<C<is_utf8_string_loc_flags>|perlapi/is_utf8_string_loc_flags>,
L<C<is_utf8_string_loclen_flags>|perlapi/is_utf8_string_loclen_flags>,

L<C<is_utf8_fixed_width_buf_flags>|perlapi/is_utf8_fixed_width_buf_flags>,
L<C<is_utf8_fixed_width_buf_loc_flags>|perlapi/is_utf8_fixed_width_buf_loc_flags>,
L<C<is_utf8_fixed_width_buf_loclen_flags>|perlapi/is_utf8_fixed_width_buf_loclen_flags>.

L<C<is_utf8_invariant_string>|perlapi/is_utf8_invariant_string>.
L<C<is_utf8_valid_partial_char>|perlapi/is_utf8_valid_partial_char>.
L<C<is_utf8_valid_partial_char_flags>|perlapi/is_utf8_valid_partial_char_flags>.

=item *

=begin original

The functions L<C<utf8n_to_uvchr>|perlapi/utf8n_to_uvchr> and its
derivatives have had several changes of behaviour.

=end original

L<C<utf8n_to_uvchr>|perlapi/utf8n_to_uvchr> とその派生関数は振る舞いが
いくつか変更されました。

=begin original

Calling them, while passing a string length of 0 is now asserted against
in DEBUGGING builds, and otherwise, returns the Unicode REPLACEMENT
CHARACTER.   If you have nothing to decode, you shouldn't call the decode
function.

=end original

長さ 0 の文字列を渡してこれらを呼び出すと、DEBUGGING ビルドのときには
アサートされる一方、そうでない場合は Unicode REPLACEMENT
CHARACTER が返ります。
デコードするものが何もない場合は、デコード関数を呼び出すべきではありません。

=begin original

They now return the Unicode REPLACEMENT CHARACTER if called with UTF-8
that has the overlong malformation and that malformation is allowed by
the input parameters.  This malformation is where the UTF-8 looks valid
syntactically, but there is a shorter sequence that yields the same code
point.  This has been forbidden since Unicode version 3.1.

=end original

長すぎる不正の UTF-8 で呼び出され、不正が入力引数として認められている場合、
Unicode REPLACEMENT CHARACTER を返すようになりました。
この不正は、UTF-8 が文法的には正当に見えるけれども、同じ符号位置になる
より短い並びがある場合です。
これは Unicode バージョン 3.1 から禁止されました。

=begin original

They now accept an input
flag to allow the overflow malformation.  This malformation is when the
UTF-8 may be syntactically valid, but the code point it represents is
not capable of being represented in the word length on the platform.
What "allowed" means, in this case, is that the function doesn't return an
error, and it advances the parse pointer to beyond the UTF-8 in
question, but it returns the Unicode REPLACEMENT CHARACTER as the value
of the code point (since the real value is not representable).

=end original

これらはオーバーフロー不正を許すという入力フラグを
受け付けるようになりました。
この不正は、UTF-8 が文法的は正当であるけれども、表現している符号位置が
プラットフォームのワード長で表現できない場合です。
この場合の「許す」とは、関数はエラーを返さず、問題の UTF-8 の先まで
パースのポインタを進めるけれども、その符号位置の値として
(実際の値は表現できないので) Unicode REPLACEMENT CHARACTER を
返すということです。

=begin original

They no longer abandon searching for other malformations when the first
one is encountered.  A call to one of these functions thus can generate
multiple diagnostics, instead of just one.

=end original

これらはもはや、最初の不正入力に出会った後、他の不正入力を探すのを
中断しなくなりました。
従って、これらの関数の一つを呼び出すと、一つではなく複数の診断メッセージが
生成されることがあります。

=item *

=begin original

L<C<valid_utf8_to_uvchr()>|perlapi/valid_utf8_to_uvchr> has been added
to the API (although it was
present in core earlier). Like C<utf8_to_uvchr_buf()>, but assumes that
the next character is well-formed.  Use with caution.

=end original

(以前からコアには存在していましたが)
L<C<valid_utf8_to_uvchr()>|perlapi/valid_utf8_to_uvchr> が API に
追加されました。
C<utf8_to_uvchr_buf()> と同様ですが、次の文字が正当であることを仮定します。
注意して使ってください。

=item *

=begin original

A new function, L<C<utf8n_to_uvchr_error>|perlapi/utf8n_to_uvchr_error>,
has been added for
use by modules that need to know the details of UTF-8 malformations
beyond pass/fail.  Previously, the only ways to know why a sequence was
ill-formed was to capture and parse the generated diagnostics or to do
your own analysis.

=end original

新しい関数である L<C<utf8n_to_uvchr_error>|perlapi/utf8n_to_uvchr_error> が、
UTF-8 不正に関して成功/失敗を越えた詳細を知る必要があるモジュールが
使うために追加されました。
以前は、なぜ並びが不正な型式かを知る唯一の方法は、
生成された診断メッセージを捕捉してパースするか、自力で解析することでした。

=item *

=begin original

There is now a safer version of utf8_hop(), called
L<C<utf8_hop_safe()>|perlapi/utf8_hop_safe>.
Unlike utf8_hop(), utf8_hop_safe() won't navigate before the beginning or
after the end of the supplied buffer.

=end original

L<C<utf8_hop_safe()>|perlapi/utf8_hop_safe> という、
utf8_hop() のより安全なバージョンが追加されました。
utf8_hop() と異なり、utf8_hop_safe() は指定されたバッファの先頭より前や
末尾より後ろまで移動しません。

=item *

=begin original

Two new functions, L<C<utf8_hop_forward()>|perlapi/utf8_hop_forward> and
L<C<utf8_hop_back()>|perlapi/utf8_hop_back> are
similar to C<utf8_hop_safe()> but are for when you know which direction
you wish to travel.

=end original

二つの新しい関数 L<C<utf8_hop_forward()>|perlapi/utf8_hop_forward> と
L<C<utf8_hop_back()>|perlapi/utf8_hop_back> は
C<utf8_hop_safe()> に似ていますが、移動したい方向が分かっているとき用です。

=item *

=begin original

Two new macros which return useful utf8 byte sequences:

=end original

有用な utf8 バイト並びを返す二つの新しいマクロ:

L<C<BOM_UTF8>|perlapi/BOM_UTF8>

L<C<REPLACEMENT_CHARACTER_UTF8>|perlapi/REPLACEMENT_CHARACTER_UTF8>

=back

=item *

=begin original

Perl is now built with the C<PERL_OP_PARENT> compiler define enabled by
default.  To disable it, use the C<PERL_NO_OP_PARENT> compiler define.
This flag alters how the C<op_sibling> field is used in C<OP> structures,
and has been available optionally since perl 5.22.

=end original

Perl はデフォルトで C<PERL_OP_PARENT> コンパイラ定義を有効にして
ビルドされるようになりました。
これを無効にするには、C<PERL_NO_OP_PARENT> コンパイラ定義を使ってください。
このフラグは C<OP> 構造体の中の C<op_sibling> フィールドの使い方を変更します;
これはオプションとして perl 5.22 から利用可能でした。

=begin original

See L<perl5220delta/"Internal Changes"> for more details of what this
build option does.

=end original

このビルドオプションが何をするかに関するさらなる詳細については
L<perl5220delta/"Internal Changes"> を参照してください。

=item *

=begin original

Three new ops, C<OP_ARGELEM>, C<OP_ARGDEFELEM>, and C<OP_ARGCHECK> have
been added.  These are intended principally to implement the individual
elements of a subroutine signature, plus any overall checking required.

=end original

三つの新しい op, C<OP_ARGELEM>, C<OP_ARGDEFELEM>, C<OP_ARGCHECK> が
追加されました。
これらは主に、サブルーチンシグネチャの個々の要素を実装するためと、
それに加えて必要な全体的なチェックを意図しています。

=item *

=begin original

The C<OP_PUSHRE> op has been eliminated and the C<OP_SPLIT> op has been
changed from class C<LISTOP> to C<PMOP>.

=end original

C<OP_PUSHRE> op は削除され、C<OP_SPLIT> op はクラスが
C<LISTOP> から C<PMOP> に変更されました。

=begin original

Formerly the first child of a split would be a C<pushre>, which would have the
C<split>'s regex attached to it. Now the regex is attached directly to the
C<split> op, and the C<pushre> has been eliminated.

=end original

以前は、ある split の最初の子は C<pushre> で、これには
C<split> の正規表現が添付されていました。
正規表現は C<split> op に直接添付されるようになり、
C<pushre> は削除されました。

=item *

=begin original

The L<C<op_class()>|perlapi/op_class> API function has been added.  This
is like the existing
C<OP_CLASS()> macro, but can more accurately determine what struct an op
has been allocated as.  For example C<OP_CLASS()> might return
C<OA_BASEOP_OR_UNOP> indicating that ops of this type are usually
allocated as an C<OP> or C<UNOP>; while C<op_class()> will return
C<OPclass_BASEOP> or C<OPclass_UNOP> as appropriate.

=end original

L<C<op_class()>|perlapi/op_class> API 関数が追加されました。
これは既存の C<OP_CLASS()> マクロと同様ですが、
ある op がどの構造体として割り当てられたかをより正確に
決定できるようになりました。
例えば、C<OP_CLASS()> は、この型の op は通常 C<OP> や C<UNOP> として
割り当てられることを示す C<OA_BASEOP_OR_UNOP> を返すかもしれません;
一方 C<op_class()> は適切に C<OPclass_BASEOP> や C<OPclass_UNOP> を返します。

=item *

=begin original

All parts of the internals now agree that the C<sassign> op is a C<BINOP>;
previously it was listed as a C<BASEOP> in F<regen/opcodes>, which meant
that several parts of the internals had to be special-cased to accommodate
it.  This oddity's original motivation was to handle code like C<$x ||= 1>;
that is now handled in a simpler way.

=end original

内部の全ての部分は、C<sassign> op が C<BINOP> であることに
合意するようになりました;
以前は F<regen/opcodes> に C<BASEOP> として一覧されていて、これは内部の
いくつかの部分では対応に特別扱いが必要であることを意味していました。
このおかしな状態の元々の動機は C<$x ||= 1> のようなコードを扱うことでした;
今はより簡単な方法で扱うようになりました。

=item *

=begin original

The output format of the L<C<op_dump()>|perlapi/op_dump> function (as
used by C<perl -Dx>)
has changed: it now displays an "ASCII-art" tree structure, and shows more
low-level details about each op, such as its address and class.

=end original

(C<perl -Dx> で使われる) L<C<op_dump()>|perlapi/op_dump> 関数の
出力形式が変わりました: これは「ASCII アート」木構造を表示するようになり、
それぞれの op に対するアドレスとクラスのようなより低レベルの詳細を
表示するようになりました。

=item *

=begin original

The C<PADOFFSET> type has changed from being unsigned to signed, and
several pad-related variables such as C<PL_padix> have changed from being
of type C<I32> to type C<PADOFFSET>.

=end original

C<PADOFFSET> 型は符号なしから符号付きに変更され、
C<PL_padix> のようないくつかのパッド関連の変数は
C<I32> 型から C<PADOFFSET> 型に変更されました。

=item *

=begin original

The C<DEBUGGING>-mode output for regex compilation and execution has been
enhanced.

=end original

正規表現のコンパイルと実行時の C<DEBUGGING> モードでの出力が拡張されました。

=item *

=begin original

Several obscure SV flags have been eliminated, sometimes along with the
macros which manipulate them: C<SVpbm_VALID>, C<SVpbm_TAIL>, C<SvTAIL_on>,
C<SvTAIL_off>, C<SVrepl_EVAL>, C<SvEVALED>.

=end original

いくつかの不明瞭な SV フラグが削除されました; 時々これらを操作するマクロも
削除されました:
C<SVpbm_VALID>, C<SVpbm_TAIL>, C<SvTAIL_on>,
C<SvTAIL_off>, C<SVrepl_EVAL>, C<SvEVALED>.

=item *

=begin original

An OP C<op_private> flag has been eliminated: C<OPpRUNTIME>. This used to
often get set on C<PMOP> ops, but had become meaningless over time.

=end original

OP C<op_private> フラグは削除されました: C<OPpRUNTIME>。
これはしばしば C<PMOP> op での get set に使われていましたが、
時が経つにつれてこれは無意味になりました。

=back

=head1 Selected Bug Fixes

(バグ修正の抜粋)

=over 4

=item *

=begin original

Perl no longer panics when switching into some locales on machines with
buggy C<strxfrm()> implementations in their F<libc>.
L<[perl #121734]|https://rt.perl.org/Public/Bug/Display.html?id=121734>

=end original

F<libc> の C<strxfrm()> 実装にバグがあるマシンで一部のロケールに
切り替えても panic しなくなりました。
L<[perl #121734]|https://rt.perl.org/Public/Bug/Display.html?id=121734>

=item *

=begin original

C< $-{$name} > would leak an C<AV> on each access if the regular
expression had no named captures.  The same applies to access to any
hash tied with L<Tie::Hash::NamedCapture> and C<< all =E<gt> 1 >>.
L<[perl #130822]|https://rt.perl.org/Public/Bug/Display.html?id=130822>

=end original

正規表現に名前付き捕捉がないときの C< $-{$name} > は、アクセス毎に
C<AV> が一つリークしていました。
同じことは L<Tie::Hash::NamedCapture> と C<< all =E<gt> 1 >> で
tie されたハッシュにアクセスしたときにも起きていました。
L<[perl #130822]|https://rt.perl.org/Public/Bug/Display.html?id=130822>

=item *

=begin original

Attempting to use the deprecated variable C<$#> as the object in an
indirect object method call could cause a heap use after free or
buffer overflow.
L<[perl #129274]|https://rt.perl.org/Public/Bug/Display.html?id=129274>

=end original

廃止予定の変数 C<$#> に間接オブジェクトメソッド呼び出しのオブジェクトとして
使おうとすると、解放後のヒープ使用やバッファオーバーフローが
起きることがありました。
L<[perl #129274]|https://rt.perl.org/Public/Bug/Display.html?id=129274>

=item *

=begin original

When checking for an indirect object method call, in some rare cases
the parser could reallocate the line buffer but then continue to use
pointers to the old buffer.
L<[perl #129190]|https://rt.perl.org/Public/Bug/Display.html?id=129190>

=end original

間接オブジェクトメソッド呼び出しのチェック時に、一部の稀な場合で
パーサが行バッファを再配置した後、古いバッファへのポインタを
使い続けることがありました。
L<[perl #129190]|https://rt.perl.org/Public/Bug/Display.html?id=129190>

=item *

=begin original

Supplying a glob as the format argument to
L<C<formline>|perlfunc/formline> would
cause an assertion failure.
L<[perl #130722]|https://rt.perl.org/Public/Bug/Display.html?id=130722>

=end original

L<C<formline>|perlfunc/formline> のフォーマット引数としてグロブを
ステイするとアサート失敗が起こることがありました。
L<[perl #130722]|https://rt.perl.org/Public/Bug/Display.html?id=130722>

=item *

=begin original

Code like C< $value1 =~ qr/.../ ~~ $value2 > would have the match
converted into a C<qr//> operator, leaving extra elements on the stack to
confuse any surrounding expression.
L<[perl #130705]|https://rt.perl.org/Public/Bug/Display.html?id=130705>

=end original

C< $value1 =~ qr/.../ ~~ $value2 > のようなコードは、
C<qr//> 演算子に変換されたものにマッチングし、周りの式を混乱させる
余分な要素をスタック上に残していました。
L<[perl #130705]|https://rt.perl.org/Public/Bug/Display.html?id=130705>

=item *

=begin original

Since v5.24 in some obscure cases, a regex which included code blocks
from multiple sources (I<e.g.>, via embedded via C<qr//> objects) could end up
with the wrong current pad and crash or give weird results.
L<[perl #129881]|https://rt.perl.org/Public/Bug/Display.html?id=129881>

=end original

v5.24 からある種の不明瞭な状況で、
複数のソースからのコードブロックを含む正規表現
(I<例えば>, C<qr//> オブジェクト経由で組み込まれたもの) は、
カレントパッドが間違った状態に成り、クラッシュしたりおかしな結果に
なったりしていました。
L<[perl #129881]|https://rt.perl.org/Public/Bug/Display.html?id=129881>

=item *

=begin original

Occasionally C<local()>s in a code block within a patterns weren't being
undone when the pattern matching backtracked over the code block.
L<[perl #126697]|https://rt.perl.org/Public/Bug/Display.html?id=126697>

=end original

パターンの中のコードブロック中の C<local()> は時々、
パターンマッチングがコードブロックを越えてバックトラックしたときに
元に戻っていませんでした。
L<[perl #126697]|https://rt.perl.org/Public/Bug/Display.html?id=126697>

=item *

=begin original

Using C<substr()> to modify a magic variable could access freed memory
in some cases.
L<[perl #129340]|https://rt.perl.org/Public/Bug/Display.html?id=129340>

=end original

マジカル変数を変更するのに C<substr()> を使うと場合によっては解放された
メモリにアクセスすることがありました。
L<[perl #129340]|https://rt.perl.org/Public/Bug/Display.html?id=129340>

=item *

=begin original

Under C<use utf8>, the entire source code is now checked for being UTF-8
well formed, not just quoted strings as before.
L<[perl #126310]|https://rt.perl.org/Public/Bug/Display.html?id=126310>.

=end original

C<use utf8> の基では、ソースコード全体が UTF-8 整形されているかどうかを
チェックするようになりました; 以前はクォートされた文字列だけでした。
L<[perl #126310]|https://rt.perl.org/Public/Bug/Display.html?id=126310>.

=item *

=begin original

The range operator C<".."> on strings now handles its arguments correctly when in
the scope of the L<< C<unicode_strings>|feature/"The 'unicode_strings' feature" >>
feature.  The previous behaviour was sufficiently unexpected that we believe no
correct program could have made use of it.

=end original

文字列の範囲演算子 C<".."> は、
L<< C<unicode_strings>|feature/"The 'unicode_strings' feature" >> 機能の
スコープの中で正しく引数を扱えるようになりました。
以前の振る舞いは、これを正しく使えるプログラムはないと信じられるぐらいに
十分予測不能なものでした。

=item *

=begin original

The C<split> operator did not ensure enough space was allocated for
its return value in scalar context.  It could then write a single
pointer immediately beyond the end of the memory block allocated for
the stack.
L<[perl #130262]|https://rt.perl.org/Public/Bug/Display.html?id=130262>

=end original

C<split> 演算子はスカラコンテキストで返り値のための十分なスペースが
割り当てられているかどうかを十分に確認していませんでした。
これによって、スタックのために割り当てられたメモリブロックの端を越えて
すぐのところに一つのポインタを書くことがありました。
L<[perl #130262]|https://rt.perl.org/Public/Bug/Display.html?id=130262>

=item *

=begin original

Using a large code point with the C<"W"> pack template character with
the current output position aligned at just the right point could
cause a write of a single zero byte immediately beyond the end of an
allocated buffer.
L<[perl #129149]|https://rt.perl.org/Public/Bug/Display.html?id=129149>

=end original

現在の出力位置がちょうど右側のポイントに位置しているときに
C<"W"> pack テンプレート文字で大きな符号位置を使うと、
割り当てられたバッファの末尾を越えたすぐのところに一つのゼロバイトを
書くことがありました。
L<[perl #129149]|https://rt.perl.org/Public/Bug/Display.html?id=129149>

=item *

=begin original

Supplying a format's picture argument as part of the format argument list
where the picture specifies modifying the argument could cause an
access to the new freed compiled form.at.
L<[perl #129125]|https://rt.perl.org/Public/Bug/Display.html?id=129125>

=end original

picture が引数の修正を指定しているときに、format の picture 引数として
format 引数リストの一部として指定すると、新しく解放されたコンパイル形式に
アクセスすることがありました。
L<[perl #129125]|https://rt.perl.org/Public/Bug/Display.html?id=129125>

=item *

=begin original

The L<sort()|perlfunc/sort> operator's built-in numeric comparison
function didn't handle large integers that weren't exactly
representable by a double.  This now uses the same code used to
implement the C<< E<lt>=E<gt> >> operator.
L<[perl #130335]|https://rt.perl.org/Public/Bug/Display.html?id=130335>

=end original

The L<sort()|perlfunc/sort> 演算子の組み込みの数値比較関数は
double で正確に表現できない大きな整数を扱えませんでした。
これは C<< E<lt>=E<gt> >> 演算子を実装するのに使われるのと同じコードを
使うようになりました。
L<[perl #130335]|https://rt.perl.org/Public/Bug/Display.html?id=130335>

=item *

=begin original

Fix issues with C</(?{ ... E<lt>E<lt>EOF })/> that broke
L<Method::Signatures>.
L<[perl #130398]|https://rt.perl.org/Public/Bug/Display.html?id=130398>

=end original

L<Method::Signatures> を壊す C</(?{ ... E<lt>E<lt>EOF })/> の問題が
修正されました。
L<[perl #130398]|https://rt.perl.org/Public/Bug/Display.html?id=130398>

=item *

=begin original

Fixed an assertion failure with C<chop> and C<chomp>, which
could be triggered by C<chop(@x =~ tr/1/1/)>.
L<[perl #130198]|https://rt.perl.org/Public/Bug/Display.html?id=130198>.

=end original

C<chop(@x =~ tr/1/1/)> によって引き起こされることがある、
C<chop> と C<chomp> のアサート失敗が修正されました。
L<[perl #130198]|https://rt.perl.org/Public/Bug/Display.html?id=130198>.

=item *

=begin original

Fixed a comment skipping error in patterns under C</x>; it could stop
skipping a byte early, which could be in the middle of a UTF-8
character.
L<[perl #130495]|https://rt.perl.org/Public/Bug/Display.html?id=130495>.

=end original

C</x> の基でパターン中のコメント読み飛ばしエラーが修正されました;
これは 1 バイト早く止まることがあり、UTF-8 文字の途中に
なることがありました。
L<[perl #130495]|https://rt.perl.org/Public/Bug/Display.html?id=130495>.

=item *

=begin original

F<perldb> now ignores F</dev/tty> on non-Unix systems.
L<[perl #113960]|https://rt.perl.org/Public/Bug/Display.html?id=113960>;

=end original

F<perldb> は、非 Unix システムでは F</dev/tty> を無視するようになりました。
L<[perl #113960]|https://rt.perl.org/Public/Bug/Display.html?id=113960>;

=item *

=begin original

Fix assertion failure for C<{}-E<gt>$x> when C<$x> isn't defined.
L<[perl #130496]|https://rt.perl.org/Public/Bug/Display.html?id=130496>.

=end original

C<$x> が定義されていないときの C<{}-E<gt>$x> のアサート失敗が
修正されました。
L<[perl #130496]|https://rt.perl.org/Public/Bug/Display.html?id=130496>.

=item *

=begin original

Fix an assertion error which could be triggered when a lookahead string
in patterns exceeded a minimum length.
L<[perl #130522]|https://rt.perl.org/Public/Bug/Display.html?id=130522>.

=end original

パターンの前方文字列が最短長を越えたときに起きることがあるアサートエラーが
修正されました。
L<[perl #130522]|https://rt.perl.org/Public/Bug/Display.html?id=130522>.

=item *

=begin original

Only warn once per literal number about a misplaced C<"_">.
L<[perl #70878]|https://rt.perl.org/Public/Bug/Display.html?id=70878>.

=end original

一つの数値での間違った位置の C<"_"> について、1 回だけ
警告するようになりました。
L<[perl #70878]|https://rt.perl.org/Public/Bug/Display.html?id=70878>.

=item *

=begin original

The C<tr///> parse code could be looking at uninitialized data after a
perse error.
L<[perl #129342]|https://rt.perl.org/Public/Bug/Display.html?id=129342>.

=end original

C<tr///> パースコードはパースエラーの後未初期化データを見ることがありました。
L<[perl #129342]|https://rt.perl.org/Public/Bug/Display.html?id=129342>.

=item *

=begin original

In a pattern match, a back-reference (C<\1>) to an unmatched capture could
read back beyond the start of the string being matched.
L<[perl #129377]|https://rt.perl.org/Public/Bug/Display.html?id=129377>.

=end original

パターンマッチングで、マッチングしていない捕捉に対する後方参照 (C<\1>) が
マッチングした文字列の先頭を超えて読み戻ることがありました。
L<[perl #129377]|https://rt.perl.org/Public/Bug/Display.html?id=129377>.

=item *

=begin original

C<use re 'strict'> is supposed to warn if you use a range (such as
C</(?[ [ X-Y ] ])/>) whose start and end digit aren't from the same group
of 10.  It didn't do that for five groups of mathematical digits starting
at C<U+1D7E>.

=end original

(C</(?[ [ X-Y ] ])/> のような) 範囲のうち、開始と終了の数字が
10 の中の同じグループにない場合に警告するはずでした。
これは C<U+1D7E> から始まる五つのグループの算術数字では
行われていませんでした。

=item *

=begin original

A sub containing a "forward" declaration with the same name (I<e.g.>,
C<sub c { sub c; }>) could sometimes crash or loop infinitely.
L<[perl #129090]|https://rt.perl.org/Public/Bug/Display.html?id=129090>

=end original

同じ名前の「前方」宣言を含むサブルーチン (I<例えば> C<sub c { sub c; }>) が
時々クラッシュしたり無限ループしたりしていました。
L<[perl #129090]|https://rt.perl.org/Public/Bug/Display.html?id=129090>

=item *

=begin original

A crash in executing a regex with a non-anchored UTF-8 substring against a
target string that also used UTF-8 has been fixed.
L<[perl #129350]|https://rt.perl.org/Public/Bug/Display.html?id=129350>

=end original

UTF-8 を使っているターゲット文字列に対して非アンカー UTF-8 部分文字列で
正規表現を実行するしたときのクラッシュが修正されました。
L<[perl #129350]|https://rt.perl.org/Public/Bug/Display.html?id=129350>

=item *

=begin original

Previously, a shebang line like C<#!perl -i u> could be erroneously
interpreted as requesting the C<-u> option.  This has been fixed.
L<[perl #129336]|https://rt.perl.org/Public/Bug/Display.html?id=129336>

=end original

以前は、C<#!perl -i u> のようなシェバン行は誤って C<-u> オプションを
要求していると解釈されることがありました。
これは修正されました。
L<[perl #129336]|https://rt.perl.org/Public/Bug/Display.html?id=129336>

=item *

=begin original

The regex engine was previously producing incorrect results in some rare
situations when backtracking past an alternation that matches only one
thing; this
showed up as capture buffers (C<$1>, C<$2>, I<etc.>) erroneously containing data
from regex execution paths that weren't actually executed for the final
match.
L<[perl #129897]|https://rt.perl.org/Public/Bug/Display.html?id=129897>

=end original

正規表現エンジンは、一つのものだけにマッチングする代替を越えて
バックトラックするとき、ある種の稀な状況では以前は間違った結果を
生成していました; これは、捕捉バッファ (C<$1>, C<$2>, I<など>) に、
実際には最終的に実行されていない正規表現実行パスからのデータを
間違って含む形で現れていました。
L<[perl #129897]|https://rt.perl.org/Public/Bug/Display.html?id=129897>

=item *

=begin original

Certain regexes making use of the experimental C<regex_sets> feature could
trigger an assertion failure.  This has been fixed.
L<[perl #129322]|https://rt.perl.org/Public/Bug/Display.html?id=129322>

=end original

実験的な C<regex_sets> 機能を使うある種の正規表現がアサート失敗を
引き起こすことがありました。
これは修正されました。
L<[perl #129322]|https://rt.perl.org/Public/Bug/Display.html?id=129322>

=item *

=begin original

Invalid assignments to a reference constructor (I<e.g.>, C<\eval=time>) could
sometimes crash in addition to giving a syntax error.
L<[perl #125679]|https://rt.perl.org/Public/Bug/Display.html?id=125679>

=end original

リファレンス構築子への不正な代入 (I<例えば> C<\eval=time>) が、
文法エラーに加えて時々クラッシュすることがありました。
L<[perl #125679]|https://rt.perl.org/Public/Bug/Display.html?id=125679>

=item *

=begin original

The parser could sometimes crash if a bareword came after C<evalbytes>.
L<[perl #129196]|https://rt.perl.org/Public/Bug/Display.html?id=129196>

=end original

C<evalbytes> の後に裸の単語がある場合にパーサがクラッシュすることが
ありました。
L<[perl #129196]|https://rt.perl.org/Public/Bug/Display.html?id=129196>

=item *

=begin original

Autoloading via a method call would warn erroneously ("Use of inherited
AUTOLOAD for non-method") if there was a stub present in the package into
which the invocant had been blessed.  The warning is no longer emitted in
such circumstances.
L<[perl #47047]|https://rt.perl.org/Public/Bug/Display.html?id=47047>

=end original

起動元が bless しているパッケージにスタブが存在するとき、メソッド呼び出し
経由のオートロードは間違って警告していました ("Use of inherited
AUTOLOAD for non-method")。
このような場合では警告はもはや出力されなくなりました。
L<[perl #47047]|https://rt.perl.org/Public/Bug/Display.html?id=47047>

=item *

=begin original

The use of C<splice> on arrays with non-existent elements could cause other
operators to crash.
L<[perl #129164]|https://rt.perl.org/Public/Bug/Display.html?id=129164>

=end original

存在しない要素に対して配列に C<splice> を使うと、他の演算子のクラッシュを
引き起こすことがありました。
L<[perl #129164]|https://rt.perl.org/Public/Bug/Display.html?id=129164>

=item *

=begin original

A possible buffer overrun when a pattern contains a fixed utf8 substring.
L<[perl #129012]|https://rt.perl.org/Public/Bug/Display.html?id=129012>

=end original

パターンに固定 utf8 部分文字列が含まれているとバッファオーバーランが
起きる可能性がありました。
L<[perl #129012]|https://rt.perl.org/Public/Bug/Display.html?id=129012>

=item *

=begin original

Fixed two possible use-after-free bugs in perl's lexer.
L<[perl #129069]|https://rt.perl.org/Public/Bug/Display.html?id=129069>

=end original

perl lexer での二つの use-after-free バグの可能性を修正しました。
L<[perl #129069]|https://rt.perl.org/Public/Bug/Display.html?id=129069>

=item *

=begin original

Fixed a crash with C<s///l> where it thought it was dealing with UTF-8
when it wasn't.
L<[perl #129038]|https://rt.perl.org/Public/Bug/Display.html?id=129038>

=end original

実際には違うときに UTF-8 を扱っていると考えているときの C<s///l> の
クラッシュが修正されました。
L<[perl #129038]|https://rt.perl.org/Public/Bug/Display.html?id=129038>

=item *

=begin original

Fixed a place where the regex parser was not setting the syntax error
correctly on a syntactically incorrect pattern.
L<[perl #129122]|https://rt.perl.org/Public/Bug/Display.html?id=129122>

=end original

正規表現パーサが文法的に間違ったパターンに対して正しく文法エラーの
位置を設定しない問題を修正しました。
L<[perl #129122]|https://rt.perl.org/Public/Bug/Display.html?id=129122>

=item *

=begin original

The C<&.> operator (and the C<"&"> operator, when it treats its arguments as
strings) were failing to append a trailing null byte if at least one string
was marked as utf8 internally.  Many code paths (system calls, regexp
compilation) still expect there to be a null byte in the string buffer
just past the end of the logical string.  An assertion failure was the
result.
L<[perl #129287]|https://rt.perl.org/Public/Bug/Display.html?id=129287>

=end original

C<&.> 演算子 (および引数を文字列として扱う場合の C<"&"> 演算子) は
少なくとも一つの文字列が内部で utf8 とマークされている場合に末尾の NUL
バイトの追加に失敗していました。
多くのコードパス (システムコール、正規表現コンパイル) ではまだ
文字列バッファ中の論理文字列の末尾に NUL バイトがあることを想定しています。
結果としてアサート失敗になります。
L<[perl #129287]|https://rt.perl.org/Public/Bug/Display.html?id=129287>

=item *

=begin original

Avoid a heap-after-use error in the parser when creating an error messge
for a syntactically invalid heredoc.
L<[perl #128988]|https://rt.perl.org/Public/Bug/Display.html?id=128988>

=end original

パーサが文法的に不正なヒヤドキュメントに対してエラーメッセージを
作成するときの heap-after-use エラーを避けるようになりました。
L<[perl #128988]|https://rt.perl.org/Public/Bug/Display.html?id=128988>

=item *

=begin original

Fix a segfault when run with C<-DC> options on DEBUGGING builds.
L<[perl #129106]|https://rt.perl.org/Public/Bug/Display.html?id=129106>

=end original

Fix a segfault when run with 
DEBUGGING ビルドで C<-DC> オプション付きで実行したときの
セグメンテーションフォルトが修正されました。
L<[perl #129106]|https://rt.perl.org/Public/Bug/Display.html?id=129106>

=item *

=begin original

Fixed the parser error handling in subroutine attributes for an
'C<:attr(foo>' that does not have an ending 'C<")">'.

=end original

末尾に 'C<")">' がない 'C<:attr(foo>' の形のサブルーチン属性の
パーサエラーの扱いが修正されました。

=item *

=begin original

Fix the perl lexer to correctly handle a backslash as the last char in
quoted-string context. This actually fixed two bugs,
L<[perl #129064]|https://rt.perl.org/Public/Bug/Display.html?id=129064> and
L<[perl #129176]|https://rt.perl.org/Public/Bug/Display.html?id=129176>.

=end original

クォートされた文字列のコンテキストの最後の文字としての逆スラッシュを
正しく扱えるように perl の構文解析器を修正しました。
これは実際には二つのバグを修正しました。
L<[perl #129064]|https://rt.perl.org/Public/Bug/Display.html?id=129064> と
L<[perl #129176]|https://rt.perl.org/Public/Bug/Display.html?id=129176>。

=item *

=begin original

In the API function C<gv_fetchmethod_pvn_flags>, rework separator parsing
to prevent possible string overrun with an invalid C<len> argument.
L<[perl #129267]|https://rt.perl.org/Public/Bug/Display.html?id=129267>

=end original

API 関数 C<gv_fetchmethod_pvn_flags> において、
不正な C<len> 引数によって文字列オーバーランが起きる可能性を
避けるために区切りのパースについて再作業されました。
L<[perl #129267]|https://rt.perl.org/Public/Bug/Display.html?id=129267>

=item *

=begin original

Problems with in-place array sorts: code like C<@a = sort { ... } @a>,
where the source and destination of the sort are the same plain array, are
optimised to do less copying around.  Two side-effects of this optimisation
were that the contents of C<@a> as seen by sort routines were
partially sorted; and under some circumstances accessing C<@a> during the
sort could crash the interpreter.  Both these issues have been fixed, and
Sort functions see the original value of C<@a>.
L<[perl #128340]|https://rt.perl.org/Public/Bug/Display.html?id=128340>

=end original

その場配列ソートの問題: C<@a = sort { ... } @a> のようなコードで、
ソート元とソート先が同じ単純な配列の場合、コピーを減らすことで
最適化されます。
この最適化の二つの副作用として、ソートルーチンから見える C<@a> の内容が
ソート途中のものになっていました; もう一つはある種の状況ではソートの中で
C<@a> にアクセスするとインタプリタがクラッシュすることがありました。
これらの問題はどちらも修正され、ソート関数は C<@a> の
元の値を見るようになりました。
L<[perl #128340]|https://rt.perl.org/Public/Bug/Display.html?id=128340>

=item *

=begin original

Non-ASCII string delimiters are now reported correctly in error messages
for unterminated strings.
L<[perl #128701]|https://rt.perl.org/Public/Bug/Display.html?id=128701>

=end original

非 ASCII 文字列区切り文字は、終端されていない文字列のエラーメッセージで
正しく報告されるようになりました。
L<[perl #128701]|https://rt.perl.org/Public/Bug/Display.html?id=128701>

=item *

=begin original

C<pack("p", ...)> used to emit its warning ("Attempt to pack pointer to
temporary value") erroneously in some cases, but has been fixed.

=end original

C<pack("p", ...)> は一部の場合で間違った警告
("Attempt to pack pointer to temporary value") を出力していましたが
これは修正されました。

=item *

=begin original

C<@DB::args> is now exempt from "used once" warnings.  The warnings only
occurred under B<-w>, because F<warnings.pm> itself uses C<@DB::args>
multiple times.

=end original

C<@DB::args> は "used once" 警告から免れるようになりました。
この警告は B<-w> の基でのみ起きていました; F<warnings.pm> 自身が
C<@DB::args> を複数回使っているからです。

=item *

=begin original

The use of built-in arrays or hash slices in a double-quoted string no
longer issues a warning ("Possible unintended interpolation...") if the
variable has not been mentioned before.  This affected code like
C<qq|@DB::args|> and C<qq|@SIG{'CHLD', 'HUP'}|>.  (The special variables
C<@-> and C<@+> were already exempt from the warning.)

=end original

ダブルクォートされた文字列の中の組み込みの配列やハッシュのスライスを
使ったとき、変数が以前に言及されていなくてももはや警告
("Possible unintended interpolation...") を出力しなくなりました。
これは C<qq|@DB::args|> や C<qq|@SIG{'CHLD', 'HUP'}|> のようなコードに
影響を与えます。
(特殊変数 C<@-> と C<@+> は既に警告を免れています。)

=item *

=begin original

C<gethostent> and similar functions now perform a null check internally, to
avoid crashing with the torsocks library.  This was a regression from v5.22.
L<[perl #128740]|https://rt.perl.org/Public/Bug/Display.html?id=128740>

=end original

C<gethostent> および同様の関数は、torsocks ライブラリでの
クラッシュを防ぐために、内部でヌルチェックを行うようになりました。
これは v5.22 からの退行でした。
L<[perl #128740]|https://rt.perl.org/Public/Bug/Display.html?id=128740>

=item *

=begin original

C<defined *{'!'}>, C<defined *{'['}>, and C<defined *{'-'}> no longer leak
memory if the typeglob in question has never been accessed before.

=end original

C<defined *{'!'}>, C<defined *{'['}>, C<defined *{'-'}> は、
問題の型グロブが以前アクセスされたことがなかった場合にも
メモリリークしなくなりました。

=item *

=begin original

Mentioning the same constant twice in a row (which is a syntax error) no
longer fails an assertion under debugging builds.  This was a regression
from v5.20.
L<[perl #126482]|https://rt.perl.org/Public/Bug/Display.html?id=126482>

=end original

連続して 2 回同じ定数に言及 (これは文法エラーです) しても、
デバッグビルドの基でアサート失敗しなくなりました。
これは v5.20 からの退行でした。
L<[perl #126482]|https://rt.perl.org/Public/Bug/Display.html?id=126482>

=item *

=begin original

Many issues relating to C<printf "%a"> of hexadecimal floating point
were fixed.  In addition, the "subnormals" (formerly known as "denormals")
floating point numbers are now supported both with the plain IEEE 754
floating point numbers (64-bit or 128-bit) and the x86 80-bit
"extended precision".  Note that subnormal hexadecimal floating
point literals will give a warning about "exponent underflow".
L<[perl #128843]|https://rt.perl.org/Public/Bug/Display.html?id=128843>
L<[perl #128889]|https://rt.perl.org/Public/Bug/Display.html?id=128889>
L<[perl #128890]|https://rt.perl.org/Public/Bug/Display.html?id=128890>
L<[perl #128893]|https://rt.perl.org/Public/Bug/Display.html?id=128893>
L<[perl #128909]|https://rt.perl.org/Public/Bug/Display.html?id=128909>
L<[perl #128919]|https://rt.perl.org/Public/Bug/Display.html?id=128919>

=end original

16 進浮動小数点の C<printf "%a"> に関する多くの問題が修正されました。
さらに、非正規化数("subnormals") (以前は "denormals" として
知られていました) 浮動小数点数は、通常の IEEE 754 浮動小数点数 (64 ビット
または 128 ビット) と x86 の 80 ビット「拡張精度」の両方に対応しました。
非正規化 16 進浮動小数点数リテラルは「指数アンダーフロー」に関する
警告が出ることに注意してください。
L<[perl #128843]|https://rt.perl.org/Public/Bug/Display.html?id=128843>
L<[perl #128889]|https://rt.perl.org/Public/Bug/Display.html?id=128889>
L<[perl #128890]|https://rt.perl.org/Public/Bug/Display.html?id=128890>
L<[perl #128893]|https://rt.perl.org/Public/Bug/Display.html?id=128893>
L<[perl #128909]|https://rt.perl.org/Public/Bug/Display.html?id=128909>
L<[perl #128919]|https://rt.perl.org/Public/Bug/Display.html?id=128919>

=item *

=begin original

A regression in v5.24 with C<tr/\N{U+...}/foo/> when the code point was between
128 and 255 has been fixed.
L<[perl #128734]|https://rt.perl.org/Public/Bug/Display.html?id=128734>.

=end original

符号位置が 128 から 255 の間のときの C<tr/\N{U+...}/foo/> の v5.24 からの
退行が修正されました。
L<[perl #128734]|https://rt.perl.org/Public/Bug/Display.html?id=128734>.

=item *

=begin original

Use of a string delimiter whose code point is above 2**31 now works
correctly on platforms that allow this.  Previously, certain characters,
due to truncation, would be confused with other delimiter characters
with special meaning (such as C<"?"> in C<m?...?>), resulting
in inconsistent behaviour.  Note that this is non-portable,
and is based on Perl's extension to UTF-8, and is probably not
displayable nor enterable by any editor.
L<[perl #128738]|https://rt.perl.org/Public/Bug/Display.html?id=128738>

=end original

符号位置が 2**31 を越える符号位置を文字列区切りとして使うのは、
これが許されているプラットフォームでは正しく動作するようになりました。
以前は、ある種の文字は、切り詰められるために、(C<m?...?> での C<"?"> の
ような)特別な意味を持つ他の区切り文字と混乱して、
一貫性のない振る舞いをすることになっていました。
これは移植性がなく、Perl の UTF-8 への拡張に依存していて、
おそらくどんなエディタでも表示したり入力したりできないことに
注意してください。
L<[perl #128738]|https://rt.perl.org/Public/Bug/Display.html?id=128738>

=item *

=begin original

C<@{x> followed by a newline where C<"x"> represents a control or non-ASCII
character no longer produces a garbled syntax error message or a crash.
L<[perl #128951]|https://rt.perl.org/Public/Bug/Display.html?id=128951>

=end original

C<"x"> が制御文字や非 ASCII 文字のとき、C<@{x> に引き続いて改行があっても、
もはや不明瞭な文法エラーやクラッシュを引き起こさなくなりました。
L<[perl #128951]|https://rt.perl.org/Public/Bug/Display.html?id=128951>

=item *

=begin original

An assertion failure with C<%: = 0> has been fixed.
L<[perl #128238]|https://rt.perl.org/Public/Bug/Display.html?id=128238>

=end original

C<%: = 0> でのアサート失敗が修正されました。
L<[perl #128238]|https://rt.perl.org/Public/Bug/Display.html?id=128238>

=item *

=begin original

In Perl 5.18, the parsing of C<"$foo::$bar"> was accidentally changed, such
that it would be treated as C<$foo."::".$bar>.  The previous behavior, which
was to parse it as C<$foo:: . $bar>, has been restored.
L<[perl #128478]|https://rt.perl.org/Public/Bug/Display.html?id=128478>

=end original

Perl 5.18 で、C<"$foo::$bar"> のパースが誤って変更され、
C<$foo."::".$bar> として扱われていました。
これを C<$foo:: . $bar> としてパースするという以前の振る舞いが
復元されました。
L<[perl #128478]|https://rt.perl.org/Public/Bug/Display.html?id=128478>

=item *

=begin original

Since Perl 5.20, line numbers have been off by one when perl is invoked with
the B<-x> switch.  This has been fixed.
L<[perl #128508]|https://rt.perl.org/Public/Bug/Display.html?id=128508>

=end original

Perl 5.20 から、perl が B<-x> 付きで起動されたとき、行番号が
1 ずれていました。 
これは修正されました。
L<[perl #128508]|https://rt.perl.org/Public/Bug/Display.html?id=128508>

=item *

=begin original

Vivifying a subroutine stub in a deleted stash (I<e.g.>,
C<delete $My::{"Foo::"}; \&My::Foo::foo>) no longer crashes.  It had begun
crashing in Perl 5.18.
L<[perl #128532]|https://rt.perl.org/Public/Bug/Display.html?id=128532>

=end original

削除されたスタッシュでのサブルーチンスタブの自動有効化
(I<例えば>, C<delete $My::{"Foo::"}; \&My::Foo::foo>) は
もはやクラッシュしなくなりました。
これは Perl 5.18 からクラッシュしていました。
L<[perl #128532]|https://rt.perl.org/Public/Bug/Display.html?id=128532>

=item *

=begin original

Some obscure cases of subroutines and file handles being freed at the same time
could result in crashes, but have been fixed.  The crash was introduced in Perl
5.22.
L<[perl #128597]|https://rt.perl.org/Public/Bug/Display.html?id=128597>

=end original

同時に解放されたサブルーチンとファイルハンドルのいくつかの不明瞭な場合に
クラッシュを引き起こすことがありましたが、これは修正されました。
このクラッシュは Perl 5.22 で導入されていました。
L<[perl #128597]|https://rt.perl.org/Public/Bug/Display.html?id=128597>

=item *

=begin original

Code that looks for a variable name associated with an uninitialized value
could cause an assertion failure in cases where magic is involved, such as
C<$ISA[0][0]>.  This has now been fixed.
L<[perl #128253]|https://rt.perl.org/Public/Bug/Display.html?id=128253>

=end original

非初期化値に割り当てられた変数名を探すコードは、C<$ISA[0][0]> のように
マジックが関係する場合にアサート失敗を引き起こすことがありました。
これは修正されました。
L<[perl #128253]|https://rt.perl.org/Public/Bug/Display.html?id=128253>

=item *

=begin original

A crash caused by code generating the warning "Subroutine STASH::NAME
redefined" in cases such as C<sub P::f{} undef *P::; *P::f =sub{};> has been
fixed.  In these cases, where the STASH is missing, the warning will now appear
as "Subroutine NAME redefined".
L<[perl #128257]|https://rt.perl.org/Public/Bug/Display.html?id=128257>

=end original

C<sub P::f{} undef *P::; *P::f =sub{};> のような、
"Subroutine STASH::NAME redefined" 警告を出すようなコードによる
クラッシュが修正されました。
これらの場合で、STASH がない場合、警告は
"Subroutine NAME redefined" として出力されるようになりました。
L<[perl #128257]|https://rt.perl.org/Public/Bug/Display.html?id=128257>

=item *

=begin original

Fixed an assertion triggered by some code that handles deprecated behavior in
formats, I<e.g.>, in cases like this:

=end original

フォーマットでの廃止予定の振る舞いを扱うコードによって引き起こされる
アサートが修正されました; I<例えば> 次のようなものです:

    format STDOUT =
    @
    0"$x"

L<[perl #128255]|https://rt.perl.org/Public/Bug/Display.html?id=128255>

=item *

=begin original

A possible divide by zero in string transformation code on Windows has been
avoided, fixing a crash when collating an empty string.
L<[perl #128618]|https://rt.perl.org/Public/Bug/Display.html?id=128618>

=end original

Windows の文字列変換コードで 0 除算エラーが起きる可能性が除去されました;
空文字列の照合でのクラッシュが修正されました。
L<[perl #128618]|https://rt.perl.org/Public/Bug/Display.html?id=128618>

=item *

=begin original

Some regular expression parsing glitches could lead to assertion failures with
regular expressions such as C</(?E<lt>=/> and C</(?E<lt>!/>.  This has now been fixed.
L<[perl #128170]|https://rt.perl.org/Public/Bug/Display.html?id=128170>

=end original

おかしなものをパースする一部の正規表現で、C</(?E<lt>=/> と
C</(?E<lt>!/> のような正規表現でアサート失敗を引き起こすことがありました。
これは修正されました。
L<[perl #128170]|https://rt.perl.org/Public/Bug/Display.html?id=128170>

=item *

=begin original

C< until ($x = 1) { ... } > and C< ... until $x = 1 > now properly
warn when syntax warnings are enabled.
L<[perl #127333]|https://rt.perl.org/Public/Bug/Display.html?id=127333>

=end original

C< until ($x = 1) { ... } > と C< ... until $x = 1 > は、
文法警告が有効のときに適切に警告されるようになりました。
L<[perl #127333]|https://rt.perl.org/Public/Bug/Display.html?id=127333>

=item *

=begin original

socket() now leaves the error code returned by the system in C<$!> on
failure.
L<[perl #128316]|https://rt.perl.org/Public/Bug/Display.html?id=128316>

=end original

socket() は、失敗時に システムから返された C<$!> のエラーコードを
そのままにするようになりました。
L<[perl #128316]|https://rt.perl.org/Public/Bug/Display.html?id=128316>

=item *

=begin original

Assignment variants of any bitwise ops under the C<bitwise> feature would
crash if the left-hand side was an array or hash.
L<[perl #128204]|https://rt.perl.org/Public/Bug/Display.html?id=128204>

=end original

C<bitwise> 機能の基でのビット単位 op の代入は、左側が配列やハッシュの場合
クラッシュしていました。
L<[perl #128204]|https://rt.perl.org/Public/Bug/Display.html?id=128204>

=item *

=begin original

C<require> followed by a single colon (as in C<foo() ? require : ...> is
now parsed correctly as C<require> with implicit C<$_>, rather than
C<require "">.
L<[perl #128307]|https://rt.perl.org/Public/Bug/Display.html?id=128307>

=end original

(C<foo() ? require : ...> のように) C<require> に単一のコロンが
引き続いた場合、C<require ""> ではなく、暗黙の C<$_> での
C<require> であるというように正しくパースされるようになりました。
L<[perl #128307]|https://rt.perl.org/Public/Bug/Display.html?id=128307>

=item *

=begin original

Scalar C<keys %hash> can now be assigned to consistently in all scalar
lvalue contexts.  Previously it worked for some contexts but not others.

=end original

スカラの C<keys %hash> は他のスカラ左辺値コンテキストと一貫性を持って
代入されるようになりました。
以前は一部のコンテキストでは動作していましたがそれ以外では
動作していませんでした。

=item *

=begin original

List assignment to C<vec> or C<substr> with an array or hash for its first
argument used to result in crashes or "Can't coerce" error messages at run
time, unlike scalar assignment, which would give an error at compile time.
List assignment now gives a compile-time error, too.
L<[perl #128260]|https://rt.perl.org/Public/Bug/Display.html?id=128260>

=end original

C<vec> や C<substr> へのリスト代入で、最初の引数が配列やハッシュの場合、
スカラ代入の場合のコンパイル時エラーと異なり、クラッシュしたり、実行時に
"Can't coerce" エラーが出たりしていました。
リスト代入もコンパイルエラーになるようになりました。
L<[perl #128260]|https://rt.perl.org/Public/Bug/Display.html?id=128260>

=item *

=begin original

Expressions containing an C<&&> or C<||> operator (or their synonyms C<and>
and C<or>) were being compiled incorrectly in some cases.  If the left-hand
side consisted of either a negated bareword constant or a negated C<do {}>
block containing a constant expression, and the right-hand side consisted of
a negated non-foldable expression, one of the negations was effectively
ignored.  The same was true of C<if> and C<unless> statement modifiers,
though with the left-hand and right-hand sides swapped.  This long-standing
bug has now been fixed.
L<[perl #127952]|https://rt.perl.org/Public/Bug/Display.html?id=127952>

=end original

C<&&> や C<||> 演算子 (およびその同義語の C<and> や C<or>) を含む式は
場合によっては間違ってコンパイルされていました。
左側が否定された裸の単語の定数または定数式を含む否定された
C<do {}> ブロックで、右側が否定された畳み込みできない式の場合、
否定の片方が事実上無視されていました。
同じことは C<if> と C<unless> 文修飾子でも起きていましたが、
右側と左側の条件は入れ替わっていました。
この長い間存在していたバグは修正されました。
L<[perl #127952]|https://rt.perl.org/Public/Bug/Display.html?id=127952>

=item *

=begin original

C<reset> with an argument no longer crashes when encountering stash entries
other than globs.
L<[perl #128106]|https://rt.perl.org/Public/Bug/Display.html?id=128106>

=end original

引数付きの C<reset> はスタッシュエントリがグロブ以外でももはや
クラッシュしなくなりました。
L<[perl #128106]|https://rt.perl.org/Public/Bug/Display.html?id=128106>

=item *

=begin original

Assignment of hashes to, and deletion of, typeglobs named C<*::::::> no
longer causes crashes.
L<[perl #128086]|https://rt.perl.org/Public/Bug/Display.html?id=128086>

=end original

C<*::::::> という名前の型グロブのハッシュへの代入や削除はもはや
クラッシュを引き起こさなくなりました。
L<[perl #128086]|https://rt.perl.org/Public/Bug/Display.html?id=128086>

=item *

=begin original

Perl wasn't correctly handling true/false values in the LHS of a list
assign; specifically the truth values returned by boolean operators.
This could trigger an assertion failure in something like the following:

=end original

Perl はリスト代入の左側の真偽値、特に真偽値演算子から返された
真の値を正しく扱えていませんでした;
これにより、次のような場合にアサート失敗を引き起こすことがありました:

    for ($x > $y) {
        ($_, ...) = (...); # here $_ is aliased to a truth value
    }

=begin original

This was a regression from v5.24.
L<[perl #129991]|https://rt.perl.org/Public/Bug/Display.html?id=129991>

=end original

これは v5.24 からの退行でした。
L<[perl #129991]|https://rt.perl.org/Public/Bug/Display.html?id=129991>

=item *

=begin original

Assertion failure with user-defined Unicode-like properties.
L<[perl #130010]|https://rt.perl.org/Public/Bug/Display.html?id=130010>

=end original

ユーザー定義 Unicode 風特性に関するアサート失敗。
L<[perl #130010]|https://rt.perl.org/Public/Bug/Display.html?id=130010>

=item *

=begin original

Fix error message for unclosed C<\N{> in a regex.  An unclosed C<\N{>
could give the wrong error message:
C<"\N{NAME} must be resolved by the lexer">.

=end original

正規表現中の閉じていない C<\N{> に関するエラーメッセージが修正されました。
閉じていない C<\N{> は間違ったエラーメッセージを出すことがありました:
C<"\N{NAME} must be resolved by the lexer">

=item *

=begin original

List assignment in list context where the LHS contained aggregates and
where there were not enough RHS elements, used to skip scalar lvalues.
Previously, C<(($a,$b,@c,$d) = (1))> in list context returned C<($a)>; now
it returns C<($a,$b,$d)>.  C<(($a,$b,$c) = (1))> is unchanged: it still
returns C<($a,$b,$c)>.  This can be seen in the following:

=end original

リストコンテキストでのリスト代入で、左側に集合体を含み、右側の要素が
足りない場合、スカラ左辺値を読み飛ばしていました。
以前は、リストコンテキストでの C<(($a,$b,@c,$d) = (1))> は
C<($a)> を返していました; これは C<($a,$b,$d)> を返すようになりました。
C<(($a,$b,$c) = (1))> は変わりません: C<($a,$b,$c)> を返すままです。
これは次のようにして見ることができます:

    sub inc { $_++ for @_ }
    inc(($a,$b,@c,$d) = (10))

=begin original

Formerly, the values of C<($a,$b,$d)> would be left as C<(11,undef,undef)>;
now they are C<(11,1,1)>.

=end original

以前は、C<($a,$b,$d)> の値は C<(11,undef,undef)> になっていました;
今は C<(11,1,1)> になります。

=item *

=begin original

Code like this: C</(?{ s!!! })/> could trigger infinite recursion on the C
stack (not the normal perl stack) when the last successful pattern in
scope is itself.  We avoid the segfault by simply forbidding the use of
the empty pattern when it would resolve to the currently executing
pattern.
L<[perl #129903]|https://rt.perl.org/Public/Bug/Display.html?id=129903>

=end original

C</(?{ s!!! })/> のようなコードは、スコープないで最後に成功したパターンが
自分自身の場合、(通常の perl スタックではなく) C スタックでの
無限再帰を引き起こすことがありました。
単に現在実行しているパターンの解決のときに空パターンを使うことを
禁止することでセグメンテーションフォルトを避けるようにしました。
L<[perl #129903]|https://rt.perl.org/Public/Bug/Display.html?id=129903>

=item *

=begin original

Avoid reading beyond the end of the line buffer in perl's lexer when
there's a short UTF-8 character at the end.
L<[perl #128997]|https://rt.perl.org/Public/Bug/Display.html?id=128997>

=end original

短い UTF-8 文字が末尾にあるときに perl の構文解析器の行バッファの
末尾を越えて読み込むのを避けるようになりました。
L<[perl #128997]|https://rt.perl.org/Public/Bug/Display.html?id=128997>

=item *

=begin original

Alternations in regular expressions were sometimes failing to match
a utf8 string against a utf8 alternate.
L<[perl #129950]|https://rt.perl.org/Public/Bug/Display.html?id=129950>

=end original

正規表現中の代替は時々 utf8 代替に対する utf8 文字列にマッチングするのに
失敗していました。
L<[perl #129950]|https://rt.perl.org/Public/Bug/Display.html?id=129950>

=item *

=begin original

Make C<do "a\0b"> fail silently (and return C<undef> and set C<$!>)
instead of throwing an error.
L<[perl #129928]|https://rt.perl.org/Public/Bug/Display.html?id=129928>

=end original

C<do "a\0b"> はエラーを投げずに暗黙に失敗する (そして C<undef> を返して
C<$!> を設定する) ようになりました。
L<[perl #129928]|https://rt.perl.org/Public/Bug/Display.html?id=129928>

=item *

=begin original

C<chdir> with no argument didn't ensure that there was stack space
available for returning its result.
L<[perl #129130]|https://rt.perl.org/Public/Bug/Display.html?id=129130>

=end original

引数なしの C<chdir> は、結果を返すために十分なスタック空間があることを
確認していませんでした。
L<[perl #129130]|https://rt.perl.org/Public/Bug/Display.html?id=129130>

=item *

=begin original

All error messages related to C<do> now refer to C<do>; some formerly
claimed to be from C<require> instead.

=end original

C<do> に関するエラーメッセージは C<do> を参照するようになりました;
以前は一部で代わりに C<require> からであると主張していました。

=item *

=begin original

Executing C<undef $x> where C<$x> is tied or magical no longer incorrectly
blames the variable for an uninitialized-value warning encountered by the
tied/magical code.

=end original

C<$x> が tie されていたりマジカルな場合の C<undef $x> の実行すると、
この変数に対して tie された/マジカルな コードに遭遇することによる
非初期化値警告を出していましたが、もはや出さなくなりました。

=item *

=begin original

Code like C<$x = $x . "a"> was incorrectly failing to yield a
L<use of uninitialized value|perldiag/"Use of uninitialized value%s">
warning when C<$x> was a lexical variable with an undefined value. That has
now been fixed.
L<[perl #127877]|https://rt.perl.org/Public/Bug/Display.html?id=127877>

=end original

C<$x = $x . "a"> のようなコードは、C<$x> が未定義値のレキシカル変数の場合、
間違って
L<use of uninitialized value|perldiag/"Use of uninitialized value%s"> 警告が
出ていました。
これは修正されました。
L<[perl #127877]|https://rt.perl.org/Public/Bug/Display.html?id=127877>

=item *

=begin original

C<undef *_; shift> or C<undef *_; pop> inside a subroutine, with no
argument to C<shift> or C<pop>, began crashing in Perl 5.14, but has now
been fixed.

=end original

サブルーチンの中での C<undef *_; shift> や C<undef *_; pop> で、
C<shift> や C<pop> への引数がない場合、Perl 5.14 から
クラッシュしていましたが、修正されました。

=item *

=begin original

C<< "string$scalar-E<gt>$*" >> now correctly prefers concatenation
overloading to string overloading if C<< $scalar-E<gt>$* >> returns an
overloaded object, bringing it into consistency with C<$$scalar>.

=end original

C<< $scalar-E<gt>$* >> がオーバーロードされたオブジェクトを返す場合、
C<< "string$scalar-E<gt>$*" >> は正しく文字列オーバーロードではなく
結合オーバーロードを使うようになりました;
これは C<$$scalar> と一貫性があります。

=item *

=begin original

C<< /@0{0*-E<gt>@*/*0 >> and similar contortions used to crash, but no longer
do, but merely produce a syntax error.
L<[perl #128171]|https://rt.perl.org/Public/Bug/Display.html?id=128171>

=end original

C<< /@0{0*-E<gt>@*/*0 >> や似たようなねじれはクラッシュしていましたが、
もはやクラッシュせず、単に文法エラーが出力されるようになりました。
L<[perl #128171]|https://rt.perl.org/Public/Bug/Display.html?id=128171>

=item *

=begin original

C<do> or C<require> with an argument which is a reference or typeglob
which, when stringified,
contains a null character, started crashing in Perl 5.20, but has now been
fixed.
L<[perl #128182]|https://rt.perl.org/Public/Bug/Display.html?id=128182>

=end original

文字列化すると NUL 文字を含むようなリファレンスや型グロブを引数にした
C<do> や C<require> は Perl 5.20 からクラッシュしていましたが、
修正されました。
L<[perl #128182]|https://rt.perl.org/Public/Bug/Display.html?id=128182>

=item *

=begin original

Improve the error message for a missing C<tie()> package/method. This
brings the error messages in line with the ones used for normal method
calls.

=end original

C<tie()> パッケージ/メソッドがない場合のエラーメッセージが改良されました。
これは通常のメソッド呼び出しでのものと一致したエラーメッセージが
出るようになりました。

=item *

=begin original

Parsing bad POSIX charclasses no longer leaks memory.
L<[perl #128313]|https://rt.perl.org/Public/Bug/Display.html?id=128313>

=end original

間違った POSIX 文字クラスのパースでメモリリークしなくなりました。
L<[perl #128313]|https://rt.perl.org/Public/Bug/Display.html?id=128313>

=back

=head1 Known Problems

(既知の問題)

=over 4

=item *

=begin original

G++ 6 handles subnormal (denormal) floating point values differently
than gcc 6 or g++ 5 resulting in "flush-to-zero". The end result is
that if you specify very small values using the hexadecimal floating
point format, like C<0x1.fffffffffffffp-1022>, they become zeros.
L<[perl #131388]|https://rt.perl.org/Ticket/Display.html?id=131388>

=end original

G++ 6 非正規化浮動小数点を
gcc 6 や g++ 5 と異なる形で扱うため、"flush-to-zero" となります。
最終的な結果としては、C<0x1.fffffffffffffp-1022> のように 16 進
浮動小数点形式を使ってとても小さい値を指定すると、ゼロになります。
L<[perl #131388]|https://rt.perl.org/Ticket/Display.html?id=131388>

=back 

=head1 Errata From Previous Releases

(以前のリリースからのエラッタ)

=over 4

=item *

=begin original

Fixed issues with recursive regexes.  The behavior was fixed in Perl 5.24.
L<[perl #126182]|https://rt.perl.org/Public/Bug/Display.html?id=126182>

=end original

再帰正規表現の問題が修正されました。
振る舞いは Perl 5.24 で修正されていました。
L<[perl #126182]|https://rt.perl.org/Public/Bug/Display.html?id=126182>

=back

=head1 Obituary

(おくやみ)

=begin original

Jon Portnoy (AVENJ), a prolific Perl author and admired Gentoo community
member, has passed away on August 10, 2016.  He will be remembered and
missed by all those who he came in contact with, and enriched with his
intellect, wit, and spirit.

=end original

多作な Perl 作者であり、称賛される Gentoo コミュニティメンバーであった
Jon Portnoy (AVENJ) は 2016 年 10 月 10 日に死去しました。
彼に出会い、その知性、機知、精神によって心豊かになった
全ての人々に記憶され、惜しまれました。

=begin original

It is with great sadness that we also note Kip Hampton's passing.  Probably
best known as the author of the Perl & XML column on XML.com, he was a
core contributor to AxKit, an XML server platform that became an Apache
Foundation project.  He was a frequent speaker in the early days at
OSCON, and most recently at YAPC::NA in Madison.  He was frequently on
irc.perl.org as ubu, generally in the #axkit-dahut community, the
group responsible for YAPC::NA Asheville in 2011.

=end original

Kip Hampton の死去について記すのも大きな悲しみです。
おそらく XML.com での Perl & XML コラムの作者として最もよく知られている彼は、
Apache Foundation プロジェクトになった XML サーバプラットフォームである
AxKit のコア貢献者でした。
彼は OSCON の初期に頻繁にスピーカーをしており、
最も最近のものは Madison での YAPC::NA のものでした。
彼は ubu として irc.perl.org に、一般的に #axkit-dahut グループに
参加していました; このグループは 2011 年の YAPC::NA Asheville に
責任を負っていました。

=begin original

Kip and his constant contributions to the community will be greatly
missed.

=end original

Kip と彼のコミュニティへの絶え間ない貢献はとても惜しまれます。

=head1 Acknowledgements

=begin original

Perl 5.26.0 represents approximately 13 months of development since Perl 5.24.0
and contains approximately 360,000 lines of changes across 2,600 files from 86
authors.

=end original

Perl 5.26.0 は、Perl 5.24.0 以降、86 人の作者によって、
2,600 のファイルに約 360,000 行の変更を加えて、
約 13 ヶ月開発されてきました。

=begin original

Excluding auto-generated files, documentation and release tools, there were
approximately 230,000 lines of changes to 1,800 .pm, .t, .c and .h files.

=end original

自動生成ファイル、文書、リリースツールを除くと、1,800 の .pm, .t, .c,
.h ファイルに約 230,000 行の変更を加えました。

=begin original

Perl continues to flourish into its third decade thanks to a vibrant community
of users and developers.  The following people are known to have contributed the
improvements that became Perl 5.26.0:

=end original

Perl は、活気のあるユーザーと開発者のコミュニティのおかげで 20 年を超えて
繁栄しています。
以下の人々が、Perl 5.26.0 になるための改良に貢献したことが分かっています:

Aaron Crane, Abigail, E<AElig>var ArnfjE<ouml>rE<eth> Bjarmason, Alex Vandiver, Andreas
KE<ouml>nig, Andreas Voegele, Andrew Fresh, Andy Lester, Aristotle Pagaltzis, Chad
Granum, Chase Whitener, Chris 'BinGOs' Williams, Chris Lamb, Christian Hansen,
Christian Millour, Colin Newell, Craig A. Berry, Dagfinn Ilmari MannsE<aring>ker, Dan
Collins, Daniel Dragan, Dave Cross, Dave Rolsky, David Golden, David H.
Gutteridge, David Mitchell, Dominic Hargreaves, Doug Bell, E. Choroba, Ed Avis,
Father Chrysostomos, FranE<ccedil>ois Perrad, Hauke D, H.Merijn Brand, Hugo van der
Sanden, Ivan Pozdeev, James E Keenan, James Raspass, Jarkko Hietaniemi, Jerry
D. Hedden, Jim Cromie, J. Nick Koston, John Lightsey, Karen Etheridge, Karl
Williamson, Leon Timmermans, Lukas Mai, Matthew Horsfall, Maxwell Carey, Misty
De Meo, Neil Bowers, Nicholas Clark, Nicolas R., Niko Tyni, Pali, Paul
Marquess, Peter Avalos, Petr PE<iacute>saE<0x159>, Pino Toscano, Rafael Garcia-Suarez, Reini
Urban, Renee Baecker, Ricardo Signes, Richard Levitte, Rick Delaney, Salvador
FandiE<ntilde>o, Samuel Thibault, Sawyer X, SE<eacute>bastien Aperghis-Tramoni, Sergey
Aleynikov, Shlomi Fish, Smylers, Stefan Seifert, Steffen ME<uuml>ller, Stevan
Little, Steve Hay, Steven Humphrey, Sullivan Beck, Theo Buehler, Thomas Sibley,
Todd Rinaldo, Tomasz Konojacki, Tony Cook, Unicode Consortium, Yaroslav Kuzmin,
Yves Orton, Zefram.

=begin original

The list above is almost certainly incomplete as it is automatically generated
from version control history.  In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

=end original

これはバージョンコントロール履歴から自動的に生成しているので、ほぼ確実に
不完全です。
特に、Perl バグトラッカーに問題を報告をしてくれた (とてもありがたい)貢献者の
名前を含んでいません。

=begin original

Many of the changes included in this version originated in the CPAN modules
included in Perl's core.  We're grateful to the entire CPAN community for
helping Perl to flourish.

=end original

このバージョンに含まれている変更の多くは、Perl コアに含まれている CPAN
モジュール由来のものです。
私たちは Perl の発展を助けている CPAN コミュニティ全体に感謝します。

=begin original

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

=end original

全ての Perl の歴史的な貢献者のより完全な一覧については、どうか Perl ソース
配布に含まれている F<AUTHORS> を参照してください。

=head1 Reporting Bugs

(バグ報告)

=begin original

If you find what you think is a bug, you might check the perl bug database at
L<https://rt.perl.org/>.  There may also be information at
L<http://www.perl.org/>, the Perl Home Page.

=end original

もしバグと思われるものを見つけたら、 L<https://rt.perl.org/> にある perl バグ
データベースを確認してください。
Perl ホームページ、L<http://www.perl.org/> にも情報があります。

=begin original

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to C<perlbug@perl.org> to be analysed by the Perl porting team.

=end original

もしまだ報告されていないバグだと確信したら、そのリリースに含まれている
L<perlbug> プログラムを実行してください。
バグの再現スクリプトを十分小さく、しかし有効なコードに切りつめることを
意識してください。
バグレポートは C<perl -V> の出力と一緒に C<perlbug@perl.org> に送られ
Perl porting チームによって解析されます。

=begin original

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
for details of how to report the issue.

=end original

報告しようとしているバグがセキュリティに関するもので、公開されている
メーリングリストに送るのが不適切なものなら、バグの報告方法の詳細について
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION> を参照してください。

=head1 Give Thanks

(感謝を伝える)

=begin original

If you wish to thank the Perl 5 Porters for the work we had done in Perl 5,
you can do so by running the C<perlthanks> program:

=end original

もし Perl 5 でなされた作業について Perl 5 Porters に感謝したいと考えたなら、
C<perlthanks> プログラムを実行することでそうできます:

    perlthanks

=begin original

This will send an email to the Perl 5 Porters list with your show of thanks.

=end original

これは Perl 5 Porters メーリングリストにあなたの感謝の言葉をメールします。

=head1 SEE ALSO

=begin original

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

=end original

変更点の完全な詳細を見る方法については F<Changes> ファイル。

=begin original

The F<INSTALL> file for how to build Perl.

=end original

Perl のビルド方法については F<INSTALL> ファイル。

=begin original

The F<README> file for general stuff.

=end original

一般的なことについては F<README> ファイル。

=begin original

The F<Artistic> and F<Copying> files for copyright information.

=end original

著作権情報については F<Artistic> 及び F<Copying> ファイル。

=cut

=begin meta

Translate: SHIRAKATA Kentaro <argrath@ub32.org>
Status: completed

=end meta

