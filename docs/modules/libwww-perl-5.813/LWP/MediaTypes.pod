
=encoding euc-jp

=head1 NAME

=begin original

LWP::MediaTypes - guess media type for a file or a URL

=end original

LWP::MediaTypes - ファイルまたはURLのためのメディアタイプを推測する

=head1 SYNOPSIS

 use LWP::MediaTypes qw(guess_media_type);
 $type = guess_media_type("/tmp/foo.gif");

=head1 DESCRIPTION

=begin original

This module provides functions for handling media (also known as
MIME) types and encodings.  The mapping from file extensions to media
types is defined by the F<media.types> file.  If the F<~/.media.types>
file exists it is used instead.
For backwards compatibility we will also look for F<~/.mime.types>.

=end original

このモジュールはメディア（MIMEとしても知られる）タイプとエンコーディングを
扱うための関数を提供します。
ファイル拡張子からメディアタイプへのマッピングは
F<media.types> ファイルによって定義されます。
もし F<~/.media.types> ファイルが存在すれば、代わりにそれが使われます。
以前のものとの互換性を保つために、F<~/.mime.types> も探します。

=begin original

The following functions are exported by default:

=end original

以下の関数がデフォルトでエクスポートされます：

=over 4

=item guess_media_type( $filename )

=item guess_media_type( $uri )

=item guess_media_type( $filename_or_uri, $header_to_modify )

=begin original

This function tries to guess media type and encoding for a file or a URI.
It returns the content type, which is a string like C<"text/html">.
In array context it also returns any content encodings applied (in the
order used to encode the file).  You can pass a URI object
reference, instead of the file name.

=end original

この関数はファイルまたは URI のためのメディアタイプとエンコードを
推測しようとします。
これは C<"text/html"> のような文字列で、content-type を返します。
配列コンテキストでは、(そのファイルをエンコードするために使われる順で)
適用されるすべての content-encodings を返します。
ファイル名の代わりに URI オブジェクトリファレンスを渡すこともできます。

=begin original

If the type can not be deduced from looking at the file name,
then guess_media_type() will let the C<-T> Perl operator take a look.
If this works (and C<-T> returns a TRUE value) then we return
I<text/plain> as the type, otherwise we return
I<application/octet-stream> as the type.

=end original

ファイル名を見てもタイプがわからなければ、guess_media_type() は
C<-T> Perl 演算子を使います。
もしこれが働けば (そして C<-T> が TRUE を返せば)、タイプとして
I<text/plain> を返します。
そうでなければ I<application/octet-stream> をタイプとして返します。

=begin original

The optional second argument should be a reference to a HTTP::Headers
object or any object that implements the $obj->header method in a
similar way.  When it is present the values of the
'Content-Type' and 'Content-Encoding' will be set for this header.

=end original

オプションの 2 番目の引数は、HTTP::Headers オブジェクトまたはそれと
同様の方法で $obj->header を実装しているなんらかのオブジェクトへの
リファレンスです。
それがあると、'Content-Type' と 'Content-Encoding' の値が
このヘッダに設定されます。

=item media_suffix( $type, ... )

=begin original

This function will return all suffixes that can be used to denote the
specified media type(s).  Wildcard types can be used.  In a scalar
context it will return the first suffix found. Examples:

=end original

この関数は指定されたメディアタイプを示すために使うことが出来る
すべての拡張子を返します。
ワイルドカードタイプを使うことが出来ます。
スカラコンテキストでは見つかった最初の拡張子を返します。
例:

  @suffixes = media_suffix('image/*', 'audio/basic');
  $suffix = media_suffix('text/html');

=back

=begin original

The following functions are only exported by explicit request:

=end original

以下の関数は明示的に要求によってのみエクスポートされます:

=over 4

=item add_type( $type, @exts )

=begin original

Associate a list of file extensions with the given media type.
Example:

=end original

ファイル拡張子のリストを与えられたメディアタイプに結び付けます。
例:

    add_type("x-world/x-vrml" => qw(wrl vrml));

=item add_encoding( $type, @ext )

=begin original

Associate a list of file extensions with an encoding type.
Example:

=end original

ファイル拡張子のリストをエンコーディングタイプに結び付けます。
例: 

 add_encoding("x-gzip" => "gz");

=item read_media_types( @files )

=begin original

Parse media types files and add the type mappings found there.
Example:

=end original

メディア・タイプファイルを解析し、そこで見つかったタイプ・マッピングを
追加します。
例:

    read_media_types("conf/mime.types");

=back

=head1 COPYRIGHT

Copyright 1995-1999 Gisle Aas.

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=begin meta

Translated: Hippo2000 <GCD00051@nifty.ne.jp> (5.48)
Updated: Kentaro SHIRAKATA <argrath@ub32.org> (5.813)

=end meta

