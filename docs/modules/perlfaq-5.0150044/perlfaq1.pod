
=encoding utf8

=head1 NAME

=begin original

perlfaq1 - General Questions About Perl

=end original

perlfaq1 - Perl に関する一般的な質問

=head1 DESCRIPTION

=begin original

This section of the FAQ answers very general, high-level questions
about Perl.

=end original

このセクションでは、Perl に関する非常に一般的で高レベルの質問に答えます。

=head2 What is Perl?

(Perlってなんですか?)

=begin original

Perl is a high-level programming language with an eclectic heritage
written by Larry Wall and a cast of thousands.

=end original

Perl は Larry Wall と数多い協力者によって書かれた、折衷的な遺産を持った
高水準プログラミング言語です。

=begin original

Perl's process, file, and text manipulation facilities make it
particularly well-suited for tasks involving quick prototyping, system
utilities, software tools, system management tasks, database access,
graphical programming, networking, and web programming.

=end original

Perl のプロセス、ファイル及びテキスト操作機能は、
クィックプロトタイピング、システムユーティリティ、ソフトウェアツール、
システム管理タスク、データベースアクセス、グラフィカルプログラミング、
ネットワーキング、そして web プログラミングを含んだタスクに
特に適したものになっています。

=begin original

Perl derives from the ubiquitous C programming language and to a
lesser extent from sed, awk, the Unix shell, and many other tools
and languages.

=end original

Perl は遍在するプログラミング言語である C から派生し、そして
それ程ではないけれども、
sed、awk、Unix のシェルおよび多くのその他のツールや言語に
影響を受けています。

=begin original

These strengths make it especially popular with web developers
and system administrators. Mathematicians, geneticists, journalists,
managers and many other people also use Perl.

=end original

これらの強みは、特に web 開発者とシステム管理者に人気を博しています。
数学者、遺伝学者、ジャーナリスト、管理者やその他の多くの人々も Perl を
利用しています。

=head2 Who supports Perl? Who develops it? Why is it free?

(だれが Perl をサポートしているのですか? 誰が開発しているのですか? なぜフリーなのでしょうか?)

=begin original

The original culture of the pre-populist Internet and the deeply-held
beliefs of Perl's author, Larry Wall, gave rise to the free and open
distribution policy of Perl. Perl is supported by its users. The
core, the standard Perl library, the optional modules, and the
documentation you're reading now were all written by volunteers.

=end original

pre-populist なインターネットの独特の文化と、Perl の作者である Larry
Wall の強い信条が、Perl のフリーでオープンな配布政策を生じさせました。
Perl はその利用者によってサポートされています。コア、Perl の標準
ライブラリ、オプションモジュール、そしてあなたが今読んでいる資料は
全てボランティアの手で書かれました。

=begin original

The core development team (known as the Perl Porters)
are a group of highly altruistic individuals committed to
producing better software for free than you could hope to purchase for
money. You may snoop on pending developments via the
L<archives|http://www.nntp.perl.org/group/perl.perl5.porters/>
or read the L<faq|http://dev.perl.org/perl5/docs/p5p-faq.html>,
or you can subscribe to the mailing list by sending
perl5-porters-subscribe@perl.org a subscription request
(an empty message with no subject is fine).

=end original

(Perl Porters として知られる)コア開発チームは、お金を出してでも
購入したいと思うレベルのものよりも、さらに良いソフトウェアを無料で
作り出すのだと誓っている、非常に利他的な人達の集団です。
L<アーカイブ|http://www.nntp.perl.org/group/perl.perl5.porters/>
から延び延びとなっている開発についてかぎまわったり、
L<FAQ|http://dev.perl.org/perl5/docs/p5p-faq.html> を読んだり、
あるいは、perl5-porters-subscribe@perl.org へ登録願いを出すことに
よってメイリングリストに参加することもできます
(タイトルなしの空メールでかまいません)。

=begin original

While the GNU project includes Perl in its distributions, there's no
such thing as "GNU Perl". Perl is not produced nor maintained by the
Free Software Foundation. Perl's licensing terms are also more open
than GNU software's tend to be.

=end original

GNU プロジェクトはその配布セットに Perl を含んでいますが、"GNU Perl"
のようなものはありません。
Perl は Free Software Foundation による作成も保守もされてはいません。
Perl のライセンス条件は GNU ソフトウェアが
通常取っているよりもさらにオープンなものとなっています。

=begin original

You can get commercial support of Perl if you wish, although for most
users the informal support will more than suffice. See the answer to
"Where can I buy a commercial version of Perl?" for more information.

=end original

あなたが望むなら、Perl の商用サポートを受けることが出来ます;
けれども、大半の利用者にとっては、非公式のサポートは期待水準以上のものでしょう。
詳しくは "Where can I buy a commercial version of Perl?" 
(どこで商用版 Perl を買うことが出来ますか?) の回答を参照してください。

=head2 Which version of Perl should I use?

(どのバージョンの Perl を使うべきなのでしょうか?)

=begin original

(contributed by brian d foy)

=end original

(brian d foy によって寄贈されました)

=begin original

There is often a matter of opinion and taste, and there isn't any one
answer that fits everyone. In general, you want to use either the current
stable release, or the stable release immediately prior to that one.
Currently, those are perl5.18.x and perl5.16.x, respectively.

=end original

これはしばしば見解と嗜好の問題であり、誰にでも適応する一つの答えというものは
ありません。
一般的に、現在の安定版か、その一つ前の安定版を使いたいでしょう。
現在のところ、それぞれ perl5.18.x と perl5.16.x となります。

=begin original

Beyond that, you have to consider several things and decide which is best
for you.

=end original

それはそれとして、いくつかの事柄を考慮して、どれがあなたにとって
最良であるかを決定する必要があります。

=over 4

=item *

=begin original

If things aren't broken, upgrading perl may break them (or at least issue
new warnings).

=end original

物事がおかしくなっていないなら、perl をアップグレードすることでおかしくなる
(または少なくとも新しい警告が出る)可能性があります。

=item *

=begin original

The latest versions of perl have more bug fixes.

=end original

最新バージョンの perl はより多くのバグが修正されています。

=item *

=begin original

The Perl community is geared toward supporting the most recent releases,
so you'll have an easier time finding help for those.

=end original

Perl のコミュニティは最新リリースのサポートに集中するので、
それらに対する助けは早く得られます。

=item *

=begin original

Versions prior to perl5.004 had serious security problems with buffer
overflows, and in some cases have CERT advisories (for instance,
L<http://www.cert.org/advisories/CA-1997-17.html> ).

=end original

perl5.004 以前のバージョンにはバッファオーバーフローによる重大な
セキュリティ問題があり、その一部には CERT アドバイザリ (例えば、
L<http://www.cert.org/advisories/CA-1997-17.html>) があります。

=item *

=begin original

The latest versions are probably the least deployed and widely tested, so
you may want to wait a few months after their release and see what
problems others have if you are risk averse.

=end original

最新版はあまり使われていなくて十分にテストされていないので、
もしリスクを嫌うならリリース後数ヶ月待って他の人がどんな問題を
抱えたかを確認したいかもしれません。

=item *

=begin original

The immediate, previous releases (i.e. perl5.14.x ) are usually maintained
for a while, although not at the same level as the current releases.

=end original

直前のリリース (つまり perl5.14.x ) は普通しばらくの間
メンテナンスされますが、カレントリリースと同じレベルではありません。

=item *

=begin original

No one is actively supporting Perl 4. Ten years ago it was a dead
camel carcass (according to this document). Now it's barely a skeleton
as its whitewashed bones have fractured or eroded.

=end original

だれも積極的に Perl 4 をサポートしていません。
10 年前、(この文書によれば)ラクダの死体となりました。
今となっては白骨化しています。

=item *

=begin original

The current leading implementation of Perl 6, Rakudo, released a "useful,
usable, 'early adopter'" distribution of Perl 6 (called Rakudo Star) in July of
2010. Please see L<http://rakudo.org/> for more information.

=end original

現在の指導的な Perl 6 実装である Rakudo は、「有用で使用可能で
『アーリーアダプタ』向け」の Perl 6 配布 (Rakudo Star と呼ばれます) を
2010 年 6 月にリリースしました。
さらなる情報についてはどうか L<http://rakudo.org/> を参照してください。

=item *

=begin original

There are really two tracks of perl development: a maintenance version
and an experimental version. The maintenance versions are stable, and
have an even number as the minor release (i.e. perl5.18.x, where 18 is the
minor release). The experimental versions may include features that
don't make it into the stable versions, and have an odd number as the
minor release (i.e. perl5.19.x, where 9 is the minor release).

=end original

実際の perl の開発は 2 つの路線があります: メンテナンス版と実験版です。
メンテナンス版は安定していて、マイナーリリース番号に偶数を使います
(例えば、perl5.18.0; 18 がマイナーリリース番号です)。
実験版は安定版に含まれていない機能が含まれていて、マイナーリリース番号に
奇数を使います(例えば、perl5.19.x; 19 がマイナーリリース番号です)。

=back

=head2 What are Perl 4, Perl 5, or Perl 6?

(Perl 4, Perl 5, Perl 6 って何ですか?)

=begin original

In short, Perl 4 is the parent to both Perl 5 and Perl 6. Perl 5 is the older
sibling, and though they are different languages, someone who knows one will
spot many similarities in the other.

=end original

短く言うと、Perl 4 は Perl 5 と Perl 6 双方の親です。
Perl 5 は兄で、違う言語ではありますが、片方を知っている人はもう片方にも
多くの類似性を見つけるでしょう。

=begin original

The number after Perl (i.e. the 5 after Perl 5) is the major release
of the perl interpreter as well as the version of the language. Each
major version has significant differences that earlier versions cannot
support.

=end original

"Perl" の後ろの数字(例えば "Perl 5" の 5)は perl インタプリタの
メジャーリリース番号であり、言語のバージョンでもあります。
メジャーバージョン毎に、以前のバージョンでは対応できない
大きな違いがあります。

=begin original

The current major release of Perl is Perl 5, first released in
1994. It can run scripts from the previous major release, Perl 4
(March 1991), but has significant differences.

=end original

現在の Perl のメジャーリリースは Perl 5 あり、1994 年に最初に
リリースされました。
以前のメジャーリリースである Perl 4 (1991 年 3 月リリース) のスクリプトも
動きますが、重大な違いがあります。

=begin original

Perl 6 is a reinvention of Perl, it is a language in the same lineage but
not compatible. The two are complementary, not mutually exclusive. Perl 6 is
not meant to replace Perl 5, and vice versa. See L</"What is Perl 6?"> below
to find out more.

=end original

Perl 6 は Perl の再開発です; これは同じ一族ですが互換性はありません。
この二つは補完的であり、排他的ではありません。
Perl 6 は Perl 5 の置き換えを意味しませんし、逆もまた真なりです。
さらなる情報については L</"What is Perl 6?"> を参照してください。

=begin original

See L<perlhist> for a history of Perl revisions.

=end original

Perl の改訂の歴史に関しては L<perlhist> を参照してください。

=head2 What is Perl 6?

(Perl 6 ってなんですか?)

=begin original

Perl 6 was I<originally> described as the community's rewrite of Perl 5.
Development started in 2002; syntax and design work continue to this day.
As the language has evolved, it has become clear that it is a separate
language, incompatible with Perl 5 but in the same language family.

=end original

Perl 6 は I<元々は> コミュニティによる Perl 5 の書き直しとされていました。
開発は 2002 年に開始されました; 文法と設計の作業は現在でも続いています。
言語が進化するにつれて、Perl 5 とは同じ言語ファミリではありますが
別の互換性のない言語であることがはっきりしてきました。

=begin original

Contrary to popular belief, Perl 6 and Perl 5 peacefully coexist with one
another. Perl 6 has proven to be a fascinating source of ideas for those
using Perl 5 (the L<Moose> object system is a well-known example). There is
overlap in the communities, and this overlap fosters the tradition of sharing
and borrowing that have been instrumental to Perl's success. The current
leading implementation of Perl 6 is Rakudo, and you can learn more about
it at L<http://rakudo.org>.

=end original

一般に信じられていることに反して、Perl 6 と Perl 5 は平和的に共存します。
Perl 6 は Perl 5 を使うときの興味深いアイデアの基と考えられています (L<Moose>
オブジェクトシステムはよく知られた例です)。
コミュニティは重なっていて、この重なりは Perl の成功に役だった共有と借用の
伝統を育てています。
現在の指導的な Perl 6 実装は Rakudo で、L<http://rakudo.org> でさらに
学べます。

=begin original

If you want to learn more about Perl 6, or have a desire to help in
the crusade to make Perl a better place then read the Perl 6 developers
page at L<http://www.perl6.org/> and get involved.

=end original

Perl 6 についてもっと知りたい、または Perl をよりよき場所へと導く
十字軍を助けたいなら、Perl 6 開発者ページ L<http://www.perl6.org/> を
読んで、参加してください。

=begin original

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall

=end original

"We're really serious about reinventing everything that needs reinventing."
--Larry Wall

=head2 How stable is Perl?

(Perl はどのくらい安定しているのでしょうか?)

=begin original

Production releases, which incorporate bug fixes and new functionality,
are widely tested before release. Since the 5.000 release, we have
averaged about one production release per year.

=end original

バグのフィックスと新機能を組み入れた本番リリースは、リリース前に
広くテストされます。
平均すると、5.000 のリリースからはだいたい一年に一回の割で
本番リリースをしてきました。

=begin original

The Perl development team occasionally make changes to the
internal core of the language, but all possible efforts are made toward
backward compatibility.

=end original

Larry と Perl 開発チームは時折言語内部のコアに対する変更を行いますが、
可能な限り旧版との互換性維持に努めています。

=head2 How often are new versions of Perl released?

(どのくらいのペースで新しいバージョンの Perl はリリースされますか?)

=begin original

Recently, the plan has been to release a new version of Perl roughly every
April, but getting the release right is more important than sticking rigidly to
a calendar date, so the release date is somewhat flexible.  The historical
release dates can be viewed at L<http://www.cpan.org/src/README.html>.

=end original

最近は、新しいバージョンの Perl をおおよそ毎年 4 月にリリースする計画ですが、
正しくリリースすることがカレンダー日付に厳格にこだわるよりも重要なので、
リリース日はやや柔軟です。
歴史上のリリース日は L<http://www.cpan.org/src/README.html> で見られます。


=begin original

Even numbered minor versions (5.14, 5.16, 5.18) are production versions, and
odd numbered minor versions (5.15, 5.17, 5.19) are development versions. Unless
you want to try out an experimental feature, you probably never want to install
a development version of Perl.

=end original

偶数のマイナーバージョン (5.14, 5.16, 5.18) は製品版バージョンで、
偶数のマイナーバージョン (5.15, 5.17, 5.19) は開発版バージョンです。
実験的な機能を試したいのでないかぎり、おそらく決して Perl の開発版を
インストールしようとしない方がよいでしょう。

=begin original

The Perl development team are called Perl 5 Porters, and their
organization is described at L<http://perldoc.perl.org/perlpolicy.html>.
The organizational rules really just boil down to one: Larry is always
right, even when he was wrong.

=end original

Perl 開発チームは Perl 5 Porters と呼ばれ、その組織は
L<http://perldoc.perl.org/perlpolicy.html> に記述されています。
組織の規則は要約するとただ一つです: Larry は常に正しいです;
たとえ以前は間違っていてもです。

=head2 Is Perl difficult to learn?

(Perl は学ぶのが難しいのでしょうか?)

=begin original

No, Perl is easy to start L<learning|http://learn.perl.org/> --and easy to keep learning. It looks
like most programming languages you're likely to have experience
with, so if you've ever written a C program, an awk script, a shell
script, or even a BASIC program, you're already partway there.

=end original

いいえ; Perl は L<学び始める|http://learn.perl.org/> のが容易で -- しかも
学び続けるのが容易なのです。
Perl はあなたが(たぶん)慣れ親しんできたたいていのプログラミング
言語のように見えます; ですから、C プログラムを、awk スクリプトを、
シェルスクリプトを、はたまた BASIC のプログラムであろうと書いたことが
あるのなら、既に習得の途上にあるわけです。

=begin original

Most tasks only require a small subset of the Perl language. One of
the guiding mottos for Perl development is "there's more than one way
to do it" (TMTOWTDI, sometimes pronounced "tim toady"). Perl's
learning curve is therefore shallow (easy to learn) and long (there's
a whole lot you can do if you really want).

=end original

たいていのタスクは Perl 言語の小さなサブセットを要求するだけです。
Perl の開発における指導的モットーのひとつは、「それを行うやり方は
一つではない」("there's more than one way to do it)というもので
す(TMTOWTDI、時々"tim toady"と発音される)。
それ故、Perl の習得曲線は浅く
(学びやすく)長い(もしほんとうに望むのならできることは山ほどある)のです。

=begin original

Finally, because Perl is frequently (but not always, and certainly not by
definition) an interpreted language, you can write your programs and test
them without an intermediate compilation step, allowing you to experiment
and test/debug quickly and easily. This ease of experimentation flattens
the learning curve even more.

=end original

最後に、Perl はしばしば(しかし常に、ではありません; 定義によります)
言われるようにインタープリター型言語です; つまり、プログラムを書いたら、
中間コンパイルステップに入らずそのままテストでき、実験や、
テスト/デバッグをすばやく、かつ容易に行なえるようにしてくれるわけです。
この実験の容易さが、よりいっそう習得曲線を平らにします

=begin original

Things that make Perl easier to learn: Unix experience, almost any kind
of programming experience, an understanding of regular expressions, and
the ability to understand other people's code. If there's something you
need to do, then it's probably already been done, and a working example is
usually available for free. Don't forget Perl modules, either.
They're discussed in Part 3 of this FAQ, along with L<CPAN|http://www.cpan.org/>, which is
discussed in Part 2.

=end original

Perl をより学びやすくするもの: UNIX の経験、ほとんどあらゆる種類の
プログラミング経験、正規表現の理解、そして他の人のコードを理解する力。
あなたが何か行う必要がある場合、たぶんそれは行われており、
通常その仕事の事例はフリーで利用することができます。
Perl モジュールも忘れてはなりません。
それらは二章で議論されている L<CPAN|http://www.cpan.org/> と共に、
この FAQ の三章で議論されています。

=head2 How does Perl compare with other languages like Java, Python, REXX, Scheme, or Tcl?

(Java, Python, REXX, Scheme, Tcl といった他の言語と比べて Perl はどうなんでしょうか?)

=begin original

Perl can be used for almost any coding problem, even ones which require
integrating specialist C code for extra speed. As with any tool it can
be used well or badly. Perl has many strengths, and a few weaknesses,
precisely which areas are good and bad is often a personal choice.

=end original

Perl はほとんどあらゆるコーディング上の問題に使えます; より高速にするための
特別な C コードとの統合が必要なものも含みます。
あらゆるツールと同様、よく使うことも悪く使うこともできます。
Perl は多くの強みと、いくつかの弱みがあります; 正確にはどの分野がよく、
どの分野が悪いかはしばしば個人の選択です。

=begin original

When choosing a language you should also be influenced by the
L<resources|http://www.cpan.org/>, L<testing culture|http://www.cpantesters.org/>
and L<community|http://www.perl.org/community.html> which surrounds it.

=end original

言語を選ぶとき、その周りの L<リソース|http://www.cpan.org/>、
L<テスト文化|http://www.cpantesters.org/>、
L<コミュニティ|http://www.perl.org/community.html> の影響も受けるべきです。

=begin original

For comparisons to a specific language it is often best to create
a small project in both languages and compare the results, make sure
to use all the L<resources|http://www.cpan.org/> of each language,
as a language is far more than just it's syntax.

=end original

特定の言語との比較のためには、言語は単なる文法以上のものなので、
両方の言語で小さいプロジェクトを作って結果を比較し、それぞれの言語で
全ての L<リソース|http://www.cpan.org/> が使えることを確認するのがしばしば
最良の方法です。

=head2 Can I do [task] in Perl?

(Perl で○○を行えますか?)

=begin original

Perl is flexible and extensible enough for you to use on virtually any
task, from one-line file-processing tasks to large, elaborate systems.

=end original

Perl は、オンラインのファイル処理タスクから複雑なシステムまでほとんど
全てのタスクで使うのに十分な柔軟性があり、高い拡張性を持っています。

=begin original

For many people, Perl serves as a great replacement for shell scripting.
For others, it serves as a convenient, high-level replacement for most of
what they'd program in low-level languages like C or C++. It's ultimately
up to you (and possibly your management) which tasks you'll use Perl
for and which you won't.

=end original

多くの人々にとっては、Perl はシェルスクリプティングに対する
偉大な代用品として仕えます。
他の人々にとっては、C やC++ のような低水準言語でプログラムしてきた
大半のものに対する、便利で高水準な代用品として仕えます。
最終的には Perl をどのタスクに使ってどれに
使わないかはあなた(そしてたぶんあなたの管理)によります。

=begin original

If you have a library that provides an API, you can make any component
of it available as just another Perl function or variable using a Perl
extension written in C or C++ and dynamically linked into your main
perl interpreter. You can also go the other direction, and write your
main program in C or C++, and then link in some Perl code on the fly,
to create a powerful application. See L<perlembed>.

=end original

API を提供するライブラリがあれば、そこにあるコンポーネントをみんな、
ちょうどもうひとつの Perl 関数として、あるいは C や C++ で書かれ、
主要な perl インタープリタにダイナミックリンクされた Perl エクステンションを
使った変数として、利用することができます。
また、他の方向に行って、強力なアプリケーションを制作するために、
主要なプログラムを C や C++ で書いて、それをそのまま
ちょっとした Perl コードにリンクさせることも可能です。
L<perlembed> を参照してください。

=begin original

That said, there will always be small, focused, special-purpose
languages dedicated to a specific problem domain that are simply more
convenient for certain kinds of problems. Perl tries to be all things
to all people, but nothing special to anyone. Examples of specialized
languages that come to mind include prolog and matlab.

=end original

ある種の問題に対しては単により便利で、特定の問題領域専用の、小型で、
集約された、特別な目的を持った言語は常にあるものだと言われています。
Perl はあらゆる人に対してあらゆるものであろうとしていますが、
誰かに対する何か特別なものではありません。
特化した言語の例としては prolog と matlab が思い浮かんできます。

=head2 When shouldn't I program in Perl?

(Perl でプログラムするべきではないのはどういう場合ですか?)

=begin original

One good reason is when you already have an existing
application written in another language that's all done (and done
well), or you have an application language specifically designed for a
certain task (e.g. prolog, make).

=end original

他の言語で記述されていてすでに使われているような(さらに
それがうまく動いている)アプリケーションがあるとか、
ある特定のタスクのために特別にデザインされたアプリケーション言語(prolog や
make など)があるというのが理由になるでしょう。

=begin original

If you find that you need to speed up a specific part of a Perl
application (not something you often need) you may want to use C,
but you can access this from your Perl code with L<perlxs>.

=end original

(頻繁に必要になるものではありませんが) Perl アプリケーションの特定の部分を
高速化する必要がある場合、C を使いたいかもしれませんが、Perl のコードから
L<perlxs> を使ってこれにアクセスできます。

=head2 What's the difference between "perl" and "Perl"?

(“perl”と“Perl”の違いはなんですか?)

=begin original

"Perl" is the name of the language. Only the "P" is capitalized.
The name of the interpreter (the program which runs the Perl script)
is "perl" with a lowercase "p".

=end original

"Perl" は言語の名前です。
"P" だけを大文字にします。
インタプリタ(Perl スクリプトを実行するプログラム)の名前は "perl" です;
小文字の "p" です。

=begin original

You may or may not choose to follow this usage. But never write "PERL",
because perl is not an acronym.

=end original

この使用法に従ってもかまいません従わなくてもかまいません。
ただし、"PERL" と書いてはいけません; なぜなら、perl は何かの
頭字語ではないからです。

=head2 What is a JAPH?

(JAPH ってなんですか?)

=begin original

(contributed by brian d foy)

=end original

(brian d foy によって寄贈されました)

=begin original

JAPH stands for "Just another Perl hacker,", which Randal Schwartz used
to sign email and usenet messages starting in the late 1980s. He
previously used the phrase with many subjects ("Just another x hacker,"),
so to distinguish his JAPH, he started to write them as Perl programs:

=end original

JAPH は "Just another Perl hacker," を意味し、Randal Schwartz 1980 年代
後半から電子メールと USENET のメッセージへのサインとして使い始めました。
彼はは以前多くの話題にこのフレーズを使っていた("Just another x hacker,")
ので、JAPH を区別するために、彼はこれらを Perl プログラムのように
書き始めました:

    print "Just another Perl hacker,";

=begin original

Other people picked up on this and started to write clever or obfuscated
programs to produce the same output, spinning things quickly out of
control while still providing hours of amusement for their creators and
readers.

=end original

他の人々がこれを取り上げて、同じ出力を生成する気の利いた、または
わかりにくいプログラムを書き始め、事態は急速に制御不能となりましたが、
未だに作者と読者にとって楽しみの時間を提供しています。

=begin original

CPAN has several JAPH programs at L<http://www.cpan.org/misc/japh>.

=end original

CPAN には L<http://www.cpan.org/misc/japh> に、いくつかの JAPH プログラムが
あります。

=head2 How can I convince others to use Perl?

(他の人に、どうすれば Perl を使うように説得できるでしょうか?)

=begin original

(contributed by brian d foy)

=end original

(brian d foy によって寄贈されました)

=begin original

Appeal to their self interest! If Perl is new (and thus scary) to them,
find something that Perl can do to solve one of their problems. That
might mean that Perl either saves them something (time, headaches, money)
or gives them something (flexibility, power, testability).

=end original

彼ら自身の関心に訴えてください!
もし彼らにとって Perl が新しい(従って恐ろしい) ものなら、
Perl が彼らの問題のひとつを解決できるようなことを何かひとつ
見つけてください。
これによって、Perl が何か(時間、悩み、時間)を節約するか、
何か(柔軟性、力、テスト可能性)を与えることを意味するかもしれません。

=begin original

In general, the benefit of a language is closely related to the skill of
the people using that language. If you or your team can be faster,
better, and stronger through Perl, you'll deliver more value. Remember,
people often respond better to what they get out of it. If you run
into resistance, figure out what those people get out of the other
choice and how Perl might satisfy that requirement.

=end original

一般的に、ある言語の利点は、その言語を使う人々のスキルに大きな関係が
あります。
もし Perl によってあなたはあなたのチームがより速く、より良く、より
強くなれるなら、あなたはより多くの価値を届けることができます。
人々はしばしば、そこから何を得られるかによりよく反応することを
覚えておいてください。
もし抵抗に遭った場合は、その人々が他の選択肢から何を引き出しているか、
そしてどうすれば Perl がその要求を満たすかを見つけ出してください。

=begin original

You don't have to worry about finding or paying for Perl; it's freely
available and several popular operating systems come with Perl. Community
support in places such as Perlmonks ( L<http://www.perlmonks.com> )
and the various Perl mailing lists ( L<http://lists.perl.org> ) means that
you can usually get quick answers to your problems.

=end original

Perl を探したり買ったりする心配する必要はありません; Perl はフリーで
利用でき、いくつかの有名なオペレーティングシステムは Perl を同梱しています。
Perlmonks ( L<http://www.perlmonks.com> ) のようにあちこちにあるコミュニティ
サポートと、様々な Perl メーリングリスト
( L<http://lists.perl.org> ) によって、たいていはあなたの問題に対する素早い
回答を得られます。

=begin original

Finally, keep in mind that Perl might not be the right tool for every
job. You're a much better advocate if your claims are reasonable and
grounded in reality. Dogmatically advocating anything tends to make
people discount your message. Be honest about possible disadvantages
to your choice of Perl since any choice has trade-offs.

=end original

最後に、Perl が全ての作業に対して正しいツールとは限らないことを心に
留めておいてください。
あなたの主張が妥当で、現実に基いたものであれば、あなたは遥かによい
提唱者となります。
なんであれ独善的な主張を行うと、人々はあなたの主張を割り引いて扱う
傾向があります。
全ての選択にはトレードオフがありますので、Perl という選択に対して
あり得る弱点について素直になりましょう。

=begin original

You might find these links useful:

=end original

以下のリンクが有用かもしれません:

=over 4

=item * L<http://www.perl.org/about.html>

=item * L<http://perltraining.com.au/whyperl.html>

=back

=head1 AUTHOR AND COPYRIGHT

Copyright (c) 1997-2010 Tom Christiansen, Nathan Torkington, and
other authors as noted. All rights reserved.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples here are in the public
domain. You are permitted and encouraged to use this code and any
derivatives thereof in your own programs for fun or for profit as you
see fit. A simple comment in the code giving credit to the FAQ would
be courteous but is not required.

=begin meta

Translate: 吉村 寿人 <JAE00534@niftyserve.or.jp>
Update: SHIRAKATA Kentaro <argrath@ub32.org> (5.6.1-5.14.1, 5.00150039)
Status: completed

=end meta

