
=encoding euc-jp

=head1 NAME

=begin original

Time::HiRes - High resolution alarm, sleep, gettimeofday, interval timers

=end original

Time::HiRes - 高精度の alarm, sleep, gettimeofday, インターバルタイマー

=head1 SYNOPSIS

  use Time::HiRes qw( usleep ualarm gettimeofday tv_interval nanosleep
		      clock_gettime clock_getres clock_nanosleep clock
                      stat );

  usleep ($microseconds);
  nanosleep ($nanoseconds);

  ualarm ($microseconds);
  ualarm ($microseconds, $interval_microseconds);

  $t0 = [gettimeofday];
  ($seconds, $microseconds) = gettimeofday;

  $elapsed = tv_interval ( $t0, [$seconds, $microseconds]);
  $elapsed = tv_interval ( $t0, [gettimeofday]);
  $elapsed = tv_interval ( $t0 );

  use Time::HiRes qw ( time alarm sleep );

  $now_fractions = time;
  sleep ($floating_seconds);
  alarm ($floating_seconds);
  alarm ($floating_seconds, $floating_interval);

  use Time::HiRes qw( setitimer getitimer );

  setitimer ($which, $floating_seconds, $floating_interval );
  getitimer ($which);

  use Time::HiRes qw( clock_gettime clock_getres clock_nanosleep
		      ITIMER_REAL ITIMER_VIRTUAL ITIMER_PROF ITIMER_REALPROF );

  $realtime   = clock_gettime(CLOCK_REALTIME);
  $resolution = clock_getres(CLOCK_REALTIME);

  clock_nanosleep(CLOCK_REALTIME, 1.5e9);
  clock_nanosleep(CLOCK_REALTIME, time()*1e9 + 10e9, TIMER_ABSTIME);

  my $ticktock = clock();

  use Time::HiRes qw( stat );

  my @stat = stat("file");
  my @stat = stat(FH);

=head1 DESCRIPTION

=begin original

The C<Time::HiRes> module implements a Perl interface to the
C<usleep>, C<nanosleep>, C<ualarm>, C<gettimeofday>, and
C<setitimer>/C<getitimer> system calls, in other words, high
resolution time and timers. See the L</EXAMPLES> section below and the
test scripts for usage; see your system documentation for the
description of the underlying C<nanosleep> or C<usleep>, C<ualarm>,
C<gettimeofday>, and C<setitimer>/C<getitimer> calls.

=end original

C<Time::HiRes> モジュールは C<usleep>, C<nanosleep>, C<ualarm>,
C<gettimeofday>, C<setitimer>/C<getitimer> システムコール、言い換えれば
高精度の時刻とタイマーへの Perl インターフェースを実装します。
使い方については下記の L</EXAMPLES> 節とテストスクリプトを
参照してください; 基になっている C<nanosleep> あるいは C<usleep>, C<ualarm>,
C<gettimeofday>, そして C<setitimer>/C<getitimer> については、
システムの文書を参照してください。

=begin original

If your system lacks C<gettimeofday()> or an emulation of it you don't
get C<gettimeofday()> or the one-argument form of C<tv_interval()>.
If your system lacks all of C<nanosleep()>, C<usleep()>,
C<select()>, and C<poll>, you don't get C<Time::HiRes::usleep()>,
C<Time::HiRes::nanosleep()>, or C<Time::HiRes::sleep()>.
If your system lacks both C<ualarm()> and C<setitimer()> you don't get
C<Time::HiRes::ualarm()> or C<Time::HiRes::alarm()>.

=end original

システムに C<gettimeofday()> やそのエミュレーションがなければ、
C<gettimeofday()> や引数一つの形での C<tv_interval()> は使えません。
システムに C<nanosleep()>, C<usleep()>, C<select()>, C<poll> の
どれもなければ、C<Time::HiRes::usleep()>, C<Time::HiRes::nanosleep()>,
C<Time::HiRes::sleep()> は使えません。
システムに C<ualarm()> と C<setitimer()> の両方がなければ、
C<Time::HiRes::ualarm()> や C<Time::HiRes::alarm()> は使えません。

=begin original

If you try to import an unimplemented function in the C<use> statement
it will fail at compile time.

=end original

C<use> 文のなかで実装されていない関数をインポートしようとすると、
コンパイル時に失敗します。

=begin original

If your subsecond sleeping is implemented with C<nanosleep()> instead
of C<usleep()>, you can mix subsecond sleeping with signals since
C<nanosleep()> does not use signals.  This, however, is not portable,
and you should first check for the truth value of
C<&Time::HiRes::d_nanosleep> to see whether you have nanosleep, and
then carefully read your C<nanosleep()> C API documentation for any
peculiarities.

=end original

1 秒以下の sleep が C<usleep()> ではなく C<nanosleep()> で
実装されていれば、C<nanosleep()> はシグナルを使わないので、
1 秒以下の sleep とシグナルを混在させることができます。
しかしこれは移植性を欠きます;
そしてまず最初に nanosleep を持っているのか、C<&Time::HiRes::d_nanosleep> の
値が真であるかチェックしなければなりません;
それから特有なことがないか慎重に C<nanosleep()> C API 文書を
読まなければなりません。

=begin original

If you are using C<nanosleep> for something else than mixing sleeping
with signals, give some thought to whether Perl is the tool you should
be using for work requiring nanosecond accuracies.

=end original

sleep とシグナルを混在させる以外のために C<nanosleep> を使うと、
Perl がナノ秒の正確さを要求される仕事のために使うべきツールであるか
という疑問があります。

=begin original

Remember that unless you are working on a I<hard realtime> system,
any clocks and timers will be imprecise, especially so if you are working
in a pre-emptive multiuser system.  Understand the difference between
I<wallclock time> and process time (in UNIX-like systems the sum of
I<user> and I<system> times).  Any attempt to sleep for X seconds will
most probably end up sleeping B<more> than that, but don't be surpised
if you end up sleeping slightly B<less>.

=end original

Remember that unless you are working on a I<hard realtime> system,
any clocks and timers will be imprecise, especially so if you are working
in a pre-emptive multiuser system.  Understand the difference between
I<wallclock time> and process time (in UNIX-like systems the sum of
I<user> and I<system> times).  Any attempt to sleep for X seconds will
most probably end up sleeping B<more> than that, but don't be surpised
if you end up sleeping slightly B<less>.
(TBT)

=begin original

The following functions can be imported from this module.
No functions are exported by default.

=end original

以下の関数がこのモジュールからインポートできます。
デフォルトでエクスポートされる関数はありません。

=over 4

=item gettimeofday ()

=begin original

In array context returns a two-element array with the seconds and
microseconds since the epoch.  In scalar context returns floating
seconds like C<Time::HiRes::time()> (see below).

=end original

配列コンテキストではエポックからの秒とマイクロ秒二つの要素の配列を返します。
スカラコンテキストでは、C<Time::HiRes::time()> のように秒を
浮動小数点数で返します(下記参照)。

=item usleep ( $useconds )

=begin original

Sleeps for the number of microseconds (millionths of a second)
specified.  Returns the number of microseconds actually slept.
Can sleep for more than one second, unlike the C<usleep> system call.
Can also sleep for zero seconds, which often works like a I<thread yield>.
See also C<Time::HiRes::usleep()>, C<Time::HiRes::sleep()>, and
C<Time::HiRes::clock_nanosleep()>.

=end original

指定されたマイクロ秒(100 万分の 1 秒)数、sleep します。
実際に sleep したマイクロ秒数を返します。
C<usleep> システムコールとは違い、1 秒以上 sleep することができます。
0 秒スリープすることもできます; しばしば
I<スレッド委譲> (thread yield) のように働きます。
C<Time::HiRes::usleep()>, C<Time::HiRes::sleep()>,
C<Time::HiRes::clock_nanosleep()>
もご覧ください。

=begin original

Do not expect usleep() to be exact down to one microsecond.

=end original

usleep() が 1 マイクロ秒単位で正確と想定しないでください。

=item nanosleep ( $nanoseconds )

=begin original

Sleeps for the number of nanoseconds (1e9ths of a second) specified.
Returns the number of nanoseconds actually slept (accurate only to
microseconds, the nearest thousand of them).  Can sleep for more than
one second.  Can also sleep for zero seconds, which often works like
a I<thread yield>.  See also C<Time::HiRes::sleep()>,
C<Time::HiRes::usleep()>, and C<Time::HiRes::clock_nanosleep()>.

=end original

Sleeps for the number of nanoseconds (1e9ths of a second) specified.
Returns the number of nanoseconds actually slept (accurate only to
microseconds, the nearest thousand of them).  Can sleep for more than
one second.  Can also sleep for zero seconds, which often works like
a I<thread yield>.  See also C<Time::HiRes::sleep()>,
C<Time::HiRes::usleep()>, and C<Time::HiRes::clock_nanosleep()>.
(TBT)

=begin original

Do not expect nanosleep() to be exact down to one nanosecond.
Getting even accuracy of one thousand nanoseconds is good.

=end original

nanosleep() がナノ秒単位で正確と想定しないでください。
1000 ナノ秒の精度でも良い方です。

=item ualarm ( $useconds [, $interval_useconds ] )

=begin original

Issues a C<ualarm> call; the C<$interval_useconds> is optional and
will be zero if unspecified, resulting in C<alarm>-like behaviour.

=end original

C<ualarm> コールを発行します; C<$interval_useconds> はオプションで、
指定されなければ 0 になり、その結果は C<alarm> のような動きをします。

=begin original

Returns the remaining time in the alarm in microseconds, or C<undef>
if an error occurred.

=end original

アラームの残り時間をマイクロ秒で返します; エラーが発生すると
C<undef> を返します。

=begin original

ualarm(0) will cancel an outstanding ualarm().

=end original

ualarm(0) は未実行の ualarm() をキャンセルします。

=begin original

Note that the interaction between alarms and sleeps is unspecified.

=end original

アラームとスリープの相互作用は未規定であることに注意してください。

=item tv_interval 

tv_interval ( $ref_to_gettimeofday [, $ref_to_later_gettimeofday] )

=begin original

Returns the floating seconds between the two times, which should have
been returned by C<gettimeofday()>. If the second argument is omitted,
then the current time is used.

=end original

二つの時刻の時間を浮動小数点の秒数を返します。
二つの時刻は C<gettimeofday()> で返されたものでなければなりません。
2 番目の引数が省略されると、現在の時刻が使われます。

=item time ()

=begin original

Returns a floating seconds since the epoch. This function can be
imported, resulting in a nice drop-in replacement for the C<time>
provided with core Perl; see the L</EXAMPLES> below.

=end original

浮動小数点でエポックからの秒数を返します。
この関数はインポートすることができます; その結果、Perl のコアで提供される
差し込み式に C<time> を置き換えることになります;
下記の L</EXAMPLES> をご覧ください。

=begin original

B<NOTE 1>: This higher resolution timer can return values either less
or more than the core C<time()>, depending on whether your platform
rounds the higher resolution timer values up, down, or to the nearest second
to get the core C<time()>, but naturally the difference should be never
more than half a second.  See also L</clock_getres>, if available
in your system.

=end original

B<注意 1>: この高精度の time は、あなたのプラットホームがコアの C<time()> を
得るために、より高精度の時刻を切り上げたり、切り捨てたり、一番近い秒に
するのいずれかによって、コアの C<time()> よりも多かったり、少なかったり
することがあります;
しかし当然、その差は 0.5 秒を越えることはありえません。
システムで利用可能なら、L</clock_getres> も参照してください。

=begin original

B<NOTE 2>: Since Sunday, September 9th, 2001 at 01:46:40 AM GMT, when
the C<time()> seconds since epoch rolled over to 1_000_000_000, the
default floating point format of Perl and the seconds since epoch have
conspired to produce an apparent bug: if you print the value of
C<Time::HiRes::time()> you seem to be getting only five decimals, not
six as promised (microseconds).  Not to worry, the microseconds are
there (assuming your platform supports such granularity in the first
place).  What is going on is that the default floating point format of
Perl only outputs 15 digits.  In this case that means ten digits
before the decimal separator and five after.  To see the microseconds
you can use either C<printf>/C<sprintf> with C<"%.6f">, or the
C<gettimeofday()> function in list context, which will give you the
seconds and microseconds as two separate values.

=end original

B<注意 2>: 2001 年 9 月 9 日 日曜日 GMT の午前 1:46:40 より、
エポックからの C<time()> 秒は、1_000_000_000 を超えています。
Perl でのデフォルトの浮動小数点のフォーマットとエポックからの秒数が
あいまって明らかなバグを作り出します: C<Time::HiRes::time()> の値を
出力すると、保証された 6 桁(マイクロ秒)ではなく 5 桁の数字しか得ることが
できません。
ご心配なく; マイクロ秒は存在します(もちろんあなたの
プラットホームが、そのような粒度をサポートしているものと想定しています)。
何が起きているかといえば、Perl の浮動小数点のデフォルトのフォーマットでは
15 桁の数字しか出力しません。
この場合、小数点の前に 10 桁の数字があり、その後ろに 5 桁あります。
マイクロ秒を見るためには C<"%.6f"> で C<printf>/C<sprintf> の
どちらかを使うか、リストコンテキストで C<gettimeofday()> を
使うことができます。
この場合には、秒とマイクロ秒の二つを別の値として与えてくれます。

=item sleep ( $floating_seconds )

=begin original

Sleeps for the specified amount of seconds.  Returns the number of
seconds actually slept (a floating point value).  This function can
be imported, resulting in a nice drop-in replacement for the C<sleep>
provided with perl, see the L</EXAMPLES> below.

=end original

指定された秒数、sleep します。
実際に sleep した秒数を(浮動小数点の値で)返します。
この関数はインポートすることができます;
その結果、Perl のコアで提供される差し込み式に C<sleep> を
置き換えることになります; 下記の L</EXAMPLES> をご覧ください。

=begin original

Note that the interaction between alarms and sleeps is unspecified.

=end original

アラームとスリープの相互作用は未規定であることに注意してください。

=item alarm ( $floating_seconds [, $interval_floating_seconds ] )

=begin original

The C<SIGALRM> signal is sent after the specified number of seconds.
Implemented using C<setitimer()> if available, C<ualarm()> if not.
The C<$interval_floating_seconds> argument is optional and will be
zero if unspecified, resulting in C<alarm()>-like behaviour.  This
function can be imported, resulting in a nice drop-in replacement for
the C<alarm> provided with perl, see the L</EXAMPLES> below.

=end original

指定され秒数後、C<SIGALRM> シグナルが送られます。
C<setitimer()> があればこれを使い、なければ C<ualarm()> を使って
実装されています。
C<$interval_floating_seconds> 引数は
オプションで指定されないと 0 になります。
その結果、C<alarm()> のような動きになります。
この関数はインポートすることができます;
その結果、Perl のコアで提供される差し込み式に C<alarm> を
置き換えることになります; 下記の L</EXAMPLES> をご覧ください。

=begin original

Returns the remaining time in the alarm in seconds, or C<undef>
if an error occurred.

=end original

アラームの残り時間を秒で返します; エラーが発生した場合は
C<undef> を返します。

=begin original

B<NOTE 1>: With some combinations of operating systems and Perl
releases C<SIGALRM> restarts C<select()>, instead of interrupting it.
This means that an C<alarm()> followed by a C<select()> may together
take the sum of the times specified for the the C<alarm()> and the
C<select()>, not just the time of the C<alarm()>.

=end original

B<注意 1>: オペレーティングシステムと Perl のリリースの
組み合わせによっては C<SIGALRM> が中断させるのではなく、C<select()> を
再開始させることもあります。
これは C<alarm()> の後に C<select()> をすると、C<alarm()> に指定した
時間通りにではなく、
C<alarm()> と C<select()> に指定された時間の合計が掛かるかも
しれないことを意味します。

=begin original

Note that the interaction between alarms and sleeps is unspecified.

=end original

アラームとスリープの相互作用は未規定であることに注意してください。

=item setitimer ( $which, $floating_seconds [, $interval_floating_seconds ] )

=begin original

Start up an interval timer: after a certain time, a signal ($which) arrives,
and more signals may keep arriving at certain intervals.  To disable
an "itimer", use C<$floating_seconds> of zero.  If the
C<$interval_floating_seconds> is set to zero (or unspecified), the
timer is disabled B<after> the next delivered signal.

=end original

インターバルタイマーを開始させます; 一定の時間後、シグナル ($which) が届き、
ある間隔でシグナルが届き続けるかもしれません。
"itimer" を止めるには、C<$floating_seconds> を 0 にしてください。
C<$interval_floating_seconds> に 0 が指定されると(あるいは何も
指定されないと)、タイマーは次にシグナルが届いた B<後に> 止められます。

=begin original

Use of interval timers may interfere with C<alarm()>, C<sleep()>,
and C<usleep()>.  In standard-speak the "interaction is unspecified",
which means that I<anything> may happen: it may work, it may not.

=end original

インターバルタイマーを使うことは C<alarm()>, C<sleep()>、C<usleep()> に
よって邪魔されるかもしれません。
標準的には「相互作用は規定されていません」;
つまりは I<何でも> 起こりえます: 動くかもしれませんし、
そうでないかもしれません。

=begin original

In scalar context, the remaining time in the timer is returned.

=end original

スカラコンテキストではタイマーでの残り時間が返されます。

=begin original

In list context, both the remaining time and the interval are returned.

=end original

リストコンテキストでは、残り時間とインターバルが返されます。

=begin original

There are usually three or four interval timers (signals) available: the
C<$which> can be C<ITIMER_REAL>, C<ITIMER_VIRTUAL>, C<ITIMER_PROF>, or
C<ITIMER_REALPROF>.  Note that which ones are available depends: true
UNIX platforms usually have the first three, but only Solaris seems to
have C<ITIMER_REALPROF> (which is used to profile multithreaded programs).
Win32 unfortunately does not haveinterval timers.

=end original

通常三つあるいは四つのインターバルタイマー(シグナル)が利用可能です:
C<$which> は C<ITIMER_REAL>, C<ITIMER_VIRTUAL>, C<ITIMER_PROF>,
C<ITIMER_REALPROF> にすることができます。
どれが利用できるかは以下のことに依存します: 本当の UNIX
プラットホームは通常最初の三つを持っています。
しかし Solaris は C<ITIMER_REALPROF> を持っているようです
(これはマルチスレッドなプログラムをプロファイルするために使われます)。
Win32 は残念ながらインターバルタイマーを持っていません。

=begin original

C<ITIMER_REAL> results in C<alarm()>-like behaviour.  Time is counted in
I<real time>; that is, wallclock time.  C<SIGALRM> is delivered when
the timer expires.

=end original

C<ITIMER_REAL> は結果として C<alarm()> のような動きにします。
時間はI<実時間>; つまり壁時計の時間で計られます。
タイマーが時間切れになると C<SIGALRM> が送られます。

=begin original

C<ITIMER_VIRTUAL> counts time in (process) I<virtual time>; that is,
only when the process is running.  In multiprocessor/user/CPU systems
this may be more or less than real or wallclock time.  (This time is
also known as the I<user time>.)  C<SIGVTALRM> is delivered when the
timer expires.

=end original

C<ITIMER_VIRTUAL> は(プロセス)I<仮想の時間> で時間を計ります；
つまりプロセスが実行しているときだけです。
マルチプロセッサ/ユーザ/CPU のシステムではこれは
実時間あるいは壁時計の時間とは多かったり、少なかったりします。
(この時間は I<ユーザー時間(user time)> とも呼ばれます。
タイマーが時間切れになると C<SIGVTALRM> が送られます。

=begin original

C<ITIMER_PROF> counts time when either the process virtual time or when
the operating system is running on behalf of the process (such as I/O).
(This time is also known as the I<system time>.)  (The sum of user
time and system time is known as the I<CPU time>.)  C<SIGPROF> is
delivered when the timer expires.  C<SIGPROF> can interrupt system calls.

=end original

C<ITIMER_PROF> はプロセス仮想時間、あるいは(I/O のように)プロセスの一部として
オペレーティングシステムが走っている時間を計ります。
(この時間は I<システム時間(system time)> とも呼ばれます。)
タイマーが時間切れになると、C<SIGPROF> が送られます。
C<SIGPROF> はシステムコールを中断させることができます。

=begin original

The semantics of interval timers for multithreaded programs are
system-specific, and some systems may support additional interval
timers.  For example, it is unspecified which thread gets the signals.
See your C<setitimer()> documentation.

=end original

マルチスレッドなプログラムでのインターバルタイマーの意味は
システムによります。
そしてシステムによっては、さらに他のインターバルタイマーを
サポートしているかもしれません。
例えば、スレッドがどのスレッドがシグナルを受信するかは未規定です。
あなたの C<setitimer()> のドキュメントをご覧ください。

=item getitimer ( $which )

=begin original

Return the remaining time in the interval timer specified by C<$which>.

=end original

C<$which> で指定されたインターバルタイマーでの残り時間を返します。

=begin original

In scalar context, the remaining time is returned.

=end original

スカラコンテキストでは、残り時間が返されます。

=begin original

In list context, both the remaining time and the interval are returned.
The interval is always what you put in using C<setitimer()>.

=end original

リストコンテキストでは残り時間とインターバルの両方が返されます。
インターバルは常に、C<setitimer()> を使ったときに入れたものです。

=item clock_gettime ( $which )

=begin original

Return as seconds the current value of the POSIX high resolution timer
specified by C<$which>.  All implementations that support POSIX high
resolution timers are supposed to support at least the C<$which> value
of C<CLOCK_REALTIME>, which is supposed to return results close to the
results of C<gettimeofday>, or the number of seconds since 00:00:00:00
January 1, 1970 Greenwich Mean Time (GMT).  Do not assume that
CLOCK_REALTIME is zero, it might be one, or something else.
Another potentially useful (but not available everywhere) value is
C<CLOCK_MONOTONIC>, which guarantees a monotonically increasing time
value (unlike time() or gettimeofday(), which can be adjusted).
See your system documentation for other possibly supported values.

=end original

C<$which> で指定された POSIX 高精度タイマーの現在の値を
秒単位で返します。
POSIX 高精度タイマーに対応している全ての実装は、少なくとも
C<$which> の値として C<CLOCK_REALTIME> に対応していることが
想定されます: この場合、C<gettimeofday> の結果、つまり
グリニッジ標準時(GMT)の 1970 年 1 月 1 日
00:00:00:00 からの秒数に近い結果を返すことが想定されます。
Do not assume that
CLOCK_REALTIME is zero, it might be one, or something else.
Another potentially useful (but not available everywhere) value is
C<CLOCK_MONOTONIC>, which guarantees a monotonically increasing time
value (unlike time() or gettimeofday(), which can be adjusted).
See your system documentation for other possibly supported values.
(TBT)

=item clock_getres ( $which )

=begin original

Return as seconds the resolution of the POSIX high resolution timer
specified by C<$which>.  All implementations that support POSIX high
resolution timers are supposed to support at least the C<$which> value
of C<CLOCK_REALTIME>, see L</clock_gettime>.

=end original

Return as seconds the resolution of the POSIX high resolution timer
specified by C<$which>.  All implementations that support POSIX high
resolution timers are supposed to support at least the C<$which> value
of C<CLOCK_REALTIME>, see L</clock_gettime>.
(TBT)

=item clock_nanosleep ( $which, $nanoseconds, $flags = 0)

=begin original

Sleeps for the number of nanoseconds (1e9ths of a second) specified.
Returns the number of nanoseconds actually slept.  The $which is the
"clock id", as with clock_gettime() and clock_getres().  The flags
default to zero but C<TIMER_ABSTIME> can specified (must be exported
explicitly) which means that C<$nanoseconds> is not a time interval
(as is the default) but instead an absolute time.  Can sleep for more
than one second.  Can also sleep for zero seconds, which often works
like a I<thread yield>.  See also C<Time::HiRes::sleep()>,
C<Time::HiRes::usleep()>, and C<Time::HiRes::nanosleep()>.

=end original

Sleeps for the number of nanoseconds (1e9ths of a second) specified.
Returns the number of nanoseconds actually slept.  The $which is the
"clock id", as with clock_gettime() and clock_getres().  The flags
default to zero but C<TIMER_ABSTIME> can specified (must be exported
explicitly) which means that C<$nanoseconds> is not a time interval
(as is the default) but instead an absolute time.  Can sleep for more
than one second.  Can also sleep for zero seconds, which often works
like a I<thread yield>.  See also C<Time::HiRes::sleep()>,
C<Time::HiRes::usleep()>, and C<Time::HiRes::nanosleep()>.
(TBT)

=begin original

Do not expect clock_nanosleep() to be exact down to one nanosecond.
Getting even accuracy of one thousand nanoseconds is good.

=end original

clock_nanosleep() がナノ秒単位で正確と想定しないでください。
1000 ナノ秒の精度でも良い方です。

=item clock()

=begin original

Return as seconds the I<process time> (user + system time) spent by
the process since the first call to clock() (the definition is B<not>
"since the start of the process", though if you are lucky these times
may be quite close to each other, depending on the system).  What this
means is that you probably need to store the result of your first call
to clock(), and subtract that value from the following results of clock().

=end original

Return as seconds the I<process time> (user + system time) spent by
the process since the first call to clock() (the definition is B<not>
"since the start of the process", though if you are lucky these times
may be quite close to each other, depending on the system).  What this
means is that you probably need to store the result of your first call
to clock(), and subtract that value from the following results of clock().
(TBT)

=begin original

The time returned also includes the process times of the terminated
child processes for which wait() has been executed.  This value is
somewhat like the second value returned by the times() of core Perl,
but not necessarily identical.  Note that due to backward
compatibility limitations the returned value may wrap around at about
2147 seconds or at about 36 minutes.

=end original

The time returned also includes the process times of the terminated
child processes for which wait() has been executed.  This value is
somewhat like the second value returned by the times() of core Perl,
but not necessarily identical.  Note that due to backward
compatibility limitations the returned value may wrap around at about
2147 seconds or at about 36 minutes.
(TBT)

=item stat

=item stat FH

=item stat EXPR

=begin original

As L<perlfunc/stat> but with the access/modify/change file timestamps
in subsecond resolution, if the operating system and the filesystem
both support such timestamps.  To override the standard stat():

=end original

As L<perlfunc/stat> but with the access/modify/change file timestamps
in subsecond resolution, if the operating system and the filesystem
both support such timestamps.  To override the standard stat():
(TBT)

    use Time::HiRes qw(stat);

=begin original

Test for the value of &Time::HiRes::d_hires_stat to find out whether
the operating system supports subsecond file timestamps: a value
larger than zero means yes. There are unfortunately no easy
ways to find out whether the filesystem supports such timestamps.
UNIX filesystems often do; NTFS does; FAT doesn't (FAT timestamp
granularity is B<two> seconds).

=end original

Test for the value of &Time::HiRes::d_hires_stat to find out whether
the operating system supports subsecond file timestamps: a value
larger than zero means yes. There are unfortunately no easy
ways to find out whether the filesystem supports such timestamps.
UNIX filesystems often do; NTFS does; FAT doesn't (FAT timestamp
granularity is B<two> seconds).
(TBT)

=begin original

A zero return value of &Time::HiRes::d_hires_stat means that
Time::HiRes::stat is a no-op passthrough for CORE::stat(),
and therefore the timestamps will stay integers.  The same
thing will happen if the filesystem does not do subsecond timestamps,
even if the &Time::HiRes::d_hires_stat is non-zero.

=end original

A zero return value of &Time::HiRes::d_hires_stat means that
Time::HiRes::stat is a no-op passthrough for CORE::stat(),
and therefore the timestamps will stay integers.  The same
thing will happen if the filesystem does not do subsecond timestamps,
even if the &Time::HiRes::d_hires_stat is non-zero.
(TBT)

=begin original

In any case do not expect nanosecond resolution, or even a microsecond
resolution.  Also note that the modify/access timestamps might have
different resolutions, and that they need not be synchronized, e.g.
if the operations are

=end original

In any case do not expect nanosecond resolution, or even a microsecond
resolution.  Also note that the modify/access timestamps might have
different resolutions, and that they need not be synchronized, e.g.
if the operations are
(TBT)

    write
    stat # t1
    read
    stat # t2

=begin original

the access time stamp from t2 need not be greater-than the modify
time stamp from t1: it may be equal or I<less>.

=end original

t2 アクセス時刻は、t1 の変更時刻より大きい必要はありません:
これは同じだったり I<小さい> 場合もあります。

=back

=head1 EXAMPLES

(例)

  use Time::HiRes qw(usleep ualarm gettimeofday tv_interval);

  $microseconds = 750_000;
  usleep($microseconds);

=begin original

  # signal alarm in 2.5s & every .1s thereafter
  ualarm(2_500_000, 100_000);
  # cancel that ualarm
  ualarm(0);

=end original

  # 2.5 秒後、その後は 0.1 秒ごとにシグナルアラーム
  ualarm(2_500_000, 100_000);
  # この ualarm をキャンセル
  ualarm(0);

=begin original

  # get seconds and microseconds since the epoch
  ($s, $usec) = gettimeofday();

=end original

  # エポックからの秒とマイクロ秒を取得
  ($s, $usec) = gettimeofday();

=begin original

  # measure elapsed time 
  # (could also do by subtracting 2 gettimeofday return values)
  $t0 = [gettimeofday];
  # do bunch of stuff here
  $t1 = [gettimeofday];
  # do more stuff here
  $t0_t1 = tv_interval $t0, $t1;

=end original

  # 経過時間の計測
  # (二つの gettimeofday の戻り値を引くことによっても可能です)
  $t0 = [gettimeofday];
  # ここで何か処理の固まりを実行
  $t1 = [gettimeofday];
  # さらに処理の固まりを実行
  $t0_t1 = tv_interval $t0, $t1;

  $elapsed = tv_interval ($t0, [gettimeofday]);
  $elapsed = tv_interval ($t0);	# equivalent code

=begin original

  #
  # replacements for time, alarm and sleep that know about
  # floating seconds
  #
  use Time::HiRes;
  $now_fractions = Time::HiRes::time;
  Time::HiRes::sleep (2.5);
  Time::HiRes::alarm (10.6666666);

=end original

  #
  # time, alarm , sleep を浮動小数点での秒がわかる
  # もので置き換え
  #
  use Time::HiRes;
  $now_fractions = Time::HiRes::time;
  Time::HiRes::sleep (2.5);
  Time::HiRes::alarm (10.6666666);

  use Time::HiRes qw ( time alarm sleep );
  $now_fractions = time;
  sleep (2.5);
  alarm (10.6666666);

=begin original

  # Arm an interval timer to go off first at 10 seconds and
  # after that every 2.5 seconds, in process virtual time

=end original

  # プロセス仮想時間で最初に 10 秒、その後は 2.5 秒ごとに
  # やってくるインターバルタイマーを装備する

  use Time::HiRes qw ( setitimer ITIMER_VIRTUAL time );

  $SIG{VTALRM} = sub { print time, "\n" };
  setitimer(ITIMER_VIRTUAL, 10, 2.5);

  use Time::HiRes qw( clock_gettime clock_getres CLOCK_REALTIME );
  # Read the POSIX high resolution timer.
  my $high = clock_getres(CLOCK_REALTIME);
  # But how accurate we can be, really?
  my $reso = clock_getres(CLOCK_REALTIME);

  use Time::HiRes qw( clock_nanosleep TIMER_ABSTIME );
  clock_nanosleep(CLOCK_REALTIME, 1e6);
  clock_nanosleep(CLOCK_REALTIME, 2e9, TIMER_ABSTIME);

  use Time::HiRes qw( clock );
  my $clock0 = clock();
  ... # Do something.
  my $clock1 = clock();
  my $clockd = $clock1 - $clock0;

  use Time::HiRes qw( stat );
  my ($atime, $mtime, $ctime) = (stat("istics"))[8, 9, 10];

=head1 C API

=begin original

In addition to the perl API described above, a C API is available for
extension writers.  The following C functions are available in the
modglobal hash:

=end original

拡張を書く人には上記の perl API に加えて、C API を利用できます。
以下の C の関数が modglobal ハッシュで利用できます:

=begin original

  name             C prototype
  ---------------  ----------------------
  Time::NVtime     double (*)()
  Time::U2time     void (*)(pTHX_ UV ret[2])

=end original

  関数名           Cプロトタイプ
  ---------------  ----------------------
  Time::NVtime     double (*)()
  Time::U2time     void (*)(pTHX_ UV ret[2])

=begin original

Both functions return equivalent information (like C<gettimeofday>)
but with different representations.  The names C<NVtime> and C<U2time>
were selected mainly because they are operating system independent.
(C<gettimeofday> is Unix-centric, though some platforms like Win32 and
VMS have emulations for it.)

=end original

関数は両方とも(C<gettimeofday> のような)同じ情報を返します。
しかしその表現が違います。C<NVtime> と C<U2time> という名前は主に
オペレーティングシステムに依存していないために選択されています。
(Win32 や VMS のようにいくつかのプラットホームではそのエミュレーションを
備えていますが、C<gettimeofday> は Unix 中心的です。)

=begin original

Here is an example of using C<NVtime> from C:

=end original

C から C<NVtime> を使ったときの例を以下に示します:

  double (*myNVtime)(); /* Returns -1 on failure. */
  SV **svp = hv_fetch(PL_modglobal, "Time::NVtime", 12, 0);
  if (!svp)         croak("Time::HiRes is required");
  if (!SvIOK(*svp)) croak("Time::NVtime isn't a function pointer");
  myNVtime = INT2PTR(double(*)(), SvIV(*svp));
  printf("The current time is: %f\n", (*myNVtime)());

=head1 DIAGNOSTICS

=head2 useconds or interval more than ...

=begin original

In ualarm() you tried to use number of microseconds or interval (also
in microseconds) more than 1_000_000 and setitimer() is not available
in your system to emulate that case.

=end original

In ualarm() you tried to use number of microseconds or interval (also
in microseconds) more than 1_000_000 and setitimer() is not available
in your system to emulate that case.
(TBT)

=head2 negative time not invented yet

=begin original

You tried to use a negative time argument.

=end original

引数としてマイナスの時刻を使おうとしました。

=head2 internal error: useconds < 0 (unsigned ... signed ...)

=begin original

Something went horribly wrong-- the number of microseconds that cannot
become negative just became negative.  Maybe your compiler is broken?

=end original

何かひどい障害がおきました -- マイナスになるはずのないマイクロ秒数は
マイナスになってしまいました。
コンパイラが壊れているのかも?

=head2 useconds or uinterval equal to or more than 1000000

=begin original

In some platforms it is not possible to get an alarm with subsecond
resolution and later than one second.

=end original

一部のプラットフォームでは、1 秒未満の解像度で 1 秒を超える長さの
アラームを使えません。

=head2 unimplemented in this platform

=begin original

Some calls simply aren't available, real or emulated, on every platform.

=end original

一部の呼び出しは、実物とエミュレーションとに関わらず、全ての
プラットフォームで利用可能というわけではありません。

=head1 CAVEATS

=begin original

Notice that the core C<time()> maybe rounding rather than truncating.
What this means is that the core C<time()> may be reporting the time
as one second later than C<gettimeofday()> and C<Time::HiRes::time()>.

=end original

コアの C<time()> が切り捨てるのではなく、四捨五入するかもしれないことに
注意してください。
これはコアの C<time()> が C<gettimeofday()> や
C<Time::HiRes::time()> よりも1秒遅い時間を報告するかもしれないという
ことを意味します。

=begin original

Adjusting the system clock (either manually or by services like ntp)
may cause problems, especially for long running programs that assume
a monotonously increasing time (note that all platforms do not adjust
time as gracefully as UNIX ntp does).  For example in Win32 (and derived
platforms like Cygwin and MinGW) the Time::HiRes::time() may temporarily
drift off from the system clock (and the original time())  by up to 0.5
seconds. Time::HiRes will notice this eventually and recalibrate.
Note that since Time::HiRes 1.77 the clock_gettime(CLOCK_MONOTONIC)
might help in this (in case your system supports CLOCK_MONOTONIC).

=end original

(手動または ntp のようなサービスによって) システムクロックを修正することは、
特に時刻が単調増加することを仮定する長時間動作しているプログラムでは、
問題を引き起こすかもしれません (全てのプラットフォームが、Unix の ntp が
するように徐々に時刻を修正するわけではないことに注意してください)。
例えば、Win32 (および Cygwin と MinGW のような派生プラットフォーム) では、
Time::HiRes::time() はシステムクロック (および元の time()) から
一時的に最大 0.5 秒ずれることがあります。
Time::HiRes は最終的にはこれに気付いて再調整します。
Time::HiRes 1.77 以降では clock_gettime(CLOCK_MONOTONIC) がこれの
助けになるかもしれません (システムが CLOCK_MONOTONIC に対応している場合)。

=begin original

Some systems have APIs but not implementations: for example QNX and Haiku
have the interval timer APIs but not the functionality.

=end original

一部のシステムは API を持っていますが実装されていません:
例えば QNX と Haiku はインターバルタイマー API を持っていますが、
動作しません。

=head1 SEE ALSO

=begin original

Perl modules L<BSD::Resource>, L<Time::TAI64>.

=end original

Perl モジュール L<BSD::Resource>, L<Time::TAI64>。

=begin original

Your system documentation for C<clock>, C<clock_gettime>,
C<clock_getres>, C<clock_nanosleep>, C<clock_settime>, C<getitimer>,
C<gettimeofday>, C<setitimer>, C<sleep>, C<stat>, C<ualarm>.

=end original

システムの C<clock>, C<clock_gettime>,
C<clock_getres>, C<clock_nanosleep>, C<clock_settime>, C<getitimer>,
C<gettimeofday>, C<setitimer>, C<sleep>, C<stat>, C<ualarm> の文書。

=head1 AUTHORS

D. Wegscheid <wegscd@whirlpool.com>
R. Schertler <roderick@argon.org>
J. Hietaniemi <jhi@iki.fi>
G. Aas <gisle@aas.no>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 1996-2002 Douglas E. Wegscheid.  All rights reserved.

Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007, 2008 Jarkko Hietaniemi.
All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=begin meta

Translate: 川合孝典 <GCD00051@nifty.ne.jp> (1.55)
Update: SHIRAKATA Kentaro <argrath@ub32.org> (1.9719-)
Status: in progress

=end meta

=cut

