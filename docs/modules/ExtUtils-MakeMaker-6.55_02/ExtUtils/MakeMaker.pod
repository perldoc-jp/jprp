
=encoding euc-jp

=head1 NAME

=begin original

ExtUtils::MakeMaker - Create a module Makefile

=end original

ExtUtils::MakeMaker - モジュール用 Makefile の生成

(訳注: (TBR)がついている段落は「みんなの自動翻訳＠TexTra」による
機械翻訳です。)

=head1 SYNOPSIS

  use ExtUtils::MakeMaker;

  WriteMakefile( ATTRIBUTE => VALUE [, ...] );

=head1 DESCRIPTION

=begin original

This utility is designed to write a Makefile for an extension module
from a Makefile.PL. It is based on the Makefile.SH model provided by
Andy Dougherty and the perl5-porters.

=end original

このユーティリティは Makefile.PL において拡張モジュールのための
Makefile を書くために設計されています。
これは、Andy Dougherty 及び perl5-porter による Makefile.SH を
基盤としています。

=begin original

It splits the task of generating the Makefile into several subroutines
that can be individually overridden.  Each subroutine returns the text
it wishes to have written to the Makefile.

=end original

これは Makefile を生成する処理を独立してオーバーライド可能ないくつかの
関数に分解します。
各関数では Makefile に書かれる内容をテキストとして
返します。

=begin original

MakeMaker is object oriented. Each directory below the current
directory that contains a Makefile.PL is treated as a separate
object. This makes it possible to write an unlimited number of
Makefiles with a single invocation of WriteMakefile().

=end original

MakeMaker はオブジェクト指向です。
Makefile.PL を含んでいるカレントディレクトリにある各ディレクトリは
分割されたオブジェクトとして扱われます。
これは一度の WriteMakefile() 呼び出しから無制限個の Makefile を
出力することを可能にしています。

=head2 How To Write A Makefile.PL

(Makefile.PL の書き方)

=begin original

See ExtUtils::MakeMaker::Tutorial.

=end original

L<ExtUtils::MakeMaker::Tutorial> を参照してください。

=begin original

The long answer is the rest of the manpage :-)

=end original

そしてこのマニュアルページの残りの部分が長い答えになります :-)

=head2 Default Makefile Behaviour

(デフォルトの Makefile の振る舞い)

=begin original

The generated Makefile enables the user of the extension to invoke

=end original

生成された Makefile は呼び出しの拡張を有効にします

  perl Makefile.PL # optionally "perl Makefile.PL verbose"
  make
  make test        # optionally set TEST_VERBOSE=1
  make install     # See below

=begin original

The Makefile to be produced may be altered by adding arguments of the
form C<KEY=VALUE>. E.g.

=end original

生成された Makefile は C<KEY=VALUE> 形式の引数を与えることで
その動作を変えることができます。
例:

  perl Makefile.PL INSTALL_BASE=~

=begin original

Other interesting targets in the generated Makefile are

=end original

生成された Makefile の持つターゲットの一例として
次のようなものがあります:

=begin original

  make config     # to check if the Makefile is up-to-date
  make clean      # delete local temp files (Makefile gets renamed)
  make realclean  # delete derived files (including ./blib)
  make ci         # check in all the files in the MANIFEST file
  make dist       # see below the Distribution Support section

=end original

  make config     # Makefile が最新版かどうかを確認する
  make clean      # ローカルの一時ファイルを削除する (Makefile はリネームする)
  make realclean  # (./blib を含む) 派生ファイルを削除する
  make ci         # MANIFEST ファイルにある全てのファイルを確認する
  make dist       # 以下の Distribution Support 節を参照

=head2 make test

=begin original

MakeMaker checks for the existence of a file named F<test.pl> in the
current directory and if it exists it execute the script with the
proper set of perl C<-I> options.

=end original

MakeMaker は、カレントディレクトリに F<test.pl> という名前のファイルの存在を
チェックし、存在するなら、適切に perl C<-I> オプションを設定して、
このスクリプトを実行します。

=begin original

MakeMaker also checks for any files matching glob("t/*.t"). It will
execute all matching files in alphabetical order via the
L<Test::Harness> module with the C<-I> switches set correctly.

=end original

MakeMaker はまた、glob("t/*.t") にマッチングするファイルもチェックします。
マッチングした全てのファイルはアルファベット順に、C<-I> オプションを
正しく設定して L<Test::Harness> モジュールで実行されます。

=begin original

If you'd like to see the raw output of your tests, set the
C<TEST_VERBOSE> variable to true.

=end original

テストの生出力を見たい場合は、C<TEST_VERBOSE> 変数を真に設定してください。

  make test TEST_VERBOSE=1

=head2 make testdb

=begin original

A useful variation of the above is the target C<testdb>. It runs the
test under the Perl debugger (see L<perldebug>). If the file
F<test.pl> exists in the current directory, it is used for the test.

=end original

前述のターゲット C<testdb> の便利な変種です。
これはテストを Perl デバッガ (L<perldebug> 参照) の基で実行します。
F<test.pl> ファイルがカレントディレクトリにあるなら、
これがテストに使われます。

=begin original

If you want to debug some other testfile, set the C<TEST_FILE> variable
thusly:

=end original

その他のテストファイルをデバッグしたい場合は、
C<TEST_FILE> 変数を設定してください:

  make testdb TEST_FILE=t/mytest.t

=begin original

By default the debugger is called using C<-d> option to perl. If you
want to specify some other option, set the C<TESTDB_SW> variable:

=end original

デフォルトでは、perl に C<-d> オプションを使うことでデバッガが呼び出されます。
その他のオプションを指定したい場合は、C<TESTDB_SW> 変数を設定してください:

  make testdb TESTDB_SW=-Dx

=head2 make install

=begin original

make alone puts all relevant files into directories that are named by
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_MAN1DIR and
INST_MAN3DIR.  All these default to something below ./blib if you are
I<not> building below the perl source directory. If you I<are>
building below the perl source, INST_LIB and INST_ARCHLIB default to
../../lib, and INST_SCRIPT is not defined.

=end original

make単独では、マクロINST_LIB、INST_ARCHLIB、INST_SCRIPT、INST_MAN1DIR、およびINST_MAN3DIRによって名前が付けられたディレクトリにすべての関連ファイルが置かれます。
perlソースディレクトリの下に構築<しない>場合、これらはすべてデフォルトで./blib以下になります。
perlソースの下に構築<しない>場合、INST_LIBおよびINST_ARCHLIBはデフォルトで././libになり、INST_SCRIPTは定義されません。
(TBR)

=begin original

The I<install> target of the generated Makefile copies the files found
below each of the INST_* directories to their INSTALL*
counterparts. Which counterparts are chosen depends on the setting of
INSTALLDIRS according to the following table:

=end original

生成されたMakefileのI<install>ターゲットは、各INST_*ディレクトリの下にあるファイルを対応するINSTALL*ディレクトリにコピーします。
どのディレクトリが選択されるかは、次の表に従ってINSTALLDIRSの設定によって決まります。
(TBR)

                                 INSTALLDIRS set to
                           perl        site          vendor

                 PERLPREFIX      SITEPREFIX          VENDORPREFIX
  INST_ARCHLIB   INSTALLARCHLIB  INSTALLSITEARCH     INSTALLVENDORARCH
  INST_LIB       INSTALLPRIVLIB  INSTALLSITELIB      INSTALLVENDORLIB
  INST_BIN       INSTALLBIN      INSTALLSITEBIN      INSTALLVENDORBIN
  INST_SCRIPT    INSTALLSCRIPT   INSTALLSITESCRIPT   INSTALLVENDORSCRIPT
  INST_MAN1DIR   INSTALLMAN1DIR  INSTALLSITEMAN1DIR  INSTALLVENDORMAN1DIR
  INST_MAN3DIR   INSTALLMAN3DIR  INSTALLSITEMAN3DIR  INSTALLVENDORMAN3DIR

=begin original

The INSTALL... macros in turn default to their %Config
($Config{installprivlib}, $Config{installarchlib}, etc.) counterparts.

=end original

INSTALL.マクロのデフォルトは、対応する%Config($Config{installprivlib}、$Config{installarchlib}など)になります。
(TBR)

=begin original

You can check the values of these variables on your system with

=end original

システム上のこれらの変数の値をチェックするには
(TBR)

    perl '-V:install.*'

=begin original

And to check the sequence in which the library directories are
searched by perl, run

=end original

perlがライブラリディレクトリを検索する順序をチェックするには、次のコマンドを実行します。
(TBR)

    perl -le 'print join $/, @INC'

=begin original

Sometimes older versions of the module you're installing live in other
directories in @INC.  Because Perl loads the first version of a module it 
finds, not the newest, you might accidentally get one of these older
versions even after installing a brand new version.  To delete I<all other
versions of the module you're installing> (not simply older ones) set the
C<UNINST> variable.

=end original

Sometimes older versions of the module you're installing live in other
directories in @INC.  Because Perl loads the first version of a module it 
finds, not the newest, you might accidentally get one of these older
versions even after installing a brand new version.  To delete I<all other
versions of the module you're installing> (not simply older ones) set the
C<UNINST> variable.
(TBT)

    make install UNINST=1

=head2 INSTALL_BASE

=begin original

INSTALL_BASE can be passed into Makefile.PL to change where your
module will be installed.  INSTALL_BASE is more like what everyone
else calls "prefix" than PREFIX is.

=end original

INSTALL_BASE can be passed into Makefile.PL to change where your
module will be installed.  INSTALL_BASE is more like what everyone
else calls "prefix" than PREFIX is.
(TBT)

=begin original

To have everything installed in your home directory, do the following.

=end original

全てをホームディレクトリにインストールされるようにするには、
次のようにします:

    # Unix users, INSTALL_BASE=~ works fine
    perl Makefile.PL INSTALL_BASE=/path/to/your/home/dir

=begin original

Like PREFIX, it sets several INSTALL* attributes at once.  Unlike
PREFIX it is easy to predict where the module will end up.  The
installation pattern looks like this:

=end original

Like PREFIX, it sets several INSTALL* attributes at once.  Unlike
PREFIX it is easy to predict where the module will end up.  The
installation pattern looks like this:
(TBT)

    INSTALLARCHLIB     INSTALL_BASE/lib/perl5/$Config{archname}
    INSTALLPRIVLIB     INSTALL_BASE/lib/perl5
    INSTALLBIN         INSTALL_BASE/bin
    INSTALLSCRIPT      INSTALL_BASE/bin
    INSTALLMAN1DIR     INSTALL_BASE/man/man1
    INSTALLMAN3DIR     INSTALL_BASE/man/man3

=begin original

INSTALL_BASE in MakeMaker and C<--install_base> in Module::Build (as
of 0.28) install to the same location.  If you want MakeMaker and
Module::Build to install to the same location simply set INSTALL_BASE
and C<--install_base> to the same location.

=end original

INSTALL_BASE in MakeMaker and C<--install_base> in Module::Build (as
of 0.28) install to the same location.  If you want MakeMaker and
Module::Build to install to the same location simply set INSTALL_BASE
and C<--install_base> to the same location.
(TBT)

=begin original

INSTALL_BASE was added in 6.31.

=end original

INSTALL_BASE は 6.31 で追加されました。

=head2 PREFIX and LIB attribute

(PREFIX 及び LIB 属性)

=begin original

PREFIX and LIB can be used to set several INSTALL* attributes in one
go.  Here's an example for installing into your home directory.

=end original

PREFIX 及び LIB を使っていくつかの INSTALL* 属性を一度に
変更することができます。
あなたのホームディレクトリにインストールする例は
次のようになります:

    # Unix users, PREFIX=~ works fine
    perl Makefile.PL PREFIX=/path/to/your/home/dir

=begin original

This will install all files in the module under your home directory,
with man pages and libraries going into an appropriate place (usually
~/man and ~/lib).  How the exact location is determined is complicated
and depends on how your Perl was configured.  INSTALL_BASE works more
like what other build systems call "prefix" than PREFIX and we
recommend you use that instead.

=end original

これはモジュール内のファイルをホームディレクトリ上に、
マニュアルページやライブラリを適切な位置(通常 ~/man 及び ~/lib)に
インストールします。
正確な位置がどのように決定されるかは複雑で、Perl がどのように
設定されているかによります。
INSTALL_BASE は PREFIX より、その他のビルドシステムが
"prefix" と読んでいるものにより近く、私達は
これを使うことを勧めます。

=begin original

Another way to specify many INSTALL directories with a single
parameter is LIB.

=end original

単一のパラメータからいくつかのインストールディレクトリを変更する
ものとしては他に LIB があります。

    perl Makefile.PL LIB=~/lib

=begin original

This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname.

=end original

これはモジュールのアーキテクチャ非依存ファイルを ~/lib に、
アーキテクチャ依存ファイルを ~/lib/$archname にインストールします。

=begin original

Note, that in both cases the tilde expansion is done by MakeMaker, not
by perl by default, nor by make.

=end original

これら共にチルダの展開はデフォルトでは perl や make によってではなく
MakeMaker によって行われることに注意してください。

=begin original

Conflicts between parameters LIB, PREFIX and the various INSTALL*
arguments are resolved so that:

=end original

LIB, PREFIX パラメータや INSTALL* 引数の衝突時には次の順に解決されます:

=over 4

=item *

=begin original

setting LIB overrides any setting of INSTALLPRIVLIB, INSTALLARCHLIB,
INSTALLSITELIB, INSTALLSITEARCH (and they are not affected by PREFIX);

=end original

LIB を設定すると、INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSITELIB, 
INSTALLSITEARCH に対する設定を上書きします
(また、これらは PREFIX の影響を受けなくなります);

=item *

=begin original

without LIB, setting PREFIX replaces the initial C<$Config{prefix}>
part of those INSTALL* arguments, even if the latter are explicitly
set (but are set to still start with C<$Config{prefix}>).

=end original

LIB の設定がなければ、PREFIX は これら INSTALL* 引数の最初の 
C<$Config{prefix}> 箇所を置き換えます;
これは INSTALL* 引数が
明示的に設定されていても(C<$Config{prefix}>ではじまっているのなら)
行われます。

=back

=begin original

If the user has superuser privileges, and is not working on AFS or
relatives, then the defaults for INSTALLPRIVLIB, INSTALLARCHLIB,
INSTALLSCRIPT, etc. will be appropriate, and this incantation will be
the best:

=end original

ユーザがスーパーユーザー権限を持っていてかつ、AFS やその同類で
処理していないのなら、INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSCRIPT 等は
適切に設定されます;
これは最良の動作でしょう。

    perl Makefile.PL; 
    make; 
    make test
    make install

=begin original

make install per default writes some documentation of what has been
done into the file C<$(INSTALLARCHLIB)/perllocal.pod>. This feature
can be bypassed by calling make pure_install.

=end original

デフォルトの make install は行った動作を
C<$(INSTALLARCHLIB)/perllocal.pod> に書き出します。
この機能は make pure_install を使うことで回避できます。

=head2 AFS users

(AFS ユーザー)

=begin original

will have to specify the installation directories as these most
probably have changed since perl itself has been installed. They will
have to do this by calling

=end original

インストールディレクトリを指定する必要があります。
perl自体がインストールされてから変更された可能性が高いためです。
(TBR)

    perl Makefile.PL INSTALLSITELIB=/afs/here/today \
        INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
    make

=begin original

Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the AFS installation directories are
still valid.

=end original

AFSのインストールディレクトリーがまだ有効であることが確実でない限り、拡張機能を再コンパイルするたびにこの手順を繰り返すように注意してください。
(TBR)

=head2 Static Linking of a new Perl Binary

(新しい Perl 実行形式のスタティックリンク)

=begin original

An extension that is built with the above steps is ready to use on
systems supporting dynamic loading. On systems that do not support
dynamic loading, any newly created extension has to be linked together
with the available resources. MakeMaker supports the linking process
by creating appropriate targets in the Makefile whenever an extension
is built. You can invoke the corresponding section of the makefile with

=end original

上記の手順でビルドされた拡張機能は、動的ロードをサポートするシステムで使用できます。
動的ロードをサポートしないシステムでは、新しく作成された拡張機能はすべて、使用可能なリソースとともにリンクする必要があります。
MakeMakerは、拡張機能がビルドされるたびにMakefileに適切なターゲットを作成することによって、リンクプロセスをサポートします。
メイクファイルの対応するセクションを呼び出すには
(TBR)

    make perl

=begin original

That produces a new perl binary in the current directory with all
extensions linked in that can be found in INST_ARCHLIB, SITELIBEXP,
and PERL_ARCHLIB. To do that, MakeMaker writes a new Makefile, on
UNIX, this is called Makefile.aperl (may be system dependent). If you
want to force the creation of a new perl, it is recommended, that you
delete this Makefile.aperl, so the directories are searched-through
for linkable libraries again.

=end original

これにより、INST_ARCHLIB、SITELIBEXP、およびPERL_ARCHLIBにあるすべての拡張子がリンクされた新しいperlバイナリが現在のディレクトリに作成されます。
そのために、MakeMakerは新しいMakefileを作成します。
UNIXでは、これはMakefile.aperlと呼ばれます(システムに依存する場合があります)。
新しいperlを強制的に作成する場合は、このMakefile.aperlを削除することをお勧めします。
削除すると、ディレクトリ内でリンク可能なライブラリが再度検索されます。
(TBR)

=begin original

The binary can be installed into the directory where perl normally
resides on your machine with

=end original

バイナリは、perlが通常マシン上に存在するディレクトリにインストールできます。
(TBR)

    make inst_perl

=begin original

To produce a perl binary with a different name than C<perl>, either say

=end original

C<perl>とは異なる名前のperlバイナリを生成するには、次のいずれかを実行します。
(TBR)

    perl Makefile.PL MAP_TARGET=myperl
    make myperl
    make inst_perl

=begin original

or say

=end original

または
(TBR)

    perl Makefile.PL
    make myperl MAP_TARGET=myperl
    make inst_perl MAP_TARGET=myperl

=begin original

In any case you will be prompted with the correct invocation of the
C<inst_perl> target that installs the new binary into INSTALLBIN.

=end original

いずれの場合も、新しいバイナリをINSTALLBINにインストールするC<inst_perl>ターゲットを正しく起動するように求められます。
(TBR)

=begin original

make inst_perl per default writes some documentation of what has been
done into the file C<$(INSTALLARCHLIB)/perllocal.pod>. This
can be bypassed by calling make pure_inst_perl.

=end original

make inst_perlはデフォルトでC<$(INSTALLARCHLIB)/perllocal.pod>ファイルに何が行われたかの文書を書き込みます。
これはmake pure_inst_perlを呼び出すことでバイパスできます。
(TBR)

=begin original

Warning: the inst_perl: target will most probably overwrite your
existing perl binary. Use with care!

=end original

警告:inst_perl:targetは既存のperlバイナリを上書きする可能性があります。
注意して使用してください。
(TBR)

=begin original

Sometimes you might want to build a statically linked perl although
your system supports dynamic loading. In this case you may explicitly
set the linktype with the invocation of the Makefile.PL or make:

=end original

システムが動的ロードをサポートしていても、静的にリンクされたperlを構築したい場合があります。
この場合は、Makefile.PLまたはmakeの呼び出しでリンクタイプを明示的に設定できます。
(TBR)

    perl Makefile.PL LINKTYPE=static    # recommended

=begin original

or

=end original

または

    make LINKTYPE=static                # works on most systems

=head2 Determination of Perl Library and Installation Locations

(Perl ライブラリとインストール位置の決定)

=begin original

MakeMaker needs to know, or to guess, where certain things are
located.  Especially INST_LIB and INST_ARCHLIB (where to put the files
during the make(1) run), PERL_LIB and PERL_ARCHLIB (where to read
existing modules from), and PERL_INC (header files and C<libperl*.*>).

=end original

特にINST_LIBとINST_ARCHLIB(make(1)の実行中にファイルを置く場所)、PERL_LIBとPERL_ARCHLIB(既存のモジュールを読み取る場所)、そしてPERL_INC(ヘッダーファイルとC<libperl*.*>)です。
(TBR)

=begin original

Extensions may be built either using the contents of the perl source
directory tree or from the installed perl library. The recommended way
is to build extensions after you have run 'make install' on perl
itself. You can do that in any directory on your hard disk that is not
below the perl source tree. The support for extensions below the ext
directory of the perl distribution is only good for the standard
extensions that come with perl.

=end original

拡張機能は、perlソースディレクトリツリーの内容を使用するか、インストールされたperlライブラリから構築できます。
推奨される方法は、perl自体に対して'make install'を実行した後に拡張機能を構築することです。
perlソースツリーの下にないハードディスク上の任意のディレクトリでそれを行うことができます。
perlディストリビューションのextディレクトリの下の拡張機能のサポートは、perlに付属の標準拡張機能に対してのみ有効です。
(TBR)

=begin original

If an extension is being built below the C<ext/> directory of the perl
source then MakeMaker will set PERL_SRC automatically (e.g.,
C<../..>).  If PERL_SRC is defined and the extension is recognized as
a standard extension, then other variables default to the following:

=end original

拡張がperlソースのC<ext/>ディレクトリの下に構築される場合、MakeMakerは自動的にPERL_SRCを設定します(例:C<./.>)。
PERL_SRCが定義され、拡張が標準拡張として認識される場合、その他の変数はデフォルトで次のようになります。
(TBR)

  PERL_INC     = PERL_SRC
  PERL_LIB     = PERL_SRC/lib
  PERL_ARCHLIB = PERL_SRC/lib
  INST_LIB     = PERL_LIB
  INST_ARCHLIB = PERL_ARCHLIB

=begin original

If an extension is being built away from the perl source then MakeMaker
will leave PERL_SRC undefined and default to using the installed copy
of the perl library. The other variables default to the following:

=end original

拡張機能がperlソースからビルドされる場合、MakeMakerはPERL_SRCを未定義のままにし、インストールされたperlライブラリのコピーをデフォルトで使用します。
その他の変数のデフォルトは次のとおりです。
(TBR)

  PERL_INC     = $archlibexp/CORE
  PERL_LIB     = $privlibexp
  PERL_ARCHLIB = $archlibexp
  INST_LIB     = ./blib/lib
  INST_ARCHLIB = ./blib/arch

=begin original

If perl has not yet been installed then PERL_SRC can be defined on the
command line as shown in the previous section.

=end original

perlがまだインストールされていない場合は、前のセクションで示したように、コマンドラインでPERL_SRCを定義できます。
(TBR)

=head2 Which architecture dependent directory?

(アーキテクチャ依存ディレクトリの位置)

=begin original

If you don't want to keep the defaults for the INSTALL* macros,
MakeMaker helps you to minimize the typing needed: the usual
relationship between INSTALLPRIVLIB and INSTALLARCHLIB is determined
by Configure at perl compilation time. MakeMaker supports the user who
sets INSTALLPRIVLIB. If INSTALLPRIVLIB is set, but INSTALLARCHLIB not,
then MakeMaker defaults the latter to be the same subdirectory of
INSTALLPRIVLIB as Configure decided for the counterparts in %Config ,
otherwise it defaults to INSTALLPRIVLIB. The same relationship holds
for INSTALLSITELIB and INSTALLSITEARCH.

=end original

INSTALL*マクロのデフォルトを維持したくない場合は、MakeMakerを使用すると、必要な入力を最小限に抑えることができます。
INSTALLPRIVLIBとINSTALLARCHLIBの通常の関係は、perlのコンパイル時にConfigureによって決定されます。
MakeMakerは、INSTALLPRIVLIBを設定するユーザーをサポートします。
INSTALLPRIVLIBが設定されていてもINSTALLARCHLIBが設定されていない場合、MakeMakerは、%Configで対応するものに対して決定されたConfigureと同じINSTALLPRIVLIBのサブディレクトリをデフォルトにします。
それ以外の場合は、INSTALLPRIVLIBがデフォルトになります。
同じ関係がINSTALLSITELIBとINSTALLSITEARCHにも適用されます。
(TBR)

=begin original

MakeMaker gives you much more freedom than needed to configure
internal variables and get different results. It is worth to mention,
that make(1) also lets you configure most of the variables that are
used in the Makefile. But in the majority of situations this will not
be necessary, and should only be done if the author of a package
recommends it (or you know what you're doing).

=end original

MakeMakerは、内部変数を設定し、異なる結果を得るために必要なものよりもはるかに多くの自由度を提供します。
言及する価値があるのは、make(1)では、Makefileで使用されるほとんどの変数も設定できることです。
しかし、ほとんどの場合、これは必要ではなく、パッケージの作成者が推奨する場合(またはあなたが何をしているかを知っている場合)にのみ行うべきです。
(TBR)

=head2 Using Attributes and Parameters

(属性とパラメータの使用)

=begin original

The following attributes may be specified as arguments to WriteMakefile()
or as NAME=VALUE pairs on the command line.

=end original

以下の属性が、WriteMakefile() への引数、またはコマンドラインでの
NAME=VALUE の組として指定できます。

=over 2

=item ABSTRACT

=begin original

One line description of the module. Will be included in PPD file.

=end original

モジュールの 1 行説明。
PPD ファイルに含まれます。

=item ABSTRACT_FROM

=begin original

Name of the file that contains the package description. MakeMaker looks
for a line in the POD matching /^($package\s-\s)(.*)/. This is typically
the first line in the "=head1 NAME" section. $2 becomes the abstract.

=end original

パッケージの説明が含まれているファイルの名前。
MakeMaker は POD の中で /^($package\s-\s)(.*)/ にマッチングする行を探します。
これは典型的には "=head1 NAME" 節の最初の行です。
$2 は概要になります。

=item AUTHOR

=begin original

String containing name (and email address) of package author(s). Is used
in PPD (Perl Package Description) files for PPM (Perl Package Manager).

=end original

パッケージ作者の名前 (および電子メールアドレス) を含む文字列。
PPM (Perl Package Manager) のための PPD (Perl Package Description) ファイルに
使われます。

=item BINARY_LOCATION

=begin original

Used when creating PPD files for binary packages.  It can be set to a
full or relative path or URL to the binary archive for a particular
architecture.  For example:

=end original

バイナリパッケージのための PPD ファイルを使うのに使われます。
特定のアーキテクチャのためのバイナリアーカイブへの完全または相対パス、
あるいは URL を設定できます。
例えば:

        perl Makefile.PL BINARY_LOCATION=x86/Agent.tar.gz

=begin original

builds a PPD package that references a binary of the C<Agent> package,
located in the C<x86> directory relative to the PPD itself.

=end original

とすると、PPD 自身からの相対で C<x86> ディレクトリにある C<Agent>
パッケージのバイナリを参照する PPD パッケージをビルドします。

=item BUILD_REQUIRES

=begin original

A hash of modules that are needed to build your module but not run it.

=end original

A hash of modules that are needed to build your module but not run it.
(TBT)

=begin original

This will go into the C<build_requires> field of your F<META.yml>.

=end original

This will go into the C<build_requires> field of your F<META.yml>.
(TBT)

=begin original

The format is the same as PREREQ_PM.

=end original

形式は PREREQ_PM と同じです。

=item C

=begin original

Ref to array of *.c file names. Initialised from a directory scan
and the values portion of the XS attribute hash. This is not
currently used by MakeMaker but may be handy in Makefile.PLs.

=end original

*.c ファイル名の配列へのリファレンス。
ディレクトリスキャンと XS 属性ハッシュの値部分から初期化されます。
これは現在のところ MakeMaker は使っていませんが、
Makefile.PL 群では有用です。

=item CCFLAGS

=begin original

String that will be included in the compiler call command line between
the arguments INC and OPTIMIZE.

=end original

引数 INC と OPTIMIZE の間のコンパイラ呼び出しコマンドに含まれる文字列。

=item CONFIG

=begin original

Arrayref. E.g. [qw(archname manext)] defines ARCHNAME & MANEXT from
config.sh. MakeMaker will add to CONFIG the following values anyway:
ar
cc
cccdlflags
ccdlflags
dlext
dlsrc
ld
lddlflags
ldflags
libc
lib_ext
obj_ext
ranlib
sitelibexp
sitearchexp
so

=end original

配列へのリファレンス。
例えば [qw(archname manext)] は config.sh から ARCHNAME と MANEXT を
定義します。
MakeMaker はどちらにしろ次の値を CONFIG に追加します:
ar
cc
cccdlflags
ccdlflags
dlext
dlsrc
ld
lddlflags
ldflags
libc
lib_ext
obj_ext
ranlib
sitelibexp
sitearchexp
so

=item CONFIGURE

=begin original

CODE reference. The subroutine should return a hash reference. The
hash may contain further attributes, e.g. {LIBS =E<gt> ...}, that have to
be determined by some evaluation method.

=end original

CODE リファレンス。
この関数はハッシュリファレンスを返すべきです。
このハッシュにはいくつかの評価メソッドによって決定されている
必要がある {LIBS =E<gt> ...} の様なより進んだ属性を含んでいるでしょう。

=item CONFIGURE_REQUIRES

=begin original

A hash of modules that are required to run Makefile.PL itself, but not
to run your distribution.

=end original

A hash of modules that are required to run Makefile.PL itself, but not
to run your distribution.
(TBT)

=begin original

This will go into the C<configure_requires> field of your F<META.yml>.

=end original

This will go into the C<configure_requires> field of your F<META.yml>.
(TBT)

=begin original

Defaults to C<{ "ExtUtils::MakeMaker" => 0 }>

=end original

Defaults to C<{ "ExtUtils::MakeMaker" => 0 }>
(TBT)

=begin original

The format is the same as PREREQ_PM.

=end original

形式は PREREQ_PM と同じです。

=item DEFINE

=begin original

Something like C<"-DHAVE_UNISTD_H">

=end original

C<"-DHAVE_UNISTD_H"> のようなもの。

=item DESTDIR

=begin original

This is the root directory into which the code will be installed.  It
I<prepends itself to the normal prefix>.  For example, if your code
would normally go into F</usr/local/lib/perl> you could set DESTDIR=~/tmp/
and installation would go into F<~/tmp/usr/local/lib/perl>.

=end original

これはコードがインストールされるルートディレクトリです。
これは I<通常の接頭辞に追加されます>。
例えば、コードが F</usr/local/lib/perl> に行く場合、
DESTDIR=~/tmp/ に設定すると、インストールは
F<~/tmp/usr/local/lib/perl> に行きます。

=begin original

This is primarily of use for people who repackage Perl modules.

=end original

これは主に Perl モジュールを再パッケージする人々が使うものです。

=begin original

NOTE: Due to the nature of make, it is important that you put the trailing
slash on your DESTDIR.  F<~/tmp/> not F<~/tmp>.

=end original

注意: make の特性により、DESTDIR の末尾にスラッシュを置くことは重要です。
F<"/tmp"> ではなく F<"/tmp/"> です。

=item DIR

=begin original

Ref to array of subdirectories containing Makefile.PLs e.g. ['sdbm']
in ext/SDBM_File

=end original

Makefile.PL を含むサブディレクトリの配列へのリファレンス;
例: ext/SDBM_File 内の ['sdbm']

=item DISTNAME

=begin original

A safe filename for the package. 

=end original

パッケージのための安全なファイル名。

=begin original

Defaults to NAME above but with :: replaced with -.

=end original

デフォルトは NAME の :: を - に置き換えたもの。

=begin original

For example, Foo::Bar becomes Foo-Bar.

=end original

例えば Foo::Bar は Foo-Bar になります。

=item DISTVNAME

=begin original

Your name for distributing the package with the version number
included.  This is used by 'make dist' to name the resulting archive
file.

=end original

バージョン番号を含むパッケージを配布するための名前。
これは、'make dist'が結果のアーカイブファイルに名前を付けるために使用します。
(TBR)

=begin original

Defaults to DISTNAME-VERSION.

=end original

デフォルトは DISTNAME-VERSION。

=begin original

For example, version 1.04 of Foo::Bar becomes Foo-Bar-1.04.

=end original

例えば Foo::Bar のバージョン 1.04 は Foo-Bar-1.04 になります。

=begin original

On some OS's where . has special meaning VERSION_SYM may be used in
place of VERSION.

=end original

. に特別な意味のある一部の OS では VERSION の代わりに VERSION_SYM が
使われます。

=item DL_FUNCS

=begin original

Hashref of symbol names for routines to be made available as universal
symbols.  Each key/value pair consists of the package name and an
array of routine names in that package.  Used only under AIX, OS/2,
VMS and Win32 at present.  The routine names supplied will be expanded
in the same way as XSUB names are expanded by the XS() macro.
Defaults to

=end original

帯域シンボルとして利用可能なルーチンのためのシンボル名のハッシュリファレンス。
それぞれのキー/値の組は、パッケージ名とそのパッケージのルーチン名の配列で
構成されます。
現在のところ AIX, OS/2, VMS, Win32 のみで使われます。
指定されたルーチン名は、XS() マクロで展開された XSUB 名と
同じ方法で展開されます。
デフォルトは:

  {"$(NAME)" => ["boot_$(NAME)" ] }

=begin original

e.g.

=end original

例えば:

  {"RPC" => [qw( boot_rpcb rpcb_gettime getnetconfigent )],
   "NetconfigPtr" => [ 'DESTROY'] }

=begin original

Please see the L<ExtUtils::Mksymlists> documentation for more information
about the DL_FUNCS, DL_VARS and FUNCLIST attributes.

=end original

DL_FUNCS, DL_VARS and FUNCLIST 属性に関するさらなる情報については
L<ExtUtils::Mksymlists> 文書を参照してください。

=item DL_VARS

=begin original

Array of symbol names for variables to be made available as universal symbols.
Used only under AIX, OS/2, VMS and Win32 at present.  Defaults to [].
(e.g. [ qw(Foo_version Foo_numstreams Foo_tree ) ])

=end original

帯域シンボルとして利用可能な変数のシンボル名の配列。
現在のところ AIX, OS/2, VMS, Win32 のみで使われます。
デフォルトは []。
(例: [ qw(Foo_version Foo_numstreams Foo_tree ) ])

=item EXCLUDE_EXT

=begin original

Array of extension names to exclude when doing a static build.  This
is ignored if INCLUDE_EXT is present.  Consult INCLUDE_EXT for more
details.  (e.g.  [ qw( Socket POSIX ) ] )

=end original

性的ビルドを行うときに除外するエクステンション名の配列。
INCLUDE_EXT が存在する場合はこれは無視されます。
さらなる詳細については INCLUDE_EXT を参照してください。
(例: [ qw( Socket POSIX ) ] )

=begin original

This attribute may be most useful when specified as a string on the
command line:  perl Makefile.PL EXCLUDE_EXT='Socket Safe'

=end original

この属性は、コマンドラインで文字列として指定した場合に最も便利です。
perl Makefile.PL EXCLUDE_EXT='ソケットセーフ'
(TBR)

=item EXE_FILES

=begin original

Ref to array of executable files. The files will be copied to the
INST_SCRIPT directory. Make realclean will delete them from there
again.

=end original

実行ファイルの配列リファレンス。
ファイルは INST_SCRIPT ディレクトリにコピーされます。
make realclean はそこからの削除を行います。

=begin original

If your executables start with something like #!perl or
#!/usr/bin/perl MakeMaker will change this to the path of the perl
'Makefile.PL' was invoked with so the programs will be sure to run
properly even if perl is not in /usr/bin/perl.

=end original

もし実行ファイルが #!perl もしくは #!/usr/bin/perl のように
なっていれば、MakeMaker は 'Makefile.PL' を実行した perl のパスに変更します。
これによって perl が /usr/bin/perl になかったとしても適切に実行できます。

=item FIRST_MAKEFILE

=begin original

The name of the Makefile to be produced.  This is used for the second
Makefile that will be produced for the MAP_TARGET.

=end original

生成される Makefile の名前。
これは MAP_TARGET のために生成される 2 番目の Makefile に使われます。

=begin original

Defaults to 'Makefile' or 'Descrip.MMS' on VMS.

=end original

デフォルトは 'Makefile'、VMS では 'Descrip.MMS'。

=begin original

(Note: we couldn't use MAKEFILE because dmake uses this for something
else).

=end original

(注意: 私たちは MAKEFILE を使えません; dmake が他のことに使うからです。)

=item FULLPERL

=begin original

Perl binary able to run this extension, load XS modules, etc...

=end original

この拡張の実行、XS モジュールの読み込みなどが可能な Perl バイナリ。

=item FULLPERLRUN

=begin original

Like PERLRUN, except it uses FULLPERL.

=end original

PERLRUN と同様ですが、FULLPERL を使います。

=item FULLPERLRUNINST

=begin original

Like PERLRUNINST, except it uses FULLPERL.

=end original

PERLRUNINST と同様ですが、FULLPERL を使います。

=item FUNCLIST

=begin original

This provides an alternate means to specify function names to be
exported from the extension.  Its value is a reference to an
array of function names to be exported by the extension.  These
names are passed through unaltered to the linker options file.

=end original

これは、エクステンションからエクスポートされる関数名を指定する
もう一つの手段を提供します。
この値は、エクステンションによってエクスポートされる関数名の配列への
リファレンスです。
これらの名前は隣家オプションファイルに無変更で渡されます。

=item H

=begin original

Ref to array of *.h file names. Similar to C.

=end original

*.h ファイル名の配列へのリファレンス。
C と同様。

=item IMPORTS

=begin original

This attribute is used to specify names to be imported into the
extension. Takes a hash ref.

=end original

この属性は、エクステンションにインポートされるための名前を指定するために
使われます。
ハッシュリファレンスを取ります。

=begin original

It is only used on OS/2 and Win32.

=end original

これは OS/2 と Win32 でのみ使われます。

=item INC

=begin original

Include file dirs eg: C<"-I/usr/5include -I/path/to/inc">

=end original

インクルードファイルのディレクトリ、
例えば: C<"-I/usr/5include -I/path/to/inc">

=item INCLUDE_EXT

=begin original

Array of extension names to be included when doing a static build.
MakeMaker will normally build with all of the installed extensions when
doing a static build, and that is usually the desired behavior.  If
INCLUDE_EXT is present then MakeMaker will build only with those extensions
which are explicitly mentioned. (e.g.  [ qw( Socket POSIX ) ])

=end original

静的風呂℃をするときに含まれるエクステンション名の配列。
MakeMaker は、静的ビルドをするとき、普通は全てのインストールされた
エクステンションをビルドします;
そしてこれは普通望まれている振る舞いです。
INCLUDE_EXT が存在する場合、MakeMaker は
明示的に指定されているエクステンションのみをビルドします。
(例: [ qw( Socket POSIX ) ])

=begin original

It is not necessary to mention DynaLoader or the current extension when
filling in INCLUDE_EXT.  If the INCLUDE_EXT is mentioned but is empty then
only DynaLoader and the current extension will be included in the build.

=end original

INCLUDE_EXT を指定するときに DynaLoader や現在のエクステンションを
指定する必要はありません。
INCLUDE_EXT が指定されているけれども空の場合、
DynaLoader と現在のエクステンションのみがビルドに含まれます。

=begin original

This attribute may be most useful when specified as a string on the
command line:  perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'

=end original

この属性は、コマンドラインで文字列として指定した場合に最も便利です。
perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'
(TBR)

=item INSTALLARCHLIB

=begin original

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to perl.

=end original

'make install'で使用されます。
INSTALLDIRSがperlに設定されている場合、INST_ARCHLIBからこのディレクトリにファイルをコピーします。
(TBR)

=item INSTALLBIN

=begin original

Directory to install binary files (e.g. tkperl) into if
INSTALLDIRS=perl.

=end original

INSTALLDIRS=perl の場合に (tkperl のような) バイナリファイルを
インストールするディレクトリ。

=item INSTALLDIRS

=begin original

Determines which of the sets of installation directories to choose:
perl, site or vendor.  Defaults to site.

=end original

perl, site, vendor のどのインストールディレクトリ集合を選ぶかを決定します。
デフォルトは site。

=item INSTALLMAN1DIR

=item INSTALLMAN3DIR

=begin original

These directories get the man pages at 'make install' time if
INSTALLDIRS=perl.  Defaults to $Config{installman*dir}.

=end original

これらのディレクトリは、INSTALLDIRS=perl の場合、
These directories get the man pages at 
'make install' 時に man ページを得ます。
デフォルトは $Config{installman*dir}。

=begin original

If set to 'none', no man pages will be installed.

=end original

'none' に設定すると、man ページはインストールされません。

=item INSTALLPRIVLIB

=begin original

Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to perl.

=end original

'make install'が使用します。
INSTALLDIRSがperlに設定されている場合に、INST_LIBからこのディレクトリにファイルをコピーします。
(TBR)

=begin original

Defaults to $Config{installprivlib}.

=end original

デフォルトは $Config{installprivlib}。

=item INSTALLSCRIPT

=begin original

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS=perl.

=end original

INSTALLDIRS=perl なら、
INST_SCRIPT からこのディレクトリにファイルをコピーするように、
'make install' によって使われます。

=item INSTALLSITEARCH

=begin original

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to site (default).

=end original

'make install'で使用されます。
INSTALLDIRSがサイトに設定されている場合(デフォルト)、INST_ARCHLIBからこのディレクトリにファイルをコピーします。
(TBR)

=item INSTALLSITEBIN

=begin original

Used by 'make install', which copies files from INST_BIN to this
directory if INSTALLDIRS is set to site (default).

=end original

'make install'で使用されます。
INSTALLDIRSがサイト(デフォルト)に設定されている場合、ファイルをINST_BINからこのディレクトリにコピーします。
(TBR)

=item INSTALLSITELIB

=begin original

Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to site (default).

=end original

'make install'で使用されます。
INSTALLDIRSがサイトに設定されている場合(デフォルト)、INST_LIBからこのディレクトリにファイルをコピーします。
(TBR)

=item INSTALLSITEMAN1DIR

=item INSTALLSITEMAN3DIR

=begin original

These directories get the man pages at 'make install' time if
INSTALLDIRS=site (default).  Defaults to 
$(SITEPREFIX)/man/man$(MAN*EXT).

=end original

INSTALLDIRS=site(デフォルト)の場合、これらのディレクトリは'make install'時にマニュアルページを取得します。
デフォルトは$(SITEPREFIX)/man/man$(MAN*EXT)です。
(TBR)

=begin original

If set to 'none', no man pages will be installed.

=end original

'none' に設定すると、man ページはインストールされません。

=item INSTALLSITESCRIPT

=begin original

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to site (default).

=end original

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to site (default).
(TBT)

=item INSTALLVENDORARCH

=begin original

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to vendor.

=end original

'make install'で使用されます。
INSTALLDIRSがvendorに設定されている場合に、INST_ARCHLIBからこのディレクトリにファイルをコピーします。
(TBR)

=item INSTALLVENDORBIN

=begin original

Used by 'make install', which copies files from INST_BIN to this
directory if INSTALLDIRS is set to vendor.

=end original

'make install'で使用されます。
INSTALLDIRSがvendorに設定されている場合、ファイルをINST_BINからこのディレクトリにコピーします。
(TBR)

=item INSTALLVENDORLIB

=begin original

Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to vendor.

=end original

'make install'で使用されます。
INSTALLDIRSがvendorに設定されている場合、ファイルをINST_LIBからこのディレクトリにコピーします。
(TBR)

=item INSTALLVENDORMAN1DIR

=item INSTALLVENDORMAN3DIR

=begin original

These directories get the man pages at 'make install' time if
INSTALLDIRS=vendor.  Defaults to $(VENDORPREFIX)/man/man$(MAN*EXT).

=end original

INSTALLDIRS=vendorの場合、これらのディレクトリは'make install'時にマニュアルページを取得します。
デフォルトは$(VENDORPREFIX)/man/man$(MAN*EXT)です。
(TBR)

=begin original

If set to 'none', no man pages will be installed.

=end original

'none' に設定すると、man ページはインストールされません。

=item INSTALLVENDORSCRIPT

=begin original

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to vendor.

=end original

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to vendor.
(TBT)

=item INST_ARCHLIB

=begin original

Same as INST_LIB for architecture dependent files.

=end original

アーキテクチャに依存するファイルの場合はINST_LIBと同じです。
(TBR)

=item INST_BIN

=begin original

Directory to put real binary files during 'make'. These will be copied
to INSTALLBIN during 'make install'

=end original

'make' 中に実際のバイナリファイルを置くディレクトリ。
これらは 'make install' 中に INSTALLBIN にコピーされます。

=item INST_LIB

=begin original

Directory where we put library files of this extension while building
it.

=end original

ビルド中にこのエクステンションのライブラリファイルを置くディレクトリ。

=item INST_MAN1DIR

=begin original

Directory to hold the man pages at 'make' time

=end original

'make' 時に man ページを保存するディレクトリ。

=item INST_MAN3DIR

=begin original

Directory to hold the man pages at 'make' time

=end original

'make' 時に man ページを保存するディレクトリ。

=item INST_SCRIPT

=begin original

Directory, where executable files should be installed during
'make'. Defaults to "./blib/script", just to have a dummy location during
testing. make install will copy the files in INST_SCRIPT to
INSTALLSCRIPT.

=end original

'make' 中に実行ファイルがインストールされるべきディレクトリ。
デフォルトは "./blib/script" で、テスト中の単なるダミー位置です。
make install は INST_SCRIPT のファイルを INSTALLSCRIPT にコピーします。

=item LD

=begin original

Program to be used to link libraries for dynamic loading.

=end original

動的読み込みのためのライブラリをリンクするために使われるプログラム。

=begin original

Defaults to $Config{ld}.

=end original

デフォルトは $Config{ld}。

=item LDDLFLAGS

=begin original

Any special flags that might need to be passed to ld to create a
shared library suitable for dynamic loading.  It is up to the makefile
to use it.  (See L<Config/lddlflags>)

=end original

動的ロードに適した共有ライブラリを作成するためにldに渡す必要がある特別なフラグ。
このフラグを使用するかどうかは、makefileが決定します(L<Config/lddlflags>を参照)。
(TBR)

=begin original

Defaults to $Config{lddlflags}.

=end original

デフォルトは $Config{lddlflags}。

=item LDFROM

=begin original

Defaults to "$(OBJECT)" and is used in the ld command to specify
what files to link/load from (also see dynamic_lib below for how to
specify ld flags)

=end original

デフォルトは"$(OBJECT)"で、ldコマンドでリンク/ロード元のファイルを指定するために使用されます(ldフラグの指定方法については、後述のdynamic_libも参照してください)。
(TBR)

=item LIB

=begin original

LIB should only be set at C<perl Makefile.PL> time but is allowed as a
MakeMaker argument. It has the effect of setting both INSTALLPRIVLIB
and INSTALLSITELIB to that value regardless any explicit setting of
those arguments (or of PREFIX).  INSTALLARCHLIB and INSTALLSITEARCH
are set to the corresponding architecture subdirectory.

=end original

LIBは、C<perl Makefile.PL>時にのみ設定する必要がありますが、MakeMaker引数として使用できます。
LIBは、引数(またはPREFIX)の明示的な設定に関係なく、INSTALLPRIVLIBとINSTALLSITELIBの両方をその値に設定する効果があります。
INSTALLARCHLIBとINSTALLSITEARCHは、対応するアーキテクチャサブディレクトリに設定されます。
(TBR)

=item LIBPERL_A

=begin original

The filename of the perllibrary that will be used together with this
extension. Defaults to libperl.a.

=end original

この拡張子と一緒に使用されるperllibraryのファイル名。
デフォルトはlibperl.aです。
(TBR)

=item LIBS

=begin original

An anonymous array of alternative library
specifications to be searched for (in order) until
at least one library is found. E.g.

=end original

少なくとも1つのライブラリが見つかるまで(順番に)検索される代替ライブラリ仕様の匿名配列。
例:
(TBR)

  'LIBS' => ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"]

=begin original

Mind, that any element of the array
contains a complete set of arguments for the ld
command. So do not specify

=end original

配列の要素には、ldコマンドの引数の完全なセットが含まれていることに注意してください。
したがって
(TBR)

  'LIBS' => ["-ltcl", "-ltk", "-lX11"]

=begin original

See ODBM_File/Makefile.PL for an example, where an array is needed. If
you specify a scalar as in

=end original

配列が必要な例としては ODBM_File/Makefile.PL を参照してください。
次のようにスカラを指定すると:

  'LIBS' => "-ltcl -ltk -lX11"

=begin original

MakeMaker will turn it into an array with one element.

=end original

MakeMaker はこれを一要素の配列に変換します。

=item LICENSE

=begin original

The licensing terms of your distribution.  Generally its "perl" for the
same license as Perl itself.

=end original

The licensing terms of your distribution.  Generally its "perl" for the
same license as Perl itself.
(TBT)

=begin original

See L<Module::Build::API> for the list of options.

=end original

See L<Module::Build::API> for the list of options.
(TBT)

=begin original

Defaults to "unknown".

=end original

Defaults to "unknown".
(TBT)

=item LINKTYPE

=begin original

'static' or 'dynamic' (default unless usedl=undef in
config.sh). Should only be used to force static linking (also see
linkext below).

=end original

'static' または 'dynamic' (config.sh で usedl=undef としていない限り
デフォルト)。
静的リンクを強制する場合にのみ使われるべきです
(後述する linkext も参照)。

=item MAKE

=begin original

Variant of make you intend to run the generated Makefile with.  This
parameter lets Makefile.PL know what make quirks to account for when
generating the Makefile.

=end original

Variant of make you intend to run the generated Makefile with.  This
parameter lets Makefile.PL know what make quirks to account for when
generating the Makefile.
(TBT)

=begin original

MakeMaker also honors the MAKE environment variable.  This parameter
takes precedent.

=end original

MakeMaker also honors the MAKE environment variable.  This parameter
takes precedent.
(TBT)

=begin original

Currently the only significant values are 'dmake' and 'nmake' for Windows
users.

=end original

Currently the only significant values are 'dmake' and 'nmake' for Windows
users.
(TBT)

=begin original

Defaults to $Config{make}.

=end original

Defaults to $Config{make}.
(TBT)

=item MAKEAPERL

=begin original

Boolean which tells MakeMaker, that it should include the rules to
make a perl. This is handled automatically as a switch by
MakeMaker. The user normally does not need it.

=end original

Boolean which tells MakeMaker, that it should include the rules to
make a perl. This is handled automatically as a switch by
MakeMaker. The user normally does not need it.

=item MAKEFILE_OLD

=begin original

When 'make clean' or similar is run, the $(FIRST_MAKEFILE) will be
backed up at this location.

=end original

'make clean' 的なものが実行されたとき、
$(FIRST_MAKEFILE) はこの場所にバックアップされます。

=begin original

Defaults to $(FIRST_MAKEFILE).old or $(FIRST_MAKEFILE)_old on VMS.

=end original

デフォルトは $(FIRST_MAKEFILE).old、あるいは VMS では
$(FIRST_MAKEFILE)_old。

=item MAN1PODS

=begin original

Hashref of pod-containing files. MakeMaker will default this to all
EXE_FILES files that include POD directives. The files listed
here will be converted to man pages and installed as was requested
at Configure time.

=end original

pod を含んでいるファイルのハッシュリファレンス。
MakeMaker は POD ディレクティブを含んでいる EXE_FILES 内の全てのファイルを
デフォルトとします。
ここに指定したファイルはマニュアルページに変換され、
Configure 時に要求されていればインストールされます。

=begin original

This hash should map POD files (or scripts containing POD) to the
man file names under the C<blib/man1/> directory, as in the following
example:

=end original

This hash should map POD files (or scripts containing POD) to the
man file names under the C<blib/man1/> directory, as in the following
example:
(TBT)

  MAN1PODS            => {
    'doc/command.pod'    => 'blib/man1/command.1',
    'scripts/script.pl'  => 'blib/man1/script.1',
  }

=item MAN3PODS

=begin original

Hashref that assigns to *.pm and *.pod files the files into which the
manpages are to be written. MakeMaker parses all *.pod and *.pm files
for POD directives. Files that contain POD will be the default keys of
the MAN3PODS hashref. These will then be converted to man pages during
C<make> and will be installed during C<make install>.

=end original

*.pm 及び *.pod ファイルから生成するマニュアルページのファイル名を
示すハッシュリファレンス。
MakeMaker は全ての *.pod 及び *.pod ファイルに対して POD ディレクティブを
含むか解析します。
POD を含むファイルは MAN3POD ハッシュリファレンスのデフォルトのキーに
なります。
これらは C<make> 時にマニュアルページに変換され、C<make install> によって
インストールされます。

=begin original

Example similar to MAN1PODS.

=end original

Example similar to MAN1PODS.
(TBT)

=item MAP_TARGET

=begin original

If it is intended, that a new perl binary be produced, this variable
may hold a name for that binary. Defaults to perl

=end original

これが意図されると、新しい perl バイナリが生成され、
この変数はそのバイナリの名前を保持します。
デフォルトは perl。

=item META_ADD

=item META_MERGE

=begin original

A hashrefs of items to add to the F<META.yml>.

=end original

A hashrefs of items to add to the F<META.yml>.
(TBT)

=begin original

They differ in how they behave if they have the same key as the
default metadata.  META_ADD will override the default value with it's
own.  META_MERGE will merge its value with the default.

=end original

They differ in how they behave if they have the same key as the
default metadata.  META_ADD will override the default value with it's
own.  META_MERGE will merge its value with the default.
(TBT)

=begin original

Unless you want to override the defaults, prefer META_MERGE so as to
get the advantage of any future defaults.

=end original

Unless you want to override the defaults, prefer META_MERGE so as to
get the advantage of any future defaults.
(TBT)

=item MIN_PERL_VERSION

=begin original

The minimum required version of Perl for this distribution.

=end original

The minimum required version of Perl for this distribution.
(TBT)

=begin original

Either 5.006001 or 5.6.1 format is acceptable.

=end original

Either 5.006001 or 5.6.1 format is acceptable.
(TBT)

=item MYEXTLIB

=begin original

If the extension links to a library that it builds set this to the
name of the library (see SDBM_File)

=end original

拡張機能がビルドするライブラリにリンクしている場合は、ライブラリの名前を設定します(SDBM_Fileを参照)。
(TBR)

=item NAME

=begin original

Perl module name for this extension (DBD::Oracle). This will default
to the directory name but should be explicitly defined in the
Makefile.PL.

=end original

このエクステンションのための Perl モジュール名 (DBD::Oracle)。
これのデフォルトはディレクトリ名ですが
Makefile.PL で明示的に定義されるべきです。

=item NEEDS_LINKING

=begin original

MakeMaker will figure out if an extension contains linkable code
anywhere down the directory tree, and will set this variable
accordingly, but you can speed it up a very little bit if you define
this boolean variable yourself.

=end original

MakeMakerは、拡張機能がディレクトリーツリーの下のどこかにリンク可能なコードを含んでいるかどうかを判断し、それに応じてこの変数を設定しますが、このブール変数を自分で定義すれば、この変数を少しだけ高速化することができます。
(TBR)

=item NOECHO

=begin original

Command so make does not print the literal commands its running.

=end original

make が実行中のリテラルなコマンドを表示しないようにするためのコマンド。

=begin original

By setting it to an empty string you can generate a Makefile that
prints all commands. Mainly used in debugging MakeMaker itself.

=end original

これを空文字列に設定することで、全てのコマンドを表示する Makefile を
生成できます。
主に MakeMaker 自身のデバッグに使われます。

=begin original

Defaults to C<@>.

=end original

デフォルトは C<@>。

=item NORECURS

=begin original

Boolean.  Attribute to inhibit descending into subdirectories.

=end original

ブール型(Boolean)の値を指定します。
サブディレクトリへの降順の移動を禁止する属性
(TBR)

=item NO_META

=begin original

When true, suppresses the generation and addition to the MANIFEST of
the META.yml module meta-data file during 'make distdir'.

=end original

trueの場合、'make distdir'中のMETA.ymlモジュールメタデータファイルの生成とMANIFESTへの追加を抑制します。
(TBR)

=begin original

Defaults to false.

=end original

デフォルトは偽。

=item NO_VC

=begin original

In general, any generated Makefile checks for the current version of
MakeMaker and the version the Makefile was built under. If NO_VC is
set, the version check is neglected. Do not write this into your
Makefile.PL, use it interactively instead.

=end original

一般的に、生成された Makefile は現在のバージョンと、
Makefile がビルドされたバージョンの MakeMaker をチェックします。
NO_VC が設定されると、バージョンチェックは無視されます。
これは Makefile.PL に書かず、代わりに対話的に使ってください。

=item OBJECT

=begin original

List of object files, defaults to '$(BASEEXT)$(OBJ_EXT)', but can be a long
string containing all object files, e.g. "tkpBind.o
tkpButton.o tkpCanvas.o"

=end original

オブジェクトファイルのリスト。
デフォルトは'$(BASEEXT)$(OBJ_EXT)'ですが、すべてのオブジェクトファイルを含む長い文字列にすることもできます(例:"tkpBind.o tkpButton.o tkpCanvas.o")。
(TBR)

=begin original

(Where BASEEXT is the last component of NAME, and OBJ_EXT is $Config{obj_ext}.)

=end original

(BASEEXTはNAMEの最後のコンポーネントで、OBJ_EXTは$Config{obj_ext}です)。
(TBR)

=item OPTIMIZE

=begin original

Defaults to C<-O>. Set it to C<-g> to turn debugging on. The flag is
passed to subdirectory makes.

=end original

デフォルトは C<-O>。
デバッグを友好にするにはこれを C<-g> に設定します。
フラグはサブディレクトリの make に渡されます。

=item PERL

=begin original

Perl binary for tasks that can be done by miniperl

=end original

miniperl によって行われるタスクの為の Perl バイナリ。

=item PERL_CORE

=begin original

Set only when MakeMaker is building the extensions of the Perl core
distribution.

=end original

MakeMaker が Perl のコア配布のエクステンションを
ビルドするときにのみ設定されます。

=item PERLMAINCC

=begin original

The call to the program that is able to compile perlmain.c. Defaults
to $(CC).

=end original

perlmain.c をコンパイルすることができるプログラムの呼び出し方。
デフォルトでは $(CC)。

=item PERL_ARCHLIB

=begin original

Same as for PERL_LIB, but for architecture dependent files.

=end original

PERL_LIB と同様ですが、アーキテクチャに依存したファイルです。

=begin original

Used only when MakeMaker is building the extensions of the Perl core
distribution (because normally $(PERL_ARCHLIB) is automatically in @INC,
and adding it would get in the way of PERL5LIB).

=end original

MakeMakerがPerlコアディストリビューションの拡張機能をビルドする場合にのみ使用されます(通常、$(PERL_ARCHLIB)は自動的に@INCに格納され、これを追加するとPERL5LIBの邪魔になるため)。
(TBR)

=item PERL_LIB

=begin original

Directory containing the Perl library to use.

=end original

使われる Perl ライブラリがあるディレクトリ。

=begin original

Used only when MakeMaker is building the extensions of the Perl core
distribution (because normally $(PERL_LIB) is automatically in @INC,
and adding it would get in the way of PERL5LIB).

=end original

MakeMakerがPerlコアディストリビューションの拡張機能をビルドする場合にのみ使用されます(通常、$(PERL_LIB)は自動的に@INCに格納されるため、これを追加するとPERL5LIBの邪魔になります)。
(TBR)

=item PERL_MALLOC_OK

=begin original

defaults to 0.  Should be set to TRUE if the extension can work with
the memory allocation routines substituted by the Perl malloc() subsystem.
This should be applicable to most extensions with exceptions of those

=end original

デフォルトは0です。
Perlのmalloc()サブシステムで置換されたメモリ割り当てルーチンで拡張機能が動作する場合は、TRUEに設定する必要があります。
これは、次の例外を除き、ほとんどの拡張機能に適用できます。
(TBR)

=over 4

=item *

=begin original

with bugs in memory allocations which are caught by Perl's malloc();

=end original

このバグはPerlのmalloc()
(TBR)

=item *

=begin original

which interact with the memory allocator in other ways than via
malloc(), realloc(), free(), calloc(), sbrk() and brk();

=end original

これらは、malloc()、realloc()、free()、calloc()、sbrk()、brk()以外の方法でメモリアロケータと相互作用します。
(TBR)

=item *

=begin original

which rely on special alignment which is not provided by Perl's malloc().

=end original

これは、Perlのmalloc()では提供されていない特別なアラインメントに依存しています。
(TBR)

=back

=begin original

B<NOTE.>  Negligence to set this flag in I<any one> of loaded extension
nullifies many advantages of Perl's malloc(), such as better usage of
system resources, error detection, memory usage reporting, catchable failure
of memory allocations, etc.

=end original

B<注.>ロードされた拡張機能のI<any one>でこのフラグを設定することを怠ると、Perlのmalloc()の多くの利点が無効になります。
たとえば、システムリソースの使用率の向上、エラー検出、メモリ使用量の報告、メモリ割り当ての失敗の捕捉などです。
(TBR)

=item PERLPREFIX

=begin original

Directory under which core modules are to be installed.

=end original

コアモジュールがインストールされるディレクトリ。
(TBR)

=begin original

Defaults to $Config{installprefixexp} falling back to
$Config{installprefix}, $Config{prefixexp} or $Config{prefix} should
$Config{installprefixexp} not exist.

=end original

デフォルトでは$Config{installprefixexp}ですが、$Config{installprefixexp}が存在しない場合は、$Config{installprefix}、$Config{prefixexp}、または$Config{プレフィックス}に戻ります。
(TBR)

=begin original

Overridden by PREFIX.

=end original

PREFIX によって上書きされます。

=item PERLRUN

=begin original

Use this instead of $(PERL) when you wish to run perl.  It will set up
extra necessary flags for you.

=end original

perl を実行したいときには $(PERL) ではなくてこれを使います。
必要なフラグが設定されています。

=item PERLRUNINST

=begin original

Use this instead of $(PERL) when you wish to run perl to work with
modules.  It will add things like -I$(INST_ARCH) and other necessary
flags so perl can see the modules you're about to install.

=end original

perl をモジュールと一緒に実行させたいときには $(PERL) ではなくて
これを使います。
これは -I$(INST_ARCH) や他の必要なフラグが設定されているので
インストール中でもモジュールを見つけることができます。

=item PERL_SRC

=begin original

Directory containing the Perl source code (use of this should be
avoided, it may be undefined)

=end original

Perl ソースコードがあるディレクトリ
(これを使うのは避けるべきです; これは未定義かもしれません)。

=item PERM_DIR

=begin original

Desired permission for directories. Defaults to C<755>.

=end original

Desired permission for directories. Defaults to C<755>.
(TBT)

=item PERM_RW

=begin original

Desired permission for read/writable files. Defaults to C<644>.

=end original

読み書き可能ファイルに望ましいパーミッション。
デフォルトは C<644>.

=item PERM_RWX

=begin original

Desired permission for executable files. Defaults to C<755>.

=end original

実行ファイルに望ましいパーミッション。
デフォルトは C<755>。

=item PL_FILES

=begin original

MakeMaker can run programs to generate files for you at build time.
By default any file named *.PL (except Makefile.PL and Build.PL) in
the top level directory will be assumed to be a Perl program and run
passing its own basename in as an argument.  For example...

=end original

MakeMaker can run programs to generate files for you at build time.
By default any file named *.PL (except Makefile.PL and Build.PL) in
the top level directory will be assumed to be a Perl program and run
passing its own basename in as an argument.  For example...
(TBT)

    perl foo.PL foo

=begin original

This behavior can be overridden by supplying your own set of files to
search.  PL_FILES accepts a hash ref, the key being the file to run
and the value is passed in as the first argument when the PL file is run.

=end original

This behavior can be overridden by supplying your own set of files to
search.  PL_FILES accepts a hash ref, the key being the file to run
and the value is passed in as the first argument when the PL file is run.
(TBT)

    PL_FILES => {'bin/foobar.PL' => 'bin/foobar'}

=begin original

Would run bin/foobar.PL like this:

=end original

Would run bin/foobar.PL like this:
(TBT)

    perl bin/foobar.PL bin/foobar

=begin original

If multiple files from one program are desired an array ref can be used.

=end original

If multiple files from one program are desired an array ref can be used.
(TBT)

    PL_FILES => {'bin/foobar.PL' => [qw(bin/foobar1 bin/foobar2)]}

=begin original

In this case the program will be run multiple times using each target file.

=end original

In this case the program will be run multiple times using each target file.
(TBT)

    perl bin/foobar.PL bin/foobar1
    perl bin/foobar.PL bin/foobar2

=begin original

PL files are normally run B<after> pm_to_blib and include INST_LIB and
INST_ARCH in its C<@INC> so the just built modules can be
accessed... unless the PL file is making a module (or anything else in
PM) in which case it is run B<before> pm_to_blib and does not include
INST_LIB and INST_ARCH in its C<@INC>.  This apparently odd behavior
is there for backwards compatibility (and its somewhat DWIM).

=end original

PL files are normally run B<after> pm_to_blib and include INST_LIB and
INST_ARCH in its C<@INC> so the just built modules can be
accessed... unless the PL file is making a module (or anything else in
PM) in which case it is run B<before> pm_to_blib and does not include
INST_LIB and INST_ARCH in its C<@INC>.  This apparently odd behavior
is there for backwards compatibility (and its somewhat DWIM).
(TBT)

=item PM

=begin original

Hashref of .pm files and *.pl files to be installed.  e.g.

=end original

インストールする *.pm 及び *.pl ファイルのハッシュリファレンス。
例:

  {'name_of_file.pm' => '$(INST_LIBDIR)/install_as.pm'}

=begin original

By default this will include *.pm and *.pl and the files found in
the PMLIBDIRS directories.  Defining PM in the
Makefile.PL will override PMLIBDIRS.

=end original

デフォルトでは、*.pm 及び *.pl ファイル、そして PMLIBDIRS 
ディレクトリに見つかったファイルが含まれます。
Makefile.PL で PM を定義すると、PMLIBDIRS は上書きされます。

=item PMLIBDIRS

=begin original

Ref to array of subdirectories containing library files.  Defaults to
[ 'lib', $(BASEEXT) ]. The directories will be scanned and I<any> files
they contain will be installed in the corresponding location in the
library.  A libscan() method can be used to alter the behaviour.
Defining PM in the Makefile.PL will override PMLIBDIRS.

=end original

ライブラリファイルを含んでいるサブディレクトリの配列へのリファレンス。
デフォルトは ['lib',$(BASEEXT)]。
このディレクトリは走査され、そこに存在した I<全ての> ファイルが対応する
位置にインストールされます。
この振る舞いを変更するときには libscan() メソッドを使います。
Makefile.PL で PM を定義していると PMLIBDIRS は上書きされます。

=begin original

(Where BASEEXT is the last component of NAME.)

=end original

(BASEEXT は NAME の最後の要素が使われます。)

=item PM_FILTER

=begin original

A filter program, in the traditional Unix sense (input from stdin, output
to stdout) that is passed on each .pm file during the build (in the
pm_to_blib() phase).  It is empty by default, meaning no filtering is done.

=end original

ビルド中 (pm_to_blib() フェーズ) に、各 .pm ファイルが渡される、
伝統的な Unix の意味 (stdin から入力して stdout に出力する) の
フィルタプログラム。
デフォルトは空で、フィルタリングは行われないことを意味します。

=begin original

Great care is necessary when defining the command if quoting needs to be
done.  For instance, you would need to say:

=end original

引用符で囲む必要がある場合は、コマンドを定義するときに細心の注意が必要です。
たとえば、次のような指定が:

  {'PM_FILTER' => 'grep -v \\"^\\#\\"'}

=begin original

to remove all the leading comments on the fly during the build.  The
extra \\ are necessary, unfortunately, because this variable is interpolated
within the context of a Perl program built on the command line, and double
quotes are what is used with the -e switch to build that command line.  The
# is escaped for the Makefile, since what is going to be generated will then
be:

=end original

ビルド中にその場で全ての先頭のコメントを削除するために必要です。
この変数は、コマンドラインで構築された Perl プログラムのコンテキスト内で
展開されるため、残念ながら、追加の \\ が必要です;
そしてダブルクォートは、そのコマンドラインを構築するために -e スイッチと
ともに使われます。
# は Makefile 用にエスケープされます;
これは、生成されるものが次のようになるためです。

  PM_FILTER = grep -v \"^\#\"

=begin original

Without the \\ before the #, we'd have the start of a Makefile comment,
and the macro would be incorrectly defined.

=end original

#の前に\\がないと、Makefileコメントの先頭になり、マクロが誤って定義されてしまいます。
(TBR)

=item POLLUTE

=begin original

Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6, these
preprocessor definitions are not available by default.  The POLLUTE flag
specifies that the old names should still be defined:

=end original

リリース 5.005 では、エクステンションのソース互換性のために、
プリプロセッサマクロを提供することで古い大域シンボル名を除外していました。
リリース 5.6 から、これらのプリプロセッサ定義はデフォルトでは
利用できなくなりました。
POLLUTE フラグは、古い名前がまだ定義されていることを指定します:

  perl Makefile.PL POLLUTE=1

=begin original

Please inform the module author if this is necessary to successfully install
a module under 5.6 or later.

=end original

5.6 以降でモジュールのインストールを成功させるのにこれが必要なら、
モジュール作者に教えてあげてください。

=item PPM_INSTALL_EXEC

=begin original

Name of the executable used to run C<PPM_INSTALL_SCRIPT> below. (e.g. perl)

=end original

後述する C<PPM_INSTALL_SCRIPT> を実行するときに使われる実行ファイルの名前。
(例: perl)

=item PPM_INSTALL_SCRIPT

=begin original

Name of the script that gets executed by the Perl Package Manager after
the installation of a package.

=end original

パッケージのインストール後にPerl Package Managerによって実行されるスクリプトの名前。
(TBR)

=item PREFIX

=begin original

This overrides all the default install locations.  Man pages,
libraries, scripts, etc...  MakeMaker will try to make an educated
guess about where to place things under the new PREFIX based on your
Config defaults.  Failing that, it will fall back to a structure
which should be sensible for your platform.

=end original

これは、すべてのデフォルトのインストール場所を上書きします。
マニュアルページ、ライブラリ、スクリプトなど.MakeMakerは、Configのデフォルトに基づいて、新しいPREFIXの下に何を配置すべきかについて、知識に基づいた推測を試みます。
それができなければ、プラットフォームに適した構造になります。
(TBR)

=begin original

If you specify LIB or any INSTALL* variables they will not be effected
by the PREFIX.

=end original

LIBまたはINSTALL*変数を指定しても、PREFIXの影響を受けません。
(TBR)

=item PREREQ_FATAL

=begin original

Bool. If this parameter is true, failing to have the required modules
(or the right versions thereof) will be fatal. C<perl Makefile.PL>
will C<die> instead of simply informing the user of the missing dependencies.

=end original

Bool. If this parameter is true, failing to have the required modules
(or the right versions thereof) will be fatal. C<perl Makefile.PL>
will C<die> instead of simply informing the user of the missing dependencies.
(TBT)

=begin original

It is I<extremely> rare to have to use C<PREREQ_FATAL>. Its use by module
authors is I<strongly discouraged> and should never be used lightly.
Module installation tools have ways of resolving umet dependencies but
to do that they need a F<Makefile>.  Using C<PREREQ_FATAL> breaks this.
That's bad.

=end original

It is I<extremely> rare to have to use C<PREREQ_FATAL>. Its use by module
authors is I<strongly discouraged> and should never be used lightly.
Module installation tools have ways of resolving umet dependencies but
to do that they need a F<Makefile>.  Using C<PREREQ_FATAL> breaks this.
That's bad.
(TBT)

=begin original

The only situation where it is appropriate is when you have
dependencies that are indispensible to actually I<write> a
F<Makefile>. For example, MakeMaker's F<Makefile.PL> needs L<File::Spec>.
If its not available it cannot write the F<Makefile>.

=end original

The only situation where it is appropriate is when you have
dependencies that are indispensible to actually I<write> a
F<Makefile>. For example, MakeMaker's F<Makefile.PL> needs L<File::Spec>.
If its not available it cannot write the F<Makefile>.
(TBT)

=begin original

Note: see L<Test::Harness> for a shortcut for stopping tests early
if you are missing dependencies and are afraid that users might
use your module with an incomplete environment.

=end original

Note: see L<Test::Harness> for a shortcut for stopping tests early
if you are missing dependencies and are afraid that users might
use your module with an incomplete environment.
(TBT)

=item PREREQ_PM

=begin original

A hash of modules that are needed to run your module.  The keys are
the module names ie. Test::More, and the minimum version is the
value. If the required version number is 0 any version will do.

=end original

A hash of modules that are needed to run your module.  The keys are
the module names ie. Test::More, and the minimum version is the
value. If the required version number is 0 any version will do.
(TBT)

=begin original

This will go into the C<requires> field of your F<META.yml>.

=end original

This will go into the C<requires> field of your F<META.yml>.
(TBT)

    PREREQ_PM => {
        # Require Test::More at least 0.47
        "Test::More" => "0.47",

        # Require any version of Acme::Buffy
        "Acme::Buffy" => 0,
    }

=item PREREQ_PRINT

=begin original

Bool.  If this parameter is true, the prerequisites will be printed to
stdout and MakeMaker will exit.  The output format is an evalable hash
ref.

=end original

ブール。
このパラメータがtrueの場合、前提条件がstdoutに出力され、MakeMakerが終了します。
出力形式は、評価可能なハッシュ参照です。
(TBR)

  $PREREQ_PM = {
                 'A::B' => Vers1,
                 'C::D' => Vers2,
                 ...
               };

=begin original

If a distribution defines a minimal required perl version, this is
added to the output as an additional line of the form:

=end original

If a distribution defines a minimal required perl version, this is
added to the output as an additional line of the form:
(TBT)

  $MIN_PERL_VERSION = '5.008001';

=begin original

If BUILD_REQUIRES is not empty, it will be dumped as $BUILD_REQUIRES hasref.

=end original

If BUILD_REQUIRES is not empty, it will be dumped as $BUILD_REQUIRES hasref.
(TBT)

=item PRINT_PREREQ

=begin original

RedHatism for C<PREREQ_PRINT>.  The output format is different, though:

=end original

RedHat 的な C<PREREQ_PRINT>。
出力形式は違います:

    perl(A::B)>=Vers1 perl(C::D)>=Vers2 ...

=begin original

A minimal required perl version, if present, will look like this:

=end original

A minimal required perl version, if present, will look like this:
(TBT)

    perl(perl)>=5.008001

=item SITEPREFIX

=begin original

Like PERLPREFIX, but only for the site install locations.

=end original

PERLPREFIX と同様ですが、サイトインストール場所専用です。

=begin original

Defaults to $Config{siteprefixexp}.  Perls prior to 5.6.0 didn't have
an explicit siteprefix in the Config.  In those cases
$Config{installprefix} will be used.

=end original

デフォルトは $Config{siteprefixexp}。
5.6.0 以前の Perl には Config 内に明示的な siteprefix がありませんでした。
このような場合、$Config{installprefix} が使われます。

=begin original

Overridable by PREFIX

=end original

PREFIX で上書き可能。

=item SIGN

=begin original

When true, perform the generation and addition to the MANIFEST of the
SIGNATURE file in the distdir during 'make distdir', via 'cpansign
-s'.

=end original

When true, perform the generation and addition to the MANIFEST of the
SIGNATURE file in the distdir during 'make distdir', via 'cpansign
-s'.
(TBT)

=begin original

Note that you need to install the Module::Signature module to
perform this operation.

=end original

Note that you need to install the Module::Signature module to
perform this operation.
(TBT)

=begin original

Defaults to false.

=end original

Defaults to false.
(TBT)

=item SKIP

=begin original

Arrayref. E.g. [qw(name1 name2)] skip (do not write) sections of the
Makefile. Caution! Do not use the SKIP attribute for the negligible
speedup. It may seriously damage the resulting Makefile. Only use it
if you really need it.

=end original

配列リファレンス。
例: [qw(name1 name2)] は Makefile の節を飛ばします (書き込みません)。
注意!
わずかな高速化のために SKIP 属性を使わないでください。
これは結果の Makefile に深刻なダメージを与えることがあります。
本当に必要なときにだけ使ってください。

=item TYPEMAPS

=begin original

Ref to array of typemap file names.  Use this when the typemaps are
in some directory other than the current directory or when they are
not named B<typemap>.  The last typemap in the list takes
precedence.  A typemap in the current directory has highest
precedence, even if it isn't listed in TYPEMAPS.  The default system
typemap has lowest precedence.

=end original

typemap ファイル名の配列へのリファレンス。
typemaps が現在のディレクトリ以外のどこかのディレクトリにある場合や、
または名前付きの B<typemap> ではない場合に、これを使います。
リストの最後の typemap が優先されます。
TYPEMAPS に載っていなくても、カレントディレクトリにある typemap は
最大の優先順位を持ちます。
デフォルトシステムの typemap は最低の優先順位を持ちます。

=item VENDORPREFIX

=begin original

Like PERLPREFIX, but only for the vendor install locations.

=end original

PERLPREFIX と同様ですが、ベンターインストール場所専用です。

=begin original

Defaults to $Config{vendorprefixexp}.

=end original

デフォルトは $Config{vendorprefixexp}。

=begin original

Overridable by PREFIX

=end original

PREFIX で上書き可能。

=item VERBINST

=begin original

If true, make install will be verbose

=end original

真なら、make install は饒舌になります。

=item VERSION

=begin original

Your version number for distributing the package.  This defaults to
0.1.

=end original

配布するパッケージのバージョン番号。
デフォルトは 0.1。

=item VERSION_FROM

=begin original

Instead of specifying the VERSION in the Makefile.PL you can let
MakeMaker parse a file to determine the version number. The parsing
routine requires that the file named by VERSION_FROM contains one
single line to compute the version number. The first line in the file
that contains the regular expression

=end original

Makefile.PLでVERSIONを指定する代わりに、MakeMakerでファイルを解析してバージョン番号を判別できます。
解析ルーチンでは、VERSION_FROMという名前のファイルに、バージョン番号を計算するための1行が含まれている必要があります。
正規表現を含むファイルの最初の行
(TBR)

    /([\$*])(([\w\:\']*)\bVERSION)\b.*\=/

=begin original

will be evaluated with eval() and the value of the named variable
B<after> the eval() will be assigned to the VERSION attribute of the
MakeMaker object. The following lines will be parsed o.k.:

=end original

はeval()で評価され、eval()の<after>指定された変数Bの値がMakeMakerオブジェクトのVERSION属性に代入されます。
以下の行は解析されます。
(TBR)

    $VERSION   = '1.00';
    *VERSION   = \'1.01';
    ($VERSION) = q$Revision$ =~ /(\d+)/g;
    $FOO::VERSION = '1.10';
    *FOO::VERSION = \'1.11';

=begin original

but these will fail:

=end original

しかし次のものは失敗します:

    # Bad
    my $VERSION         = '1.01';
    local $VERSION      = '1.02';
    local $FOO::VERSION = '1.30';

=begin original

"Version strings" are incompatible should not be used.

=end original

「バージョン文字列」は互換性がなく、使うべきではありません。

    # Bad
    $VERSION = 1.2.3;
    $VERSION = v1.2.3;

=begin original

L<version> objects are fine.  As of MakeMaker 6.35 version.pm will be
automatically loaded, but you must declare the dependency on version.pm.
For compatibility with older MakeMaker you should load on the same line 
as $VERSION is declared.

=end original

L<version> objects are fine.  As of MakeMaker 6.35 version.pm will be
automatically loaded, but you must declare the dependency on version.pm.
For compatibility with older MakeMaker you should load on the same line 
as $VERSION is declared.
(TBT)

    # All on one line
    use version; our $VERSION = qv(1.2.3);

=begin original

(Putting C<my> or C<local> on the preceding line will work o.k.)

=end original

(C<my>またはC<local>を前の行に置くと動作します)。
(TBR)

=begin original

The file named in VERSION_FROM is not added as a dependency to
Makefile. This is not really correct, but it would be a major pain
during development to have to rewrite the Makefile for any smallish
change in that file. If you want to make sure that the Makefile
contains the correct VERSION macro after any change of the file, you
would have to do something like

=end original

VERSION_FROMで指定されたファイルは、Makefileへの依存関係として追加されません。
これは実際には正しくありませんが、そのファイル内の小さな変更に対してMakefileを書き直す必要があるのは、開発中の大きな苦痛です。
ファイルの変更後にMakefileに正しいVERSIONマクロが含まれていることを確認するには、次のようにする必要があります。
(TBR)

    depend => { Makefile => '$(VERSION_FROM)' }

=begin original

See attribute C<depend> below.

=end original

後述の属性C<depend>を参照してください。
(TBR)

=item VERSION_SYM

=begin original

A sanitized VERSION with . replaced by _.  For places where . has
special meaning (some filesystems, RCS labels, etc...)

=end original

が特別な意味を持つ場所(いくつかのファイルシステムやRCSラベルなど)に対して、.を_に置き換えたサニタイズされたVERSION。
(TBR)

=item XS

=begin original

Hashref of .xs files. MakeMaker will default this.  e.g.

=end original

.xs ファイルのハッシュリファレンス。
MakeMaker はこれをデフォルトにします。
例:

  {'name_of_file.xs' => 'name_of_file.c'}

=begin original

The .c files will automatically be included in the list of files
deleted by a make clean.

=end original

cファイルは、make cleanによって削除されるファイルのリストに自動的に含まれます。
(TBR)

=item XSOPT

=begin original

String of options to pass to xsubpp.  This might include C<-C++> or
C<-extern>.  Do not include typemaps here; the TYPEMAP parameter exists for
that purpose.

=end original

xsubpp に渡されるオプションの文字列。
これは C<-C++> や C<-extern> を含むかもしれません。
ここでは typemap を含めないでください;
この目的には TYPEMAP 属性があります。

=item XSPROTOARG

=begin original

May be set to an empty string, which is identical to C<-prototypes>, or
C<-noprototypes>. See the xsubpp documentation for details. MakeMaker
defaults to the empty string.

=end original

C<-prototypes>またはC<-noprototypes>と同じ空の文字列を設定できます。
詳細については、xsubppの文書を参照してください。
MakeMakerの既定値は空の文字列です。
(TBR)

=item XS_VERSION

=begin original

Your version number for the .xs file of this package.  This defaults
to the value of the VERSION attribute.

=end original

このパッケージの.xsファイルのバージョン番号。
デフォルトでは、VERSION属性の値です。
(TBR)

=back

=head2 Additional lowercase attributes

(追加の小文字の属性)

=begin original

can be used to pass parameters to the methods which implement that
part of the Makefile.  Parameters are specified as a hash ref but are
passed to the method as a hash.

=end original

これらは Makefile の部品を実装しているメソッドにパラメータを
渡すために使うことができます。
パラメータにはハッシュリファレンス
で指定しますがメソッドにはハッシュとして渡されます。

=over 2

=item clean

  {FILES => "*.xyz foo"}

=item depend

  {ANY_TARGET => ANY_DEPENDENCY, ...}

=begin original

(ANY_TARGET must not be given a double-colon rule by MakeMaker.)

=end original

(MakeMaker は ANY_TARGET をダブルコロンルールにしてはなりません。)

=item dist

  {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => '.gz',
  SHAR => 'shar -m', DIST_CP => 'ln', ZIP => '/bin/zip',
  ZIPFLAGS => '-rl', DIST_DEFAULT => 'private tardist' }

=begin original

If you specify COMPRESS, then SUFFIX should also be altered, as it is
needed to tell make the target file of the compression. Setting
DIST_CP to ln can be useful, if you need to preserve the timestamps on
your files. DIST_CP can take the values 'cp', which copies the file,
'ln', which links the file, and 'best' which copies symbolic links and
links the rest. Default is 'best'.

=end original

COMPRESS を設定しているのなら SUFFIX も設定しなければなりません。
make に圧縮対象を知らせるためです。
ファイルのタイムスタンプを保存する必要があるときには DIST_CP に ln を
設定すると便利です。
DIST_CP が 'cp' という値に指定されているときにはファイルをコピーし、
'ln' を指定されているときにはファイルをリンクします。
そして 'best' を指定するとシンボリックリンクであればコピーし、
それ以外はリンクします。
デフォルトは 'best' です。

=item dynamic_lib

  {ARMAYBE => 'ar', OTHERLDFLAGS => '...', INST_DYNAMIC_DEP => '...'}

=item linkext

  {LINKTYPE => 'static', 'dynamic' or ''}

=begin original

NB: Extensions that have nothing but *.pm files had to say

=end original

注意: *.pm ファイルしかない拡張は次のようにする必要があります

  {LINKTYPE => ''}

=begin original

with Pre-5.0 MakeMakers. Since version 5.00 of MakeMaker such a line
can be deleted safely. MakeMaker recognizes when there's nothing to
be linked.

=end original

(5.0 より前の MakeMakers の場合)。
バージョン 5.00 の MakeMaker からこのような行は安全に削除できます。
何もリンクしない場合は MakeMaker が認識します。

=item macro

  {ANY_MACRO => ANY_VALUE, ...}

=item postamble

=begin original

Anything put here will be passed to MY::postamble() if you have one.

=end original

MY::postamble()があれば、ここに置かれたものはすべてMY::postamble()に渡されます。
(TBR)

=item realclean

  {FILES => '$(INST_ARCHAUTODIR)/*.xyz'}

=item test

  {TESTS => 't/*.t'}

=item tool_autosplit

  {MAXLEN => 8}

=back

=head2 Overriding MakeMaker Methods

(メソッドのオーバーライド)

=begin original

If you cannot achieve the desired Makefile behaviour by specifying
attributes you may define private subroutines in the Makefile.PL.
Each subroutine returns the text it wishes to have written to
the Makefile. To override a section of the Makefile you can
either say:

=end original

属性を指定しても必要なMakefileの動作を実現できない場合は、Makefile.PLでプライベートサブルーチンを定義できます。
各サブルーチンは、Makefileに書き込むテキストを返します。
Makefileのセクションをオーバーライドするには、次のいずれかを実行します。
(TBR)

        sub MY::c_o { "new literal text" }

=begin original

or you can edit the default by saying something like:

=end original

または、次のように入力してデフォルトを編集できます。
(TBR)

        package MY; # so that "SUPER" works right
        sub c_o {
            my $inherited = shift->SUPER::c_o(@_);
            $inherited =~ s/old text/new text/;
            $inherited;
        }

=begin original

If you are running experiments with embedding perl as a library into
other applications, you might find MakeMaker is not sufficient. You'd
better have a look at ExtUtils::Embed which is a collection of utilities
for embedding.

=end original

perlをライブラリとして他のアプリケーションに埋め込む実験を行っている場合は、MakeMakerだけでは不十分であることがわかるかもしれません。
埋め込むためのユーティリティのコレクションであるExtUtils::Embedを参照してください。
(TBR)

=begin original

If you still need a different solution, try to develop another
subroutine that fits your needs and submit the diffs to
C<makemaker@perl.org>

=end original

それでも別のソリューションが必要な場合は、ニーズに合った別のサブルーチンを開発し、C<makemaker@perl.org>に差分を送信します。
(TBR)

=begin original

For a complete description of all MakeMaker methods see
L<ExtUtils::MM_Unix>.

=end original

すべてのMakeMakerメソッドの詳細については、L<ExtUtils::MM_Unix>を参照してください。
(TBR)

=begin original

Here is a simple example of how to add a new target to the generated
Makefile:

=end original

次に、生成されたMakefileに新しいターゲットを追加する簡単な例を示します。
(TBR)

    sub MY::postamble {
        return <<'MAKE_FRAG';
    $(MYEXTLIB): sdbm/Makefile
            cd sdbm && $(MAKE) all

    MAKE_FRAG
    }

=head2 The End Of Cargo Cult Programming

(カーゴカルトプログラミングとの決別)

=begin original

WriteMakefile() now does some basic sanity checks on its parameters to
protect against typos and malformatted values.  This means some things
which happened to work in the past will now throw warnings and
possibly produce internal errors.

=end original

WriteMakefile()は、タイプミスや誤ったフォーマットの値から保護するために、パラメータに対して基本的な健全性チェックを行うようになりました。
これは、過去にたまたま動作していたものが、警告を発し、内部エラーを生成する可能性があることを意味します。
(TBR)

=begin original

Some of the most common mistakes:

=end original

最もよくあるミスを挙げます:

=over 2

=item C<< MAN3PODS => ' ' >>

=begin original

This is commonly used to suppress the creation of man pages.  MAN3PODS
takes a hash ref not a string, but the above worked by accident in old
versions of MakeMaker.

=end original

これは man ページの作成を抑制するためによく使われます。
MAN3PODS は文字列ではなくハッシュリファレンスを取りますが、
前述のものも古いバージョンの MakeMaker では誤って動作していました。

=begin original

The correct code is C<< MAN3PODS => { } >>.

=end original

正しいコードは C<< MAN3PODS => { } >> です。

=back

=head2 Hintsfile support

(hints ファイルのサポート)

=begin original

MakeMaker.pm uses the architecture specific information from
Config.pm. In addition it evaluates architecture specific hints files
in a C<hints/> directory. The hints files are expected to be named
like their counterparts in C<PERL_SRC/hints>, but with an C<.pl> file
name extension (eg. C<next_3_2.pl>). They are simply C<eval>ed by
MakeMaker within the WriteMakefile() subroutine, and can be used to
execute commands as well as to include special variables. The rules
which hintsfile is chosen are the same as in Configure.

=end original

MakeMaker.pmは、Config.pmからのアーキテクチャ固有の情報を使用します。
さらに、C<hints/>ディレクトリ内のアーキテクチャ固有のヒントファイルを評価します。
ヒントファイルは、C<PERL_SRC/hints>の対応するファイルと同じ名前になりますが、C<.pl>ファイル名拡張子(C<next_3_2.pl>など)が付きます。
ヒントファイルは、WriteMakefile()サブルーチン内でMakeMakerによって単純にC<eval>化され、コマンドの実行や特別な変数の組み込みに使用できます。
hintsfileが選択されるルールは、[構成]と同じです。
(TBR)

=begin original

The hintsfile is eval()ed immediately after the arguments given to
WriteMakefile are stuffed into a hash reference $self but before this
reference becomes blessed. So if you want to do the equivalent to
override or create an attribute you would say something like

=end original

hintsfileは、WriteMakefileに与えられた引数がハッシュ参照$selfに詰め込まれた直後で、この参照が祝福される前にeval()されます。
したがって、同等の操作を行ってアトリビュートをオーバーライドまたは作成する場合は、次のように入力します。
(TBR)

    $self->{LIBS} = ['-ldbm -lucb -lc'];

=head2 Distribution Support

(配布のサポート)

=begin original

For authors of extensions MakeMaker provides several Makefile
targets. Most of the support comes from the ExtUtils::Manifest module,
where additional documentation can be found.

=end original

エクステンションの作者のために、MakeMaker はいくつかの Makefile ターゲットを
提供します。
サポートのほとんどは ExtUtils::Manifest モジュール由来で、
ここに追加の文書があります。

=over 4

=item    make distcheck

=begin original

reports which files are below the build directory but not in the
MANIFEST file and vice versa. (See ExtUtils::Manifest::fullcheck() for
details)

=end original

は、どのファイルがbuildディレクトリの下にあるがMANIFESTファイルにはないか、またはその逆かを報告します(詳細は、ExtUtils::Manifest::fullcheck()を参照)。
(TBR)

=item    make skipcheck

=begin original

reports which files are skipped due to the entries in the
C<MANIFEST.SKIP> file (See ExtUtils::Manifest::skipcheck() for
details)

=end original

C<MANIFEST.SKIP>ファイルのエントリによってスキップされたファイルを報告します(詳細は、ExtUtils::Manifest::skipcheck()を参照してください)。
(TBR)

=item    make distclean

=begin original

does a realclean first and then the distcheck. Note that this is not
needed to build a new distribution as long as you are sure that the
MANIFEST file is ok.

=end original

まずrealcleanをしてそれからdistcheckをしますMANIFESTファイルがOKであることを確信している限り、これは新しい配布物を構築するために必要ではないことに注意してください。
(TBR)

=item    make manifest

=begin original

rewrites the MANIFEST file, adding all remaining files found (See
ExtUtils::Manifest::mkmanifest() for details)

=end original

MANIFESTファイルを書き換え、見つかった残りのファイルをすべて追加します(詳細は、ExtUtils::Manifest::mkmanifest()を参照してください)。
(TBR)

=item    make distdir

=begin original

Copies all the files that are in the MANIFEST file to a newly created
directory with the name C<$(DISTNAME)-$(VERSION)>. If that directory
exists, it will be removed first.

=end original

MANIFESTファイル内のすべてのファイルを、C<$(DISTNAME)-$(VERSION)>という名前で新しく作成されたディレクトリにコピーします。
そのディレクトリが存在する場合は、最初に削除されます。
(TBR)

=begin original

Additionally, it will create a META.yml module meta-data file in the
distdir and add this to the distdir's MANIFEST.  You can shut this
behavior off with the NO_META flag.

=end original

さらに、distdir に META.yml モジュールメタデータファイルを作り、
これを distdir の MANIFEST に追加します。
この振る舞いは NO_META フラグで止められます。

=item   make disttest

=begin original

Makes a distdir first, and runs a C<perl Makefile.PL>, a make, and
a make test in that directory.

=end original

最初にdistdirを作成し、そのディレクトリでC<perl Makefile.PL>、make、およびmake testを実行します。
(TBR)

=item    make tardist

=begin original

First does a distdir. Then a command $(PREOP) which defaults to a null
command, followed by $(TO_UNIX), which defaults to a null command under
UNIX, and will convert files in distribution directory to UNIX format
otherwise. Next it runs C<tar> on that directory into a tarfile and
deletes the directory. Finishes with a command $(POSTOP) which
defaults to a null command.

=end original

最初に distdir を実行します。
次に、コマンド $(PREOP) を実行します; このデフォルトは null コマンドです;
引き続いて、UNIX ではデフォルトが null コマンドである
$(TO_UNIX) は、それ以外では配布ディレクトリ内のファイルを UNIX 形式に
変換します。
次に、そのディレクトリで C<tar> を実行して tar ファイルに変換し、
ディレクトリを削除します。
最後に、デフォルトが null コマンドである コマンド $(POSTOP) を実行します。

=item    make dist

=begin original

Defaults to $(DIST_DEFAULT) which in turn defaults to tardist.

=end original

デフォルトは$(DIST_DEFAULT)で、このデフォルトはtardistです。
(TBR)

=item    make uutardist

=begin original

Runs a tardist first and uuencodes the tarfile.

=end original

最初にtardistを実行し、tarfileをuuencodesします。
(TBR)

=item    make shdist

=begin original

First does a distdir. Then a command $(PREOP) which defaults to a null
command. Next it runs C<shar> on that directory into a sharfile and
deletes the intermediate directory again. Finishes with a command
$(POSTOP) which defaults to a null command.  Note: For shdist to work
properly a C<shar> program that can handle directories is mandatory.

=end original

最初にdistdirを実行します。
次に$(PREOP)コマンドを実行します。
このコマンドはデフォルトではNULLコマンドです。
次にそのディレクトリでC<shar>をsharfileに実行し、中間ディレクトリを再度削除します。
最後に$(POSTOP)コマンドを実行します。
このコマンドはデフォルトではNULLコマンドです。
注意:shdistが適切に動作するためには、ディレクトリを処理できるC<shar>プログラムが必須です。
(TBR)

=item    make zipdist

=begin original

First does a distdir. Then a command $(PREOP) which defaults to a null
command. Runs C<$(ZIP) $(ZIPFLAGS)> on that directory into a
zipfile. Then deletes that directory. Finishes with a command
$(POSTOP) which defaults to a null command.

=end original

最初にdistdirを実行します。
次に、コマンド$(PREOP)を実行します。
このコマンドのデフォルトはnullコマンドです。
そのディレクトリでC<$(ZIP) $(ZIPFLAGS)>をzipファイルに実行します。
その後、そのディレクトリを削除します。
最後に、コマンド$(POSTOP)を実行します。
このコマンドのデフォルトはnullコマンドです。
(TBR)

=item    make ci

=begin original

Does a $(CI) and a $(RCS_LABEL) on all files in the MANIFEST file.

=end original

MANIFESTファイル内のすべてのファイルに対して$(CI)および$(RCS_LABEL)を実行します。
(TBR)

=back

=begin original

Customization of the dist targets can be done by specifying a hash
reference to the dist attribute of the WriteMakefile call. The
following parameters are recognized:

=end original

distターゲットのカスタマイズは、WriteMakefile呼び出しのdist属性へのハッシュ参照を指定することによって実行できます。
次のパラメータが認識されます。
(TBR)

    CI           ('ci -u')
    COMPRESS     ('gzip --best')
    POSTOP       ('@ :')
    PREOP        ('@ :')
    TO_UNIX      (depends on the system)
    RCS_LABEL    ('rcs -q -Nv$(VERSION_SYM):')
    SHAR         ('shar')
    SUFFIX       ('.gz')
    TAR          ('tar')
    TARFLAGS     ('cvf')
    ZIP          ('zip')
    ZIPFLAGS     ('-r')

=begin original

An example:

=end original

例:

    WriteMakefile(
        ...other options...
        dist => {
            COMPRESS => "bzip2",
            SUFFIX   => ".bz2"
        }
    );

=head2 Module Meta-Data

(モジュールのメタデータ)

=begin original

Long plaguing users of MakeMaker based modules has been the problem of
getting basic information about the module out of the sources
I<without> running the F<Makefile.PL> and doing a bunch of messy
heuristics on the resulting F<Makefile>.  To this end a simple module
meta-data file has been introduced, F<META.yml>.

=end original

MakeMaker ベースのモジュールで長く苦しんでいるユーザーは、
F<Makefile.PL> を実行して、結果の F<Makefile> に対して大量の面倒な
ヒューリスティックを使うこと I<なしに> ソース外のモジュールに関する
基本情報を取得するのに問題を抱えていました。
これを終わらせるために、F<META.yml> という単純な
モジュールメタデータファイルが導入されました。

=begin original

F<META.yml> is a YAML document (see http://www.yaml.org) containing
basic information about the module (name, version, prerequisites...)
in an easy to read format.  The format is developed and defined by the
Module::Build developers (see 
http://module-build.sourceforge.net/META-spec.html)

=end original

F<META.yml> は、モジュールに関する基本的な情報
(名前、バージョン、必須条件…) を読みやすい形式で記録した YAML 文書
(http://www.yaml.org 参照) です。
この型式は Module::Build 開発者によって開発と定義がされています
(http://module-build.sourceforge.net/META-spec.html を参照してください)

=begin original

MakeMaker will automatically generate a F<META.yml> file for you and
add it to your F<MANIFEST> as part of the 'distdir' target (and thus
the 'dist' target).  This is intended to seamlessly and rapidly
populate CPAN with module meta-data.  If you wish to shut this feature
off, set the C<NO_META> C<WriteMakefile()> flag to true.

=end original

MakeMaker は自動的に F<META.yml> を生成し、これを
'distdir' ターゲット (従って 'dist' ターゲット) の一部として
F<MANIFEST> に追加します。
これはシームレスになることを意図していて、モジュールメタデータとして
CPAN で 急速に伝搬しています。
この機能をオフにしたい場合、C<NO_META> C<WriteMakefile()> フラグを
設定してください。

=head2 Disabling an extension

(拡張の無効化)

=begin original

If some events detected in F<Makefile.PL> imply that there is no way
to create the Module, but this is a normal state of things, then you
can create a F<Makefile> which does nothing, but succeeds on all the
"usual" build targets.  To do so, use

=end original

F<Makefile.PL>で検出されたいくつかのイベントが、モジュールを作成する方法がないことを意味しているが、これが通常の状態である場合は、何も実行しないが、すべての「通常の」ビルドターゲットで成功するF<Makefile>を作成できます。
これを行うには
(TBR)

    use ExtUtils::MakeMaker qw(WriteEmptyMakefile);
    WriteEmptyMakefile();

=begin original

instead of WriteMakefile().

=end original

WriteMakefile() の代わりに使います。

=begin original

This may be useful if other modules expect this module to be I<built>
OK, as opposed to I<work> OK (say, this system-dependent module builds
in a subdirectory of some other distribution, or is listed as a
dependency in a CPAN::Bundle, but the functionality is supported by
different means on the current architecture).

=end original

これは、他のモジュールがこのモジュールがI<work>OKではなくI<built>OKであることを期待する場合に有用である(例えば、このシステム依存モジュールは、他のディストリビューションのサブディレクトリに構築されるか、またはCPAN::Bundleに依存関係としてリストされるが、機能は現在のアーキテクチャでは別の方法でサポートされる)。
(TBR)

=head2 Other Handy Functions

(その他の便利な関数)

=over 4

=item prompt

    my $value = prompt($message);
    my $value = prompt($message, $default);

=begin original

The C<prompt()> function provides an easy way to request user input
used to write a makefile.  It displays the $message as a prompt for
input.  If a $default is provided it will be used as a default.  The
function returns the $value selected by the user.

=end original

C<prompt()> 関数は、makefile を書くのに使われるユーザー入力を
要求する簡単な方法を提供します。
これは入力のプロンプトとして $message を表示します。
$default が指定されると、デフォルトとして使われます。
関数はユーザーによって選択された $value を返します。

=begin original

If C<prompt()> detects that it is not running interactively and there
is nothing on STDIN or if the PERL_MM_USE_DEFAULT environment variable
is set to true, the $default will be used without prompting.  This
prevents automated processes from blocking on user input. 

=end original

対話的に実行されておらず STDIN になにもないことを
C<prompt()> が検出するか、
PERL_MM_USE_DEFAULT 環境変数が真に設定されると、
プロンプトを出さずに $default が使われます。
これにより自動化プロセスがユーザー入力でブロックされることを防ぎます。

=begin original

If no $default is provided an empty string will be used instead.

=end original

$default が指定されなかった場合、代わりに空文字列が使われます。

=back

=head1 ENVIRONMENT

(環境変数)

=over 4

=item PERL_MM_OPT

=begin original

Command line options used by C<MakeMaker-E<gt>new()>, and thus by
C<WriteMakefile()>.  The string is split on whitespace, and the result
is processed before any actual command line arguments are processed.

=end original

C<MakeMaker-E<gt>new()> で使われ、従って C<WriteMakefile()> で使われる
コマンドラインオプション。
この文字列は空白で区切られ、その結果は実際のコマンドライン引数を処理する前に
処理されます。

=item PERL_MM_USE_DEFAULT

=begin original

If set to a true value then MakeMaker's prompt function will
always return the default without waiting for user input.

=end original

これを真の値に設定すると、MakeMaker のプロンプト関数はユーザー入力を
待つことなくデフォルトでリターンします。

=item PERL_CORE

=begin original

Same as the PERL_CORE parameter.  The parameter overrides this.

=end original

PERL_CORE パラメータと同じです。
パラメータはこれを上書きします。

=back

=head1 SEE ALSO

L<Module::Build> is a pure-Perl alternative to MakeMaker which does
not rely on make or any other external utility.  It is easier to
extend to suit your needs.

L<Module::Install> is a wrapper around MakeMaker which adds features
not normally available.

L<ExtUtils::ModuleMaker> and L<Module::Starter> are both modules to
help you setup your distribution.

=head1 AUTHORS

Andy Dougherty C<doughera@lafayette.edu>, Andreas KE<ouml>nig
C<andreas.koenig@mind.de>, Tim Bunce C<timb@cpan.org>.  VMS
support by Charles Bailey C<bailey@newman.upenn.edu>.  OS/2 support
by Ilya Zakharevich C<ilya@math.ohio-state.edu>.

Currently maintained by Michael G Schwern C<schwern@pobox.com>

Send patches and ideas to C<makemaker@perl.org>.
Send bug reports via http://rt.cpan.org/.  Please send your
generated Makefile along with your report.

For more up-to-date information, see L<http://www.makemaker.org>.

=head1 LICENSE

This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=begin meta

Translate: 山科 氷魚 (YAMASHINA Hio) <hio@hio.jp> (6.16)
Update: SHIRAKATA Kentaro <argrath@ub32.org> (6.17-)
Status: in progress

=end meta

