=encoding utf8

=head1 名前

DBIx::Class::Manual::Intro - DBIx::Class イントロダクション

=head1 イントロダクション

=begin original

You're bored with SQL, and want a native Perl interface for your database?  Or
you've been doing this for a while with L<Class::DBI>, and think there's a
better way?  You've come to the right place.

=end original

で、SQLにうんざりしてません？データベース用に自然なPerlのインターフェースが欲しくない？
もしくは、しばらくL<Class::DBI>で、それをしていたけど、もっと良いやりかたがあると思わなかった？
良いところに来ましたね。

=head1 THE DBIx::Class WAY

=begin original

Here are a few simple tips that will help you get your bearings 
with DBIx::Class.  

=end original

ここにはDBIx::Classに慣れる助けになる、いくつかのTipsがあります。

=head2 テーブルはResult Class になる

=begin original

DBIx::Class needs to know what your Table structure looks like.  You
do that by defining Result classes. Result classes are defined by
calling methods proxied to L<DBIx::Class::ResultSource>.  Each Result
class defines one Table, which defines the Columns it has, along with
any Relationships it has to other tables.  (And oh, so much more
besides) The important thing to understand:

=end original

DBIx::Class は、対象となるテーブルの構造がどんなものなのかを知っている必要があります。
そのために、Result Classを定義します。Result Class はL<DBIx::Class::ResultSource> を
経由することで定義されます。それぞれのResult Class に一つのテーブルがあり、そのカラムを
定義します。一緒に他のテーブルとのすべてのリレーションを定義します。
(そして、ああ、それ以上に、)理解しなればいけない、重要なことは:

  A Result class == Table

=begin original

(most of the time, but just bear with my simplification)

=end original

(ほとんど常に、ですが、この単純化に我慢してください)

=head2 ResultSetについての全て

=begin original

So, we've got some ResultSources defined.  Now, we want to actually use those
definitions to help us translate the queries we need into handy perl objects!

=end original

ResultSources を定義したら、今度はそれらの定義を、
手軽な perl オブジェクトに必要なクエリを変換するために、実際に使いたいと思います!

=begin original

Let's say we defined a ResultSource for an "album" table with three columns:
"albumid", "artist", and "title".  Any time we want to query this table, we'll
be creating a L<DBIx::Class::ResultSet> from its ResultSource.  For example, the
results of:

=end original

"alubum" テーブルのResultSource を定義します。テーブルには３つのカラムがあります:
"albumid", "artist", "title" です。 このテーブルにクエリを投げたいなら、
ResultSource からL<DBIx::Class::ResultSet>を作ります。例えば、結果は:

  SELECT albumid, artist, title FROM album;

=begin original

Would be retrieved by creating a ResultSet object from the album table's
ResultSource, likely by using the "search" method.

=end original

album テーブル から ResultSet オブジェクトを作るために、テーブルのResultSource
から引いてきます。おそらく"search" メソッドを使います。

=begin original

DBIx::Class doesn't limit you to creating only simple ResultSets -- if you
wanted to do something like:

=end original

DBIx::Class は単純なResultSet を作るだけには留まりません。 -- もし次のようなものが
欲しいなら:

  SELECT title FROM album GROUP BY title;

=begin original

You could easily achieve it.

=end original

簡単にできます。

=begin original

The important thing to understand:

=end original

理解すべき重要なことは

=begin original

  Any time you would reach for a SQL query in DBI, you are
  creating a DBIx::Class::ResultSet.

=end original

   DBIでSQLクエリを取ろうとするときはいつでも、
   DBIx::Class::ResultSetを作っています。

=head2 Search は "prepare"のようなもの

=begin original

DBIx::Class tends to wait until it absolutely must fetch information from the
database.  If you are returning a ResultSet, the query won't execute until you
use a method that wants to access the data. (Such as "next", or "first")

=end original

DBIx::Classがデータベースから絶対に情報を取得しなければならない時まで、
DBIx::Classは待つ傾向があります。ResultSetを返しても、クエリはデータに
アクセスするメソッド("next"や"first"のような)を使うまで実行されません。

=begin original

The important thing to understand:

=end original

わかっておくべき重要なことは:

=begin original

  Setting up a ResultSet does not execute the query; retrieving
  the data does.

=end original

  ResultSetのセットアップはクエリを実行しません; データの取得によって
  クエリが実行されます。

=head2 Search results are returned as Rows

=begin original

Rows of the search from the database are blessed into
L<DBIx::Class::Row> objects.

=end original

データベースからの検索の行は、bless されてL<DBIx::Class::Row>オブジェクトになります。

=head1 DBIx::Classのセットアップ


Let's look at how you can set and use your first native L<DBIx::Class>
tree.

まず最初にネイティブのL<DBIx::Class>ツリーをどのようにセットし、使うのかを見ましょう。

=begin original

First we'll see how you can set up your classes yourself.  If you want them to
be auto-discovered, just skip to the next section, which shows you how to use
L<DBIx::Class::Schema::Loader>.

=end original

最初に、自分でクラスをセットアップする方法を見ますが、クラスを自動で見付けたい場合は、
その次のセクションまでスキップしてください、その次のセクションでは、L<DBIx::Class::Schema::Loader>
を使った方法を説明します。

=head2 手でセットアップする

=begin original

First, you should create your base schema class, which inherits from
L<DBIx::Class::Schema>:

=end original

まず、基本のスキーマクラスを作るべきです。L<DBIx::Class::Schema>から継承します:

  package My::Schema;
  use base qw/DBIx::Class::Schema/;

=begin original

In this class you load your result_source ("table", "model") classes, which we
will define later, using the load_namespaces() method:

=end original

このクラスには、result_source ("table", "model") クラス(後で定義します)をロードします。
load_namespaces() メソッドを使います:

  # load My::Schema::Result::* and their resultset classes
  __PACKAGE__->load_namespaces();

=begin original

By default this loads all the Result (Row) classes in the
My::Schema::Result:: namespace, and also any resultset classes in the
My::Schema::ResultSet:: namespace (if missing, the resultsets are
defaulted to be DBIx::Class::ResultSet objects). You can change the
result and resultset namespaces by using options to the
L<DBIx::Class::Schema/load_namespaces> call.

=end original

デフォルトでは、My::Schema::Result:: 名前空間に全てのResult(Row)クラス
、My::Schema::ResultSet:: 名前空間のすべての結果セットクラスがロードされます。
(if missing, the resultsets are
defaulted to be DBIx::Class::ResultSet objects). You can change the
result and resultset namespaces by using options to the
L<DBIx::Class::Schema/load_namespaces> call.

=begin original

It is also possible to do the same things manually by calling
C<load_classes> for the Row classes and defining in those classes any
required resultset classes.

=end original

Row クラスのためにC<load_classes>を呼ぶことと、
それらのクラスで全ての必要な結果セットクラスを定義することで、
手で同じことができます。

=begin original

Next, create each of the classes you want to load as specified above:

=end original

次に、上で指定した、ロードしたいクラスをそれぞれ作ります:

  package My::Schema::Result::Album;
  use base qw/DBIx::Class::Core/;

=begin original

Load any additional components you may need with the load_components() method,
and provide component configuration if required. For example, if you want
automatic row ordering:

=end original

それぞれのクラスに必要な追加のコンポーネントを load_components() メソッドでロードします。
必要ならコンポーネントの設定を与えます。例えば、自動的な行の並びかえなら:

  __PACKAGE__->load_components(qw/ Ordered /);
  __PACKAGE__->position_column('rank');

=begin original

Ordered will refer to a field called 'position' unless otherwise directed.  Here you are defining
the ordering field to be named 'rank'.  (NOTE: Insert errors may occur if you use the Ordered 
component, but have not defined a position column or have a 'position' field in your row.)

=end original

並びかえは、他のものが指示されなければ、'position' と呼ばれるフィールドを参照します。
ここでは、'rank' という名前のフィールドを並びかえに定義しています。
 (注意: 並びかえされたコンポーネントを使っているのに、position カラムを定義していないか、
'position' フィールドが列になければ、挿入エラーが起きるでしょう。) 

=begin original

Set the table for your class:

=end original

クラスにテーブルをセットします:

  __PACKAGE__->table('album');

=begin original

Add columns to your class:

=end original

クラスにカラムを追加します:


  __PACKAGE__->add_columns(qw/ albumid artist title rank /);

=begin original

Each column can also be set up with its own accessor, data_type and other pieces
of information that it may be useful to have -- just pass C<add_columns> a hash:

=end original

それぞれのカラムは、それ自身のアクセサや、あったほうが便利な、data_type や他の情報も
C<add_columns>に次のようなハッシュを渡します:

  __PACKAGE__->add_columns(albumid =>
                            { accessor  => 'album',
                              data_type => 'integer',
                              size      => 16,
                              is_nullable => 0,
                              is_auto_increment => 1,
                              default_value => '',
                            },
                          artist =>
                            { data_type => 'integer',
                              size      => 16,
                              is_nullable => 0,
                              is_auto_increment => 0,
                              default_value => '',
                            },
                          title  =>
                            { data_type => 'varchar',
                              size      => 256,
                              is_nullable => 0,
                              is_auto_increment => 0,
                              default_value => '',
                            },
                          rank =>
                            { data_type => 'integer',
                              size      => 16,
                              is_nullable => 0,
                              is_auto_increment => 0,
                              default_value => '',
                            }
                         );

=begin original

DBIx::Class doesn't directly use most of this data yet, but various related
modules such as L<DBIx::Class::WebForm> make use of it. Also it allows you to
create your database tables from your Schema, instead of the other way around.
See L<DBIx::Class::Schema/deploy> for details.

=end original

このデータのほとんどは、まだ、DBIx::Classで直接に使われません。ですが、
L<DBIx::Class::WebForm>のような、関連する様々なモジュールがそれを使います。
また、他のやりかたの代わりに、スキーマからデータベースを作ることもできます。
詳しくはL<SQL::Translator>を見てください:

=begin original

See L<DBIx::Class::ResultSource> for more details of the possible column
attributes.

=end original

可能なカラムの属性の詳細については、 L<DBIx::Class::ResultSource>を見てください。

=begin original

Accessors are created for each column automatically, so My::Schema::Result::Album will
have albumid() (or album(), when using the accessor), artist() and title()
methods.

=end original

アクセサはそれぞれのカラム用に、自動的に作られます。
My::Schema::Result::Albumは、albumid() (または、アクセサを使ったら、album())、artist()、title() 
のメソッドが使えます。

=begin original

Define a primary key for your class:

=end original

クラスにプライマリキーを定義するなら:

  __PACKAGE__->set_primary_key('albumid');

=begin original

If you have a multi-column primary key, just pass a list instead:

=end original

複数カラムのプライマリキーがあるなら、代わりに、リストを渡してください:

  __PACKAGE__->set_primary_key( qw/ albumid artistid / );

=begin original

Define this class' relationships with other classes using either C<belongs_to>
to describe a column which contains an ID of another Table, or C<has_many> to
make a predefined accessor for fetching objects that contain this Table's
foreign key:

=end original

C<belongs_to>を使って、他のテーブルのIDを含むカラムを説明することで、
クラスがのリレーションシップを定義することが出来ます。 また、C<has_many>で、
カラムの1つに、このテーブルの外部キーを含むオブジェクトを取得する
定義済みのアクセサを作れます。

  # in My::Schema::Result::Artist
  __PACKAGE__->has_many('albums', 'My::Schema::Result::Album', 'artist');

=begin original

See L<DBIx::Class::Relationship> for more information about the various types of
available relationships and how you can design your own.

=end original

様々なタイプの可能なリレーションシップについてと、自分自身のリレーションシップ
を設計する方法についての詳しい情報は、L<DBIx::Class::Relationship>にあります。

=head2 L<DBIx::Class::Schema::Loader>を使う

=begin original

This is an external module, and not part of the L<DBIx::Class> distribution.
It inspects your database, and automatically creates classes for all the tables
in your database.

=end original

これは外部のモジュールであり、L<DBIx::Class>のディストリビューション一部ではありません。
データベース内の全てのテーブル用のクラスを自動的に作ります。

=begin original

The simplest way to use it is via the L<dbicdump> script from the
L<DBIx::Class::Schema::Loader> distribution. For example:

=end original

最も単純な方法はL<dbicdump> スクリプトをL<DBIx::Class::Schema::Loader> ディストリビューション
から使うことです。例:

    $ dbicdump -o dump_directory=./lib MyApp::Schema dbi:mysql:mydb user pass

=begin original

If you have a mixed-case database, use the C<preserve_case> option, e.g.:

=end original

大文字、小文字混在のデータベースなら、C<preserve_case>オプションを使います:

    $ dbicdump -o dump_directory=./lib -o preserve_case=1 MyApp::Schema \
        dbi:mysql:mydb user pass

=begin original

If you are using L<Catalyst>, then you can use the helper that comes with
L<Catalyst::Model::DBIC::Schema>:

=end original

L<Catalyst>を使っているなら、L<Catalyst::Model::DBIC::Schema>にある、
ヘルパーを使えます。

    $ script/myapp_create.pl model MyDB DBIC::Schema MyDB::Schema \
        create=static moniker_map='{ foo => "FOO" }' dbi:SQLite:./myapp.db \
        on_connect_do='PRAGMA foreign_keys=ON' quote_char='"'

=begin original

See L<Catalyst::Helper::Model::DBIC::Schema> for more information on this
helper.

=end original

このヘルパーについてのより詳しい情報は、L<Catalyst::Helper::Model::DBIC::Schema>を
見てください。

=begin original

See the L<DBIx::Class::Schema::Loader> and L<DBIx::Class::Schema::Loader::Base>
documentation for more information on the many loader options.

=end original

L<DBIx::Class::Schema::Loader>と L<DBIx::Class::Schema::Loader::Base>
のドキュメントを見てください。たくさんの他のオプションに関する情報があります。

=head2 接続

=begin original

To connect to your Schema, you need to provide the connection details or a
database handle.

=end original

スキーマに接続するためには、接続のための詳細情報か、データーベースハンドルを提供しなければいけません。

=head3 接続のための詳細情報で

=begin original

The arguments are the same as for L<DBI/connect>:

=end original

引数は、L<DBI/connect>と同じです:

  my $schema = My::Schema->connect('dbi:SQLite:/home/me/myapp/my.db');

=begin original

You can create as many different schema instances as you need. So if you have a
second database you want to access:

=end original

必要に応じて、多くの違ったスキーマインスタンスを作ることが出来ます。
2つ目のデータベースがあり、アクセスしたいなら:

  my $other_schema = My::Schema->connect( $dsn, $user, $password, $attrs );

=begin original

Note that L<DBIx::Class::Schema> does not cache connections for you. If you use
multiple connections, you need to do this manually.

=end original

L<DBIx::Class::Schema>は接続をキャッシュしないことに注意してください。
複数のコネクションを使うなら、手でしなければなりません。

=begin original

To execute some SQL statements on every connect you can add them as an option in
a special fifth argument to connect:

=end original

接続毎に、いくつかのsql文実行したいなら、connectの特別な5版目の引数に
オプションとしてとして追加できます:

  my $another_schema = My::Schema->connect(
      $dsn,
      $user,
      $password,
      $attrs,
      { on_connect_do => \@on_connect_sql_statments }
  );

=begin original

See L<DBIx::Class::Storage::DBI/connect_info> for more information about
this and other special C<connect>-time options.

=end original

この特別なC<connect>-時の他のオプションについて詳しくは、
L<DBIx::Class::Storage::DBI/connect_info>を見てください。

=head3 データベースハンドルで

=begin original

The supplied coderef is expected to return a single connected database handle
(e.g. a L<DBI> C<$dbh>)

=end original

与えられたコードリファレンスは一つの接続されたデータベースハンドルを返すことが期待されます。
(e.g. L<DBI> C<$dbh>)

  my $schema = My::Schema->connect (
    sub { Some::DBH::Factory->connect },
    \%extra_attrs,
  );

=head2 基本の使い方

=begin original

Once you've defined the basic classes, either manually or using
L<DBIx::Class::Schema::Loader>, you can start interacting with your database.

=end original

基本のクラスを定義したら、手でも、 L<DBIx::Class::Schema::Loader>でも、
データベースへの連携を始められます。

=begin original

To access your database using your $schema object, you can fetch a
L<DBIx::Class::Manual::Glossary/"ResultSet"> representing each of your tables by
calling the C<resultset> method.

=end original

$schemaオブジェクトでデータベースにアクセスするのに、
C<resultset>メソッドを呼び出すことで、それぞれのテーブルを表す、
L<DBIx::Class::Manual::Glossary/"ResultSet">を取ります。

=begin original

The simplest way to get a record is by primary key:

=end original

レコードを取るもっとも簡単な方法は、プライマリーキーで取る方法です:

  my $album = $schema->resultset('Album')->find(14);

=begin original

This will run a C<SELECT> with C<albumid = 14> in the C<WHERE> clause, and
return an instance of C<My::Schema::Result::Album> that represents this row.  Once you
have that row, you can access and update columns:

=end original

C<WHERE>節にC<albumid=4>で、C<SELECT>が実行され、その列を表す
C<My::Schema::Album>のインスタンスを返します。
その列があれば、カラムにアクセスでき、アップデートできます。

  $album->title('Physical Graffiti');
  my $title = $album->title; # $title holds 'Physical Graffiti'

=begin original

If you prefer, you can use the C<set_column> and C<get_column> accessors
instead:

=end original

お好みなら、C<set_column>とC<get_column>のアクセサを代わりに使えます:

  $album->set_column('title', 'Presence');
  $title = $album->get_column('title');

=begin original

Just like with L<Class::DBI>, you call C<update> to save your changes to the
database (by executing the actual C<UPDATE> statement):

=end original

ちょうどL<Class::DBI>と同じように、C<update>を呼んで、
変更をデータベースにコミットできます:

  $album->update;

=begin original

If needed, you can throw away your local changes:

=end original

必要なら、次のようにして、ローカルの変更を捨てることもできます:

  $album->discard_changes if $album->is_changed;

As you can see, C<is_changed> allows you to check if there are local changes to
your object.

御覧の通り、C<is_changed>でオブジェクトにローカルの変更が加えられたか
どうかをチェックできます。

=head2 列の追加及び削除

=begin original

To create a new record in the database, you can use the C<create> method.  It
returns an instance of C<My::Schema::Result::Album> that can be used to access the data
in the new record:

=end original

データベースに新しいレコードを作るためには、C<create>メソッドを使います。
C<My::Schema::Result::Album>のインスタンスを返し、新しいレコードのデータにアクセスするのに
使えます:

  my $new_album = $schema->resultset('Album')->create({
    title  => 'Wish You Were Here',
    artist => 'Pink Floyd'
  });

=begin original

Now you can add data to the new record:

=end original

さぁ、新しいレコードにデータを追加できます:

  $new_album->label('Capitol');
  $new_album->year('1975');
  $new_album->update;

=begin original

Likewise, you can remove it from the database:

=end original

同様に、次のようにして、データベースからそれを削除できます:

  $new_album->delete;

=begin original

You can also remove records without retrieving them first, by calling delete
directly on a ResultSet object.

=end original

最初にレコードを取ってこずに削除することもできます。
ResultSetオブジェクトで直接にdeleteを呼びます。

  # Delete all of Falco's albums
  $schema->resultset('Album')->search({ artist => 'Falco' })->delete;

=head2 オブジェクトを探す

=begin original

L<DBIx::Class> provides a few different ways to retrieve data from your
database.  Here's one example:

=end original

L<DBIx::Class>は、データベースからデータを取得するのに、いくつかの
違った方法を提供しています。1つの例として:

  # Find all of Santana's albums
  my $rs = $schema->resultset('Album')->search({ artist => 'Santana' });

=begin original

In scalar context, as above, C<search> returns a L<DBIx::Class::ResultSet>
object.  It can be used to peek at the first album returned by the database:

=end original

スカラコンテキストでは、C<search>は、L<DBIx::Class::ResultSet>オブジェクト
を返します。データベースから返された最初のアルバムを覗くのに使えます:

  my $album = $rs->first;
  print $album->title;

=begin original

You can loop over the albums and update each one:

=end original

アルバムをループして、それぞれをアップデートできます:

  while (my $album = $rs->next) {
    print $album->artist . ' - ' . $album->title;
    $album->year(2001);
    $album->update;
  }

=begin original

Or, you can update them all at once:

=end original

もしくは、一度に全てをアップデートできます:

  $rs->update({ year => 2001 });

=begin original

In list context, the C<search> method returns all of the matching rows:

=end original

リストコンテキストでは、C<search>メソッドはマッチした列全てを返します:

  # Fetch immediately all of Carlos Santana's albums
  my @albums = $schema->resultset('Album')->search(
    { artist => 'Carlos Santana' }
  );
  foreach my $album (@albums) {
    print $album->artist . ' - ' . $album->title;
  }

=begin original

We also provide a handy shortcut for doing a C<LIKE> search:

=end original

C<LIKE>検索のための、手軽なショートカットもあります:

  # Find albums whose artist starts with 'Jimi'
  my $rs = $schema->resultset('Album')->search_like({ artist => 'Jimi%' });

=begin original

Or you can provide your own C<WHERE> clause:

=end original

もしくは、次のように、自分自身のC<WHERE>節を渡せます:

  # Find Peter Frampton albums from the year 1986
  my $where = 'artist = ? AND year = ?';
  my @bind  = ( 'Peter Frampton', 1986 );
  my $rs    = $schema->resultset('Album')->search_literal( $where, @bind );

=begin original

The preferred way to generate complex queries is to provide a L<SQL::Abstract>
construct to C<search>:

=end original

複雑なクエリを生成する好ましい方法は、L<SQL::Abstract>の構造を
C<search>に渡すことです:

  my $rs = $schema->resultset('Album')->search({
    artist  => { '!=', 'Janis Joplin' },
    year    => { '<' => 1980 },
    albumid => { '-in' => [ 1, 14, 15, 65, 43 ] }
  });

=begin original

This results in something like the following C<WHERE> clause:

=end original

結果は、下記のC<WHERE>節と同様です:

  WHERE artist != 'Janis Joplin'
    AND year < 1980
    AND albumid IN (1, 14, 15, 65, 43)

=begin original

For more examples of complex queries, see L<DBIx::Class::Manual::Cookbook>.

=end original

複雑なクエリの他の例はL<DBIx::Class::Manual::Cookbook>にあります。

=begin original

The search can also be modified by passing another hash with
attributes:

=end original

属性に他のハッシュを渡すことで、search を修正できます:

  my @albums = My::Schema->resultset('Album')->search(
    { artist => 'Bob Marley' },
    { rows => 2, order_by => 'year DESC' }
  );

=begin original

C<@albums> then holds the two most recent Bob Marley albums.

=end original

C<@albumns> には、最新のBob Marleyのアルバム2つがあります。

=begin original

For more information on what you can do with a L<DBIx::Class::ResultSet>, see
L<DBIx::Class::ResultSet/METHODS>.

=end original

L<DBIx::Class::ResultSet>で何が出来るかについてのより詳しい情報は、
L<DBIx::Class::ResultSet/METHODS>を見てください。

For a complete overview of the available attributes, see
L<DBIx::Class::ResultSet/ATTRIBUTES>.

使える属性の完全な概観は、L<DBIx::Class::ResultSet/ATTRIBUTES>を見てください

=head1 注意

=head2 プライマリーキーの意義と重要性

The concept of a L<primary key|DBIx::Class::ResultSource/set_primary_key> in
DBIx::Class warrants special discussion. The formal definition (which somewhat
resembles that of a classic RDBMS) is I<a unique constraint that is least
likely to change after initial row creation>. However this is where the
similarity ends. Any time you call a CRUD operation on a row (e.g.
L<delete|DBIx::Class::Row/delete>,
L<update|DBIx::Class::Row/update>,
L<discard_changes|DBIx::Class::Row/discard_changes>,
etc.) DBIx::Class will use the values of of the
L<primary key|DBIx::Class::ResultSource/set_primary_key> columns to populate
the C<WHERE> clause necessary to accomplish the operation. This is why it is
important to declare a L<primary key|DBIx::Class::ResultSource/set_primary_key>
on all your result sources B<even if the underlying RDBMS does not have one>.
In a pinch one can always declare each row identifiable by all its columns:

 __PACKAGE__->set_primary_keys (__PACKAGE__->columns);

Note that DBIx::Class is smart enough to store a copy of the PK values before
any row-object changes take place, so even if you change the values of PK
columns the C<WHERE> clause will remain correct.

If you elect not to declare a C<primary key>, DBIx::Class will behave correctly
by throwing exceptions on any row operation that relies on unique identifiable
rows. If you inherited datasets with multiple identical rows in them, you can
still operate with such sets provided you only utilize
L<DBIx::Class::ResultSet> CRUD methods:
L<search|DBIx::Class::ResultSet/search>,
L<update|DBIx::Class::ResultSet/update>,
L<delete|DBIx::Class::ResultSet/delete>

For example, the following would not work (assuming C<People> does not have
a declared PK):

 my $row = $schema->resultset('People')
                   ->search({ last_name => 'Dantes' })
                    ->next;
 $row->update({ children => 2 }); # <-- exception thrown because $row isn't
                                  # necessarily unique

So instead the following should be done:

 $schema->resultset('People')
         ->search({ last_name => 'Dantes' })
          ->update({ children => 2 }); # <-- update's ALL Dantes to have children of 2

=head2 Problems on RHEL5/CentOS5

There used to be an issue with the system perl on Red Hat Enterprise
Linux 5, some versions of Fedora and derived systems. Further
information on this can be found in L<DBIx::Class::Manual::Troubleshooting>

=head1 SEE ALSO

=over 4

=item * L<DBIx::Class::Manual::Cookbook>

=back

=head1 翻訳について

翻訳者：加藤敦 (ktat.is at gmail.com)

Perlドキュメント日本語訳 Project にて、
Perlモジュール、ドキュメントの翻訳を行っております。

 http://perldocjp.sourceforge.jp/
 http://sourceforge.jp/projects/perldocjp/
 http://www.freeml.com/perldocjp/
 http://www.perldoc.jp

=cut
