
=encoding euc-jp

=head1 NAME

=begin original

Scalar::Util - A selection of general-utility scalar subroutines

=end original

Scalar::Util - 一般的に有用なスカラサブルーチン集

=head1 SYNOPSIS

    use Scalar::Util qw(blessed dualvar isweak readonly refaddr reftype tainted
                        weaken isvstring looks_like_number set_prototype);
                        # and other useful utils appearing below

=head1 DESCRIPTION

=begin original

C<Scalar::Util> contains a selection of subroutines that people have
expressed would be nice to have in the perl core, but the usage would
not really be high enough to warrant the use of a keyword, and the size
so small such that being individual extensions would be wasteful.

=end original

C<Scalar::Util> は、人々が perl コアにあればいいのにと表明するけれども、
キーワードの使用を保証し、独立した拡張にするのが無駄なほどサイズが小さい、と
いうほど実際の使用頻度が高くないサブルーチン集です。

=begin original

By default C<Scalar::Util> does not export any subroutines. The
subroutines defined are

=end original

デフォルトでは C<Scalar::Util> は何のサブルーチンもエクスポートしません。
定義されているサブルーチンは:

=over 4

=item blessed EXPR

=begin original

If EXPR evaluates to a blessed reference the name of the package
that it is blessed into is returned. Otherwise C<undef> is returned.

=end original

EXPR が bless されたリファレンスに評価される場合、
bless されたパッケージの名前を返します。
さもなければ C<undef> が返されます。

   $scalar = "foo";
   $class  = blessed $scalar;           # undef

   $ref    = [];
   $class  = blessed $ref;              # undef

   $obj    = bless [], "Foo";
   $class  = blessed $obj;              # "Foo"

=item dualvar NUM, STRING

=begin original

Returns a scalar that has the value NUM in a numeric context and the
value STRING in a string context.

=end original

数値コンテキストでは値 NUM を、文字列コンテキストでは値 STRING を持つ
スカラを返します。

    $foo = dualvar 10, "Hello";
    $num = $foo + 2;                    # 12
    $str = $foo . " world";             # Hello world

=item isvstring EXPR

=begin original

If EXPR is a scalar which was coded as a vstring the result is true.

=end original

EXPR が v 文字列としてコード化されているスカラなら、結果は真です。

    $vs   = v49.46.48;
    $fmt  = isvstring($vs) ? "%vd" : "%s"; #true
    printf($fmt,$vs);

=item isweak EXPR

=begin original

If EXPR is a scalar which is a weak reference the result is true.

=end original

EXPR が弱いリファレンスであるスカラなら、結果は真です。

    $ref  = \$foo;
    $weak = isweak($ref);               # false
    weaken($ref);
    $weak = isweak($ref);               # true

=begin original

B<NOTE>: Copying a weak reference creates a normal, strong, reference.

=end original

B<NOTE>: 弱いリファレンスをコピーすると、通常の(強い)リファレンスになります。

    $copy = $ref;
    $weak = isweak($copy);              # false

=item looks_like_number EXPR

=begin original

Returns true if perl thinks EXPR is a number. See
L<perlapi/looks_like_number>.

=end original

EXPR が数値であると perl が考えたときに真になります。
L<perlapi/looks_like_number> を参照してください。

=item openhandle FH

=begin original

Returns FH if FH may be used as a filehandle and is open, or FH is a tied
handle. Otherwise C<undef> is returned.

=end original

FH がファイルハンドルとして使われていて開いているか、FH が tie された
ハンドルなら、FH を返します。
さもなければ C<undef> が返されます。

    $fh = openhandle(*STDIN);		# \*STDIN
    $fh = openhandle(\*STDIN);		# \*STDIN
    $fh = openhandle(*NOTOPEN);		# undef
    $fh = openhandle("scalar");		# undef
    
=item readonly SCALAR

=begin original

Returns true if SCALAR is readonly.

=end original

SCALAR が読み込み専用の場合に真を返します。

    sub foo { readonly($_[0]) }

    $readonly = foo($bar);              # false
    $readonly = foo(0);                 # true

=item refaddr EXPR

=begin original

If EXPR evaluates to a reference the internal memory address of
the referenced value is returned. Otherwise C<undef> is returned.

=end original

EXPR がリファレンスと評価される場合、参照している値の内部メモリアドレスが
返されます。
さもなければ C<undef> が返されます。

    $addr = refaddr "string";           # undef
    $addr = refaddr \$var;              # eg 12345678
    $addr = refaddr [];                 # eg 23456784

    $obj  = bless {}, "Foo";
    $addr = refaddr $obj;               # eg 88123488

=item reftype EXPR

=begin original

If EXPR evaluates to a reference the type of the variable referenced
is returned. Otherwise C<undef> is returned.

=end original

EXPR がリファレンスと評価される場合、参照している変数の型が返されます。
さもなければ C<undef> が返されます。

    $type = reftype "string";           # undef
    $type = reftype \$var;              # SCALAR
    $type = reftype [];                 # ARRAY

    $obj  = bless {}, "Foo";
    $type = reftype $obj;               # HASH

=item set_prototype CODEREF, PROTOTYPE

=begin original

Sets the prototype of the given function, or deletes it if PROTOTYPE is
undef. Returns the CODEREF.

=end original

与えられた関数のプロトタイプを設定します; PROTOTYPE が undef の場合は
削除します。
CODEREF を返します。

    set_prototype \&foo, '$$';

=item tainted EXPR

=begin original

Return true if the result of EXPR is tainted

=end original

EXPR の結果が汚染されていれば真を返します。

    $taint = tainted("constant");       # false
    $taint = tainted($ENV{PWD});        # true if running under -T

=item weaken REF

=begin original

REF will be turned into a weak reference. This means that it will not
hold a reference count on the object it references. Also when the reference
count on that object reaches zero, REF will be set to undef.

=end original

REF は弱いリファレンスに変わります。
これは、参照先のオブジェクトの参照カウントに影響を与えないということです。
また、そのオブジェクトの参照カウントがゼロになると、REF は undef に
設定されます。

=begin original

This is useful for keeping copies of references , but you don't want to
prevent the object being DESTROY-ed at its usual time.

=end original

これはリファレンスのコピーを保存したいけれども、通常時に
オブジェクトが DESTROY されるのを妨げたくない場合に有用です。

    {
      my $var;
      $ref = \$var;
      weaken($ref);                     # Make $ref a weak reference
    }
    # $ref is now undef

=begin original

Note that if you take a copy of a scalar with a weakened reference,
the copy will be a strong reference.

=end original

弱くしたリファレンスをコピーすると、そのコピーは強いリファレンスになることに
注意してください。

    my $var;
    my $foo = \$var;
    weaken($foo);                       # Make $foo a weak reference
    my $bar = $foo;                     # $bar is now a strong reference

=begin original

This may be less obvious in other situations, such as C<grep()>, for instance
when grepping through a list of weakened references to objects that may have
been destroyed already:

=end original

これは、C<grep()> のように、その他の場合ほど明らかでないかもしれません;
例えば、既に破壊されているかもしれないオブジェクトへの弱いリファレンスの
リストに対して grep すると:

    @object = grep { defined } @object;

=begin original

This will indeed remove all references to destroyed objects, but the remaining
references to objects will be strong, causing the remaining objects to never
be destroyed because there is now always a strong reference to them in the
@object array.

=end original

これは確かに破壊されたオブジェクトへの全てのリファレンスを除去しますが、
残されたオブジェクトへのリファレンスは強くなり、残されたオブジェクトは
決して破壊されなくなります; なぜなら @object 配列の中に常にそれらに対する
強いリファレンスがあるからです。

=back

=head1 DIAGNOSTICS

=begin original

Module use may give one of the following errors during import.

=end original

モジュールの use は、インポート中に以下のエラーの一つが起きることがあります。

=over

=item Weak references are not implemented in the version of perl

=begin original

The version of perl that you are using does not implement weak references, to use
C<isweak> or C<weaken> you will need to use a newer release of perl.

=end original

使っているバージョンの perl は弱いリファレンスを実装していないので、
C<isweak> や C<weaken> を使うにはより新しいリリースの perl が必要です。

=item Vstrings are not implemented in the version of perl

=begin original

The version of perl that you are using does not implement Vstrings, to use
C<isvstring> you will need to use a newer release of perl.

=end original

使っているバージョンの perl は v 文字列を実装していないので、
C<isvstring> を使うにはより新しいリリースの perl が必要です。

=item C<NAME> is only available with the XS version of Scalar::Util

=begin original

C<Scalar::Util> contains both perl and C implementations of many of its functions
so that those without access to a C compiler may still use it. However some of the functions
are only available when a C compiler was available to compile the XS version of the extension.

=end original

C<Scalar::Util> は、その多くの関数に perl 実装と C 実装の両方を持つので、
C コンパイラにアクセス出来なくても使えます。
しかし、一部の関数は、拡張の XS 版をコンパイルできる C コンパイラが
利用可能な場合にのみ利用可能です。

=begin original

At present that list is: weaken, isweak, dualvar, isvstring, set_prototype

=end original

現在のところ、その関数は: weaken, isweak, dualvar, isvstring, set_prototype

=back

=head1 KNOWN BUGS

=begin original

There is a bug in perl5.6.0 with UV's that are >= 1<<31. This will
show up as tests 8 and 9 of dualvar.t failing

=end original

これは perl5.6.0 での UV が >= 1<<31 の場合のバグです。
これは dualvar.t のテスト 8 と 9 が失敗として現れます。

=head1 SEE ALSO

L<List::Util>

=head1 COPYRIGHT

Copyright (c) 1997-2007 Graham Barr <gbarr@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=begin original

Except weaken and isweak which are

=end original

例外として、weaken と isweak は:

Copyright (c) 1999 Tuomas J. Lukka <lukka@iki.fi>. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as perl itself.

=begin meta

Translate: Kentaro Shirakata <argrath@ub32.org>
Status: completed

=end meta

=cut

