
=encoding euc-jp

=head1 NAME

=begin original

LWP::Simple - simple procedural interface to LWP

=end original

LWP::Simple - LWP への簡単な手続き的インターフェース

=head1 SYNOPSIS

 perl -MLWP::Simple -e 'getprint "http://www.sn.no"'

 use LWP::Simple;
 $content = get("http://www.sn.no/");
 die "Couldn't get it!" unless defined $content;

 if (mirror("http://www.sn.no/", "foo") == RC_NOT_MODIFIED) {
     ...
 }

 if (is_success(getprint("http://www.sn.no/"))) {
     ...
 }

=head1 DESCRIPTION

=begin original

This module is meant for people who want a simplified view of the
libwww-perl library.  It should also be suitable for one-liners.  If
you need more control or access to the header fields in the requests
sent and responses received, then you should use the full object-oriented
interface provided by the C<LWP::UserAgent> module.

=end original

このモジュールは、libwww-perl ライブラリの簡略化されたビューが欲しい人々に
向いています。
これはワンライナーにも適しています。
もしより多くの制御や送信するリクエストや受信したレスポンスのヘッダに
アクセスする必要があれば、C<LWP::UserAgent> モジュールによって提供される
フルにオブジェクト指向なインターフェースを使わなければなりません。

=begin original

The following functions are provided (and exported) by this module:

=end original

このモジュールにより以下の関数が提供 (そしてエクスポート) されます:

=over 3

=item get($url)

=begin original

The get() function will fetch the document identified by the given URL
and return it.  It returns C<undef> if it fails.  The $url argument can
be either a string or a reference to a URI object.

=end original

get() 関数は与えられた URL により示されるドキュメントを取り出し、それを
返します。
失敗すれば C<undef> を返します。
引数 $url は文字列にも URI オブジェクトへのリファレンスにも
することができます。

=begin original

You will not be able to examine the response code or response headers
(like 'Content-Type') when you are accessing the web using this
function.  If you need that information you should use the full OO
interface (see L<LWP::UserAgent>).

=end original

この関数を使って Web にアクセスすると、応答コードや ('Content-Type' のような)
レスポンスヘッダを検査することは出来ません。
もしその情報が必要であれば、フル OO インターフェースを使わなければなりません
(LWP::UserAgentをご覧下さい)。

=item head($url)

=begin original

Get document headers. Returns the following 5 values if successful:
($content_type, $document_length, $modified_time, $expires, $server)

=end original

ドキュメントヘッダを取得します。
正常ならば以下の 5 つの変数を返します:
($content_type, $document_length, $modified_time, $expires, $server) 

=begin original

Returns an empty list if it fails.  In scalar context returns TRUE if
successful.

=end original

失敗すると空リストを返します。
スカラコンテキストでは成功すると真を返します。

=item getprint($url)

=begin original

Get and print a document identified by a URL. The document is printed
to the selected default filehandle for output (normally STDOUT) as
data is received from the network.  If the request fails, then the
status code and message are printed on STDERR.  The return value is
the HTTP response code.

=end original

URL により識別されるドキュメントを取得し出力します。
ネットワークからデータが受信されると、ドキュメントは選択されたデフォルトの
出力ファイルハンドル(通常は STDOUT) に出力されます。
もしリクエストが失敗すると、ステータス・コードとメッセージが STDERR に
出力されます。
戻り値は HTTP 応答コードです。

=item getstore($url, $file)

=begin original

Gets a document identified by a URL and stores it in the file. The
return value is the HTTP response code.

=end original

URL により識別されるドキュメントを取得し、ファイルに格納します。
戻り値は HTTP 応答コードです。

=item mirror($url, $file)

=begin original

Get and store a document identified by a URL, using
I<If-modified-since>, and checking the I<Content-Length>.  Returns
the HTTP response code.

=end original

I<If-modified-since> を使い、I<Content-Length> を使いながら、URL により
識別されるドキュメントを取得し、ファイルに格納します。
戻り値は HTTP 応答コードです。

=back

=begin original

This module also exports the HTTP::Status constants and procedures.
You can use them when you check the response code from getprint(),
getstore() or mirror().  The constants are:

=end original

このモジュールは HTTP::Status 定数とプロシージャもエクスポートします。
getprint(), getstore(), mirror() からの応答コードをチェックするときに
使うことが出来ます。
定数には以下のものがあります:

   RC_CONTINUE
   RC_SWITCHING_PROTOCOLS
   RC_OK
   RC_CREATED
   RC_ACCEPTED
   RC_NON_AUTHORITATIVE_INFORMATION
   RC_NO_CONTENT
   RC_RESET_CONTENT
   RC_PARTIAL_CONTENT
   RC_MULTIPLE_CHOICES
   RC_MOVED_PERMANENTLY
   RC_MOVED_TEMPORARILY
   RC_SEE_OTHER
   RC_NOT_MODIFIED
   RC_USE_PROXY
   RC_BAD_REQUEST
   RC_UNAUTHORIZED
   RC_PAYMENT_REQUIRED
   RC_FORBIDDEN
   RC_NOT_FOUND
   RC_METHOD_NOT_ALLOWED
   RC_NOT_ACCEPTABLE
   RC_PROXY_AUTHENTICATION_REQUIRED
   RC_REQUEST_TIMEOUT
   RC_CONFLICT
   RC_GONE
   RC_LENGTH_REQUIRED
   RC_PRECONDITION_FAILED
   RC_REQUEST_ENTITY_TOO_LARGE
   RC_REQUEST_URI_TOO_LARGE
   RC_UNSUPPORTED_MEDIA_TYPE
   RC_INTERNAL_SERVER_ERROR
   RC_NOT_IMPLEMENTED
   RC_BAD_GATEWAY
   RC_SERVICE_UNAVAILABLE
   RC_GATEWAY_TIMEOUT
   RC_HTTP_VERSION_NOT_SUPPORTED

=begin original

The HTTP::Status classification functions are:

=end original

HTTP::Status 分類関数には以下のものがあります:

=over 3

=item is_success($rc)

=begin original

True if response code indicated a successful request.

=end original

応答コードが成功であることを示せばであれば真。

=item is_error($rc)

=begin original

True if response code indicated that an error occurred.

=end original

応答コードがエラーが発生したことを示せば真。

=back

=begin original

The module will also export the LWP::UserAgent object as C<$ua> if you
ask for it explicitly.

=end original

明示的に指定すれば、このモジュールは LWP::UserAgent オブジェクトも
C<$ua> としてエクスポートします。

=begin original

The user agent created by this module will identify itself as
"LWP::Simple/#.##"
and will initialize its proxy defaults from the environment (by
calling $ua->env_proxy).

=end original

このモジュールによって作成されるユーザ・エージェントは、
"LWP::Simple/#.##" で識別され、
($ua->env_proxy を呼ぶことにより) 環境変数によってプロキシが
初期化されます。

=head1 CAVEAT

=begin original

Note that if you are using both LWP::Simple and the very popular CGI.pm
module, you may be importing a C<head> function from each module,
producing a warning like "Prototype mismatch: sub main::head ($) vs
none". Get around this problem by just not importing LWP::Simple's
C<head> function, like so:

=end original

LWP::Simple と、とても有名な CGI.pm の両方のモジュールを使っている場合、
両方のモジュールから C<head> 関数をインポートしようとして、
"Prototype mismatch: sub main::head ($) vs none" のような警告が
出るかもしれないことに注意してください。
この問題を回避するには、単に以下のようにして、LWP::Simple の
C<head> 関数をインポートしないようにして:

        use LWP::Simple qw(!head);
        use CGI qw(:standard);  # then only CGI.pm defines a head()

=begin original

Then if you do need LWP::Simple's C<head> function, you can just call
it as C<LWP::Simple::head($url)>.

=end original

もし LWP::Simple の C<head> 関数が必要なら、C<LWP::Simple::head($url)> の
ようにして呼び出すことです。

=head1 SEE ALSO

L<LWP>, L<lwpcook>, L<LWP::UserAgent>, L<HTTP::Status>, L<lwp-request>,
L<lwp-mirror>

=begin meta

Translate: Hippo2000 <GCD00051@nifty.ne.jp> (5.48)
Update: SHIRAKATA Kentaro <argrath@ub32.org> (5.813-)
Status: completed

=end meta

