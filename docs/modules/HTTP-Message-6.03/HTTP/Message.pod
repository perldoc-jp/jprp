
=encoding euc-jp

=head1 NAME

=begin original

HTTP::Message - HTTP style message (base class)

=end original

HTTP::Message - HTTP 形式のメッセージ (基底クラス)

=head1 SYNOPSIS

 use base 'HTTP::Message';

=head1 DESCRIPTION

=begin original

An C<HTTP::Message> object contains some headers and a content body.
The following methods are available:

=end original

C<HTTP::Message> オブジェクトには幾つかのヘッダとコンテンツの本体が
入っています。
以下のメソッドが利用できます:

=over 4

=item $mess = HTTP::Message->new

=item $mess = HTTP::Message->new( $headers )

=item $mess = HTTP::Message->new( $headers, $content )

=begin original

This constructs a new message object.  Normally you would want
construct C<HTTP::Request> or C<HTTP::Response> objects instead.

=end original

これは新しいメッセージオブジェクトを構築します。
普通は代わりに C<HTTP::Request> または C<HTTP::Response> オブジェクトを
構築したいでしょう。

=begin original

The optional $header argument should be a reference to an
C<HTTP::Headers> object or a plain array reference of key/value pairs.
If an C<HTTP::Headers> object is provided then a copy of it will be
embedded into the constructed message, i.e. it will not be owned and
can be modified afterwards without affecting the message.

=end original

オプションの $header 引数は C<HTTP::Headers> オブジェクトへのリファレンスか、
単純なキー/値の組への配列リファレンスを取ります。
C<HTTP::Headers> オブジェクトを指定した場合は、これのコピーが
構築されるメッセージに組み込まれます; つまり、これは所有されず、
後でメッセージには影響を与えることなくオブジェクトを変更できます。

=begin original

The optional $content argument should be a string of bytes.

=end original

オプションの $content 引数はバイト文字列であるべきです。

=item $mess = HTTP::Message->parse( $str )

=begin original

This constructs a new message object by parsing the given string.

=end original

与えられた文字列をパースすることで新しいメッセージオブジェクトを
作成します。

=item $mess->headers

=begin original

Returns the embedded C<HTTP::Headers> object.

=end original

埋め込まれた C<HTTP::Headers> オブジェクトを返します。

=item $mess->headers_as_string

=item $mess->headers_as_string( $eol )

=begin original

Call the as_string() method for the headers in the
message.  This will be the same as

=end original

メッセージの中のヘッダのために as_string() を呼び出します。
これは以下のものと同様ですが:

    $mess->headers->as_string

=begin original

but it will make your program a whole character shorter :-)

=end original

あなたのプログラムの文字数が減ります :-)

=item $mess->content

=item $mess->content( $bytes )

=begin original

The content() method sets the raw content if an argument is given.  If no
argument is given the content is not touched.  In either case the
original raw content is returned.

=end original

引数が与えられていれば、content() メソッドは生の内容を設定します。
引数が与えられなければ、内容は触られません。
いずれの場合も元の生の内容は返されます。

=begin original

Note that the content should be a string of bytes.  Strings in perl
can contain characters outside the range of a byte.  The C<Encode>
module can be used to turn such strings into a string of bytes.

=end original

内容はバイト文字列であるべきであることに注意してください。
Perl での文字列はバイトの範囲を超える文字を含むことができます。
そのような文字列をバイト文字列を変換するには C<Encode> モジュールが
使えます。

=item $mess->add_content( $bytes )

=begin original

The add_content() methods appends more data bytes to the end of the
current content buffer.

=end original

add_content() メソッドは現在のコンテンツの末尾にさらにバイトデータを
追加します。

=item $mess->add_content_utf8( $string )

=begin original

The add_content_utf8() method appends the UTF-8 bytes representing the
string to the end of the current content buffer.

=end original

add_content_utf8() メソッドは、$string で表現される UTF-8 バイトを
現在の内容バッファの末尾に追加します。

=item $mess->content_ref

=item $mess->content_ref( \$bytes )

=begin original

The content_ref() method will return a reference to content buffer string.
It can be more efficient to access the content this way if the content
is huge, and it can even be used for direct manipulation of the content,
for instance:

=end original

content_ref() メソッドは内容バッファ文字列へのリファレンスを返します。
コンテンツが巨大であれば、この方法でコンテンツにアクセスするのはより
効率的かもしれません。
そしてコンテンツの直接操作するためにすら使うことが出来ます。
例えば:

  ${$res->content_ref} =~ s/\bfoo\b/bar/g;

=begin original

This example would modify the content buffer in-place.

=end original

この例は、内容バッファ自体を変更します。

=begin original

If an argument is passed it will setup the content to reference some
external source.  The content() and add_content() methods
will automatically dereference scalar references passed this way.  For
other references content() will return the reference itself and
add_content() will refuse to do anything.

=end original

引数が渡されると、それを外部ソースへリファレンスとして内容を
設定します。
content() メソッドと add_content() メソッドは、この方法で渡された
スカラリファレンスを自動的にデリファレンスします。
その他のリファレンスの場合、content() はリファレンス自身を返し、
add_content() は何もしません。

=item $mess->content_charset

=begin original

This returns the charset used by the content in the message.  The
charset is either found as the charset attribute of the
C<Content-Type> header or by guessing.

=end original

これはメッセージの内容で使われている文字集合を返します。
文字集合は、C<Content-Type> ヘッダの charset 属性にあるものか、
推測によるものです。

=begin original

See L<http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding>
for details about how charset is determined.

=end original

文字集合がどのように決定されるかに関する詳細は、
L<http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding> を
参照してください。

=item $mess->decoded_content( %options )

=begin original

Returns the content with any C<Content-Encoding> undone and for textual content
the raw content encoded to Perl's Unicode strings.  If the C<Content-Encoding>
or C<charset> of the message is unknown this method will fail by returning
C<undef>.

=end original

C<Content-Encoding> が未処理の、テキストデータの場合、Perl の
Unicode 文字列でエンコードされた生の内容を返します。
メッセージの C<Content-Encoding> あるいは C<charset> が不明の場合、
このメソッドは C<undef> を返して失敗します。

=begin original

The following options can be specified.

=end original

以下のオプションが指定できます。

=over

=item C<charset>

=begin original

This override the charset parameter for text content.  The value
C<none> can used to suppress decoding of the charset.

=end original

これはテキストの内容の文字集合パラメータを上書きします。
文字セットのデコードを抑制するために C<none> という値が使えます。

=item C<default_charset>

=begin original

This override the default charset guessed by content_charset() or
if that fails "ISO-8859-1".

=end original

これは、content_charset() による推測か、
それに失敗したら "ISO-8859-1" となるデフォルトを上書きします。

=item C<alt_charset>

=begin original

If decoding fails because the charset specified in the Content-Type header
isn't recognized by Perl's Encode module, then try decoding using this charset
instead of failing.  The C<alt_charset> might be specified as C<none> to simply
return the string without any decoding of charset as alternative.

=end original

Content-Type ヘッダで指定された文字集合が Perl の Encode モジュールで
認識されなかったためにデコードが失敗すると、
失敗する代わりにこの文字集合を使ってデコードしようとします。
代替策としての文字集合のでのデコードなしに単に文字列を返すために、
C<alt_charset> に C<none> を指定できます。

=item C<charset_strict>

=begin original

Abort decoding if malformed characters is found in the content.  By
default you get the substitution character ("\x{FFFD}") in place of
malformed characters.

=end original

もし内容に不正な文字が見つかると、デコードを中断します。
デフォルトでは、不正な文字の位置には代わりの文字 ("\x{FFFD}") が
使われます。

=item C<raise_error>

=begin original

If TRUE then raise an exception if not able to decode content.  Reason
might be that the specified C<Content-Encoding> or C<charset> is not
supported.  If this option is FALSE, then decoded_content() will return
C<undef> on errors, but will still set $@.

=end original

この値が真の場合、内容をデコードできない場合に例外が発生します。
理由は、C<Content-Encoding> や C<charset> に指定されたものに
対応していないことかもしれません。
この値が偽の場合、decoded_content() はエラー時には C<undef> を
返しますが、それでも $@ は設定されます。

=item C<ref>

=begin original

If TRUE then a reference to decoded content is returned.  This might
be more efficient in cases where the decoded content is identical to
the raw content as no data copying is required in this case.

=end original

この値が真の場合、デコードされた内容へのリファレンスが返されます。
元の内容とデコードされた内容が同じ場合、データのコピーが必要ないので、
これを設定するとより効率的になるでしょう。

=back

=item $mess->decodable

=item HTTP::Message::decodable()

=begin original

This returns the encoding identifiers that decoded_content() can
process.  In scalar context returns a comma separated string of
identifiers.

=end original

これは、decoded_content() が処理できるエンコーディング識別子を返します。
スカラコンテキストでは、カンマ区切りの識別子の文字列を返します。

=begin original

This value is suitable for initializing the C<Accept-Encoding> request
header field.

=end original

この値は C<Accept-Encoding> リクエストヘッダフィールドを
初期化するのに適しています。

=item $mess->decode

=begin original

This method tries to replace the content of the message with the
decoded version and removes the C<Content-Encoding> header.  Returns
TRUE if successful and FALSE if not.

=end original

このメソッドは、メッセージの内容をデコードされたものに置き換えて、
C<Content-Encoding> ヘッダを削除しようとします。
成功すれば真を、さもなければ偽を返します。

=begin original

If the message does not have a C<Content-Encoding> header this method
does nothing and returns TRUE.

=end original

メッセージに C<Content-Encoding> ヘッダがなければ、何もせずに真を返します。

=begin original

Note that the content of the message is still bytes after this method
has been called and you still need to call decoded_content() if you
want to process its content as a string.

=end original

メソッドが呼び出された後もメッセージの内容はバイトのままで、
内容を文字列として処理したいときはやはり decoded_content() を
呼び出す必要があることに注意してください。

=item $mess->encode( $encoding, ... )

=begin original

Apply the given encodings to the content of the message.  Returns TRUE
if successful. The "identity" (non-)encoding is always supported; other
currently supported encodings, subject to availability of required
additional modules, are "gzip", "deflate", "x-bzip2" and "base64".

=end original

メッセージの内容に与えられたエンコーディングを適用します。
成功すると真を返します。
"identity" (非)エンコーディングは常に対応しています;
必要な追加モジュールが利用可能であることを条件として、現在の所
対応しているその他のエンコーディングは、
"gzip", "deflate", "x-bzip2", "base64" です。

=begin original

A successful call to this function will set the C<Content-Encoding>
header.

=end original

この関数の呼び出しに成功すると C<Content-Encoding> ヘッダを設定します。

=begin original

Note that C<multipart/*> or C<message/*> messages can't be encoded and
this method will croak if you try.

=end original

C<multipart/*> や C<message/*> メッセージはエンコードできず、
しようとするとこのメソッドは croak します。

=item $mess->parts

=item $mess->parts( @parts )

=item $mess->parts( \@parts )

=begin original

Messages can be composite, i.e. contain other messages.  The composite
messages have a content type of C<multipart/*> or C<message/*>.  This
method give access to the contained messages.

=end original

メッセージは合成できます (他のメッセージを含むことができます)。
合成メッセージは C<multipart/*> や C<message/*> のコンテントタイプを
持ちます。
このメソッドは含まれているメッセージにアクセスします。

=begin original

The argumentless form will return a list of C<HTTP::Message> objects.
If the content type of $msg is not C<multipart/*> or C<message/*> then
this will return the empty list.  In scalar context only the first
object is returned.  The returned message parts should be regarded as
read-only (future versions of this library might make it possible
to modify the parent by modifying the parts).

=end original

引数なし形式の場合は C<HTTP::Message> オブジェクトのリストを返します。
$msg のコンテントタイプが C<multipart/*> でも C<message/*> でもない場合は
空リストが返されます。
スカラコンテキストでは最初のオブジェクトのみが返されます。
返されたメッセージ部品は読み込み専用と考えるべきです
(このライブラリの将来のバージョンでは、部品を変更することで親を
変更できるようになるかもしれません)。

=begin original

If the content type of $msg is C<message/*> then there will only be
one part returned.

=end original

$msg のコンテントタイプが C<message/*> なら、一つの部品だけが
返されます。

=begin original

If the content type is C<message/http>, then the return value will be
either an C<HTTP::Request> or an C<HTTP::Response> object.

=end original

コンテントタイプが C<message/http> なら、返された値は
C<HTTP::Request> オブジェクトか C<HTTP::Response> オブジェクトです。

=begin original

If a @parts argument is given, then the content of the message will be
modified. The array reference form is provided so that an empty list
can be provided.  The @parts array should contain C<HTTP::Message>
objects.  The @parts objects are owned by $mess after this call and
should not be modified or made part of other messages.

=end original

@parts 引数が与えられると、メッセージの内容は変更されます。
配列リファレンス形式は、空リストを提供できるように提供されます。
@parts 配列は C<HTTP::Message> オブジェクトを含んでいる必要があります。
@parts オブジェクトはこの呼び出しの後 $mess によって所有され、
修正されたり、他のメッセージの部品となったりするべきではありません。

=begin original

When updating the message with this method and the old content type of
$mess is not C<multipart/*> or C<message/*>, then the content type is
set to C<multipart/mixed> and all other content headers are cleared.

=end original

このメソッドによってメッセージが更新され、$mess の古い
コンテントタイプが C<multipart/*> でも C<message/*> でもない場合、
コンテントタイプは C<multipart/mixed> に設定され、その他の全ての
コンテントヘッダはクリアされます。

=begin original

This method will croak if the content type is C<message/*> and more
than one part is provided.

=end original

このメソッドは、コンテントタイプが C<message/*> で、複数の部品が
提供された場合、croak します。

=item $mess->add_part( $part )

=begin original

This will add a part to a message.  The $part argument should be
another C<HTTP::Message> object.  If the previous content type of
$mess is not C<multipart/*> then the old content (together with all
content headers) will be made part #1 and the content type made
C<multipart/mixed> before the new part is added.  The $part object is
owned by $mess after this call and should not be modified or made part
of other messages.

=end original

メッセージに部品を追加します。
$part 引数はもう一つの C<HTTP::Message> オブジェクトです。
$mess の以前のコンテントタイプが C<multipart/*> でない場合、
古い内容(と全てのコンテントヘッダ) は 1 番目の部品になり、新しい部品が
追加される前にコンテントタイプは C<multipart/mixed> になります。
$part オブジェクトはこの呼び出しの後 $mess によって所有され、
修正されたり、他のメッセージの部品となったりはしません。

=begin original

There is no return value.

=end original

返り値はありません。

=item $mess->clear

=begin original

Will clear the headers and set the content to the empty string.  There
is no return value

=end original

ヘッダをクリアし、内容を空文字列に設定します。
返り値はありません。

=item $mess->protocol

=item $mess->protocol( $proto )

=begin original

Sets the HTTP protocol used for the message.  The protocol() is a string
like C<HTTP/1.0> or C<HTTP/1.1>.

=end original

そのメッセージに使われる HTTP プロトコルを設定します。
protocol() は C<HTTP/1.0> や C<HTTP/1.1> のような文字列です。

=item $mess->clone

=begin original

Returns a copy of the message object.

=end original

メッセージオブジェクトのコピーを返します。

=item $mess->as_string

=item $mess->as_string( $eol )

=begin original

Returns the message formatted as a single string.

=end original

単一の文字列の形でメッセージを返します。

=begin original

The optional $eol parameter specifies the line ending sequence to use.
The default is "\n".  If no $eol is given then as_string will ensure
that the returned string is newline terminated (even when the message
content is not).  No extra newline is appended if an explicit $eol is
passed.

=end original

オプションの $eol 引数は、使用する行末シーケンスを指定します。
デフォルトは "\n" です。
$eol が与えられなかった場合は、(たとえメッセージの末尾に改行がなくても)
返される文字列が改行で終端されることが保証されます。
明示的に $eol が渡された場合は、改行は追加されません。

=item $mess->dump( %opt )

=begin original

Returns the message formatted as a string.  In void context print the string.

=end original

文字列としてフォーマットされたメッセージを返します。
無効コンテキストでは文字列を表示します。

=begin original

This differs from C<< $mess->as_string >> in that it escapes the bytes
of the content so that it's safe to print them and it limits how much
content to print.  The escapes syntax used is the same as for Perl's
double quoted strings.  If there is no content the string "(no
content)" is shown in its place.

=end original

これは、安全に表示できるように内容のバイトをエスケープすることと、
内容をどれくらい表示するかを制限することが C<< $mess->as_string >> と
違う点です。
使われるエスケープ文法は、Perl のダブルクォート文字列のものと同じです。
内容がない場合、その場所に "(no content)" という文字列が入ります。

=begin original

Options to influence the output can be passed as key/value pairs. The
following options are recognized:

=end original

キー/値のペアとして、出力に影響を与えるオプションを渡せます。
以下のオプションを認識します:

=over

=item maxlength => $num

=begin original

How much of the content to show.  The default is 512.  Set this to 0
for unlimited.

=end original

内容をどれくらい表示するか。
デフォルトは 512 です。
無制限にするには 0 に設定します。

=begin original

If the content is longer then the string is chopped at the limit and
the string "...\n(### more bytes not shown)" appended.

=end original

内容がこれより長い場合、文字列はこの制限で切り落とされ、
"...\n(### more bytes not shown)" という文字列が追加されます。

=item prefix => $str

=begin original

A string that will be prefixed to each line of the dump.

=end original

ダンプの各行の前に前置される文字列。

=back

=back

=begin original

All methods unknown to C<HTTP::Message> itself are delegated to the
C<HTTP::Headers> object that is part of every message.  This allows
convenient access to these methods.  Refer to L<HTTP::Headers> for
details of these methods:

=end original

C<HTTP::Message> 自身が分からない全てのメソッドは、
代わりに各メッセージの一部である C<HTTP::Headers> オブジェクトに
委譲されます。
これは以下の便利メソッドへのアクセスを可能にします。
これらのメソッドについての詳細は C<HTTP::Headers> を参照してください。

    $mess->header( $field => $val )
    $mess->push_header( $field => $val )
    $mess->init_header( $field => $val )
    $mess->remove_header( $field )
    $mess->remove_content_headers
    $mess->header_field_names
    $mess->scan( \&doit )

    $mess->date
    $mess->expires
    $mess->if_modified_since
    $mess->if_unmodified_since
    $mess->last_modified
    $mess->content_type
    $mess->content_encoding
    $mess->content_length
    $mess->content_language
    $mess->title
    $mess->user_agent
    $mess->server
    $mess->from
    $mess->referer
    $mess->www_authenticate
    $mess->authorization
    $mess->proxy_authorization
    $mess->authorization_basic
    $mess->proxy_authorization_basic

=head1 COPYRIGHT

Copyright 1995-2004 Gisle Aas.

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.


=begin meta

Translate: Hippo2000 <GCD00051@nifty.ne.jp> (5.48)
Update: SHIRAKATA Kentaro <argrath@ub32.org> (5.813-)
Status: completed

=end meta

